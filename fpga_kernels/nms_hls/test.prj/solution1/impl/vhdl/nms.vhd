-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nms is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of nms is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "nms_nms,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.414000,HLS_SYN_LAT=134158,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=672,HLS_SYN_LUT=1264,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_87 : STD_LOGIC_VECTOR (7 downto 0) := "10000111";
    constant ap_const_lv8_5A : STD_LOGIC_VECTOR (7 downto 0) := "01011010";
    constant ap_const_lv8_2D : STD_LOGIC_VECTOR (7 downto 0) := "00101101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_F : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv48_FFFFFFFFFFFF : STD_LOGIC_VECTOR (47 downto 0) := "111111111111111111111111111111111111111111111111";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv9_FC : STD_LOGIC_VECTOR (8 downto 0) := "011111100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv7_17 : STD_LOGIC_VECTOR (6 downto 0) := "0010111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv7_27 : STD_LOGIC_VECTOR (6 downto 0) := "0100111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal empty_reg_256 : STD_LOGIC_VECTOR (9 downto 0);
    signal xi_reg_300 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond8810_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8810_reg_965 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal empty_21_fu_337_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal empty_22_fu_343_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_22_reg_974 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_347_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_reg_979 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_357_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_reg_984 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_23_fu_365_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_23_reg_989 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_24_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_24_reg_994 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_27_fu_385_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_27_reg_1000 : STD_LOGIC_VECTOR (5 downto 0);
    signal window_buf_0_1_0_load_reg_1041 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal window_buf_0_2_0_load_reg_1046 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_buf_1_1_0_load_reg_1051 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_buf_1_2_0_load_reg_1056 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_buf_2_1_0_load_reg_1061 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_buf_2_2_0_load_reg_1066 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_37_fu_481_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal idx_urem_fu_561_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond879_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln31_fu_599_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln31_reg_1136 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln45_fu_605_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_reg_1141 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_609_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_reg_1146 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln90_1_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln90_1_reg_1151 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln32_fu_650_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_reg_1156 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state8_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state14_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state16_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal trunc_ln32_reg_1156_pp2_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln32_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1161 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1161_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1161_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1161_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal line_buf_addr_1_reg_1165 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buf_addr_1_reg_1165_pp2_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buf_addr_1_reg_1165_pp2_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln32_fu_676_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln32_reg_1176 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state9_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state11_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_state13_pp2_stage1_iter2 : BOOLEAN;
    signal ap_block_state15_pp2_stage1_iter3 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal tmp_3_reg_1181 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln45_fu_692_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln45_reg_1186 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln45_reg_1186_pp2_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln45_reg_1186_pp2_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln45_reg_1186_pp2_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_load_reg_1191 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln90_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_1196 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_1196_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_1196_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_1196_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_1_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_1_reg_1201 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_1_reg_1201_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_1_reg_1201_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_1_reg_1201_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal value_nms_fu_761_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal value_nms_reg_1206 : STD_LOGIC_VECTOR (7 downto 0);
    signal grad_nms_fu_766_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grad_nms_reg_1215 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln83_fu_833_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_1219 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_reg_1224 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal icmp_ln76_reg_1229 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_fu_839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1234 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1239 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_reg_1249 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_1254 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_fu_903_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln76_fu_914_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln69_fu_925_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln62_fu_936_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_condition_pp2_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_condition_pp2_exit_iter3_state14 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal line_buf_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buf_ce0 : STD_LOGIC;
    signal line_buf_we0 : STD_LOGIC_VECTOR (5 downto 0);
    signal line_buf_d0 : STD_LOGIC_VECTOR (47 downto 0);
    signal line_buf_q0 : STD_LOGIC_VECTOR (47 downto 0);
    signal line_buf_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buf_ce1 : STD_LOGIC;
    signal line_buf_we1 : STD_LOGIC_VECTOR (5 downto 0);
    signal line_buf_d1 : STD_LOGIC_VECTOR (47 downto 0);
    signal line_buf_q1 : STD_LOGIC_VECTOR (47 downto 0);
    signal empty_35_reg_267 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal phi_urem_reg_278 : STD_LOGIC_VECTOR (3 downto 0);
    signal yi_reg_289 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_phi_mux_xi_phi_fu_304_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_reg_pp2_iter0_value_nms_1_reg_312 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp2_iter1_value_nms_1_reg_312 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp2_iter2_value_nms_1_reg_312 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp2_iter3_value_nms_1_reg_312 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp2_iter4_value_nms_1_reg_312 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast10_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln32_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_2_fu_723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal zext_ln45_1_fu_943_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buf_0_1_fu_178 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_buf_0_1_1_fu_182 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_buf_0_2_fu_789_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_buf_1_1_fu_186 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_buf_1_1_1_fu_190 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_buf_2_1_fu_194 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_buf_2_1_1_fu_198 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_33_fu_432_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mask_fu_450_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln42_fu_719_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln55_fu_784_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_25_fu_377_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_26_fu_395_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_28_fu_400_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal empty_29_fu_404_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal empty_31_fu_414_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal empty_32_fu_420_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal empty_30_fu_407_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_demorgan_fu_426_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_fu_439_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_34_fu_446_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_fu_499_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_urem_fu_549_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_39_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_617_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp100_not_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln45_1_fu_660_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln32_1_fu_672_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_697_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln50_3_fu_776_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln50_4_fu_780_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln50_fu_753_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln55_2_fu_813_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln50_1_fu_757_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln55_3_fu_793_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln83_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln76_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln69_fu_921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln62_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln90_fu_947_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln90_2_fu_951_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_condition_372 : BOOLEAN;
    signal mul_fu_499_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_fu_499_p1 : STD_LOGIC_VECTOR (4 downto 0);

    component nms_mul_7ns_5ns_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component nms_line_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (5 downto 0);
        d0 : IN STD_LOGIC_VECTOR (47 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (47 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC_VECTOR (5 downto 0);
        d1 : IN STD_LOGIC_VECTOR (47 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;



begin
    line_buf_U : component nms_line_buf
    generic map (
        DataWidth => 48,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buf_address0,
        ce0 => line_buf_ce0,
        we0 => line_buf_we0,
        d0 => line_buf_d0,
        q0 => line_buf_q0,
        address1 => line_buf_address1,
        ce1 => line_buf_ce1,
        we1 => line_buf_we1,
        d1 => line_buf_d1,
        q1 => line_buf_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp2_flush_enable)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln31_fu_593_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter3_state14) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln31_fu_593_p2 = ap_const_lv1_0)))) then 
                    ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter3_state14) and (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))))) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter2;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)))) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln31_fu_593_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp2_iter3_value_nms_1_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((grad_nms_fu_766_p4 = ap_const_lv8_0)) and not((grad_nms_fu_766_p4 = ap_const_lv8_2D)) and not((grad_nms_fu_766_p4 = ap_const_lv8_5A)) and not((grad_nms_fu_766_p4 = ap_const_lv8_87)) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln32_reg_1161_pp2_iter2_reg = ap_const_lv1_0))) then 
                ap_phi_reg_pp2_iter3_value_nms_1_reg_312 <= value_nms_fu_761_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                ap_phi_reg_pp2_iter3_value_nms_1_reg_312 <= ap_phi_reg_pp2_iter2_value_nms_1_reg_312;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp2_iter4_value_nms_1_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_372)) then
                if (((grad_nms_reg_1215 = ap_const_lv8_87) and (icmp_ln32_reg_1161_pp2_iter3_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter4_value_nms_1_reg_312 <= select_ln83_fu_903_p3;
                elsif (((grad_nms_reg_1215 = ap_const_lv8_5A) and (icmp_ln32_reg_1161_pp2_iter3_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter4_value_nms_1_reg_312 <= select_ln76_fu_914_p3;
                elsif (((grad_nms_reg_1215 = ap_const_lv8_2D) and (icmp_ln32_reg_1161_pp2_iter3_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter4_value_nms_1_reg_312 <= select_ln69_fu_925_p3;
                elsif (((grad_nms_reg_1215 = ap_const_lv8_0) and (icmp_ln32_reg_1161_pp2_iter3_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter4_value_nms_1_reg_312 <= select_ln62_fu_936_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp2_iter4_value_nms_1_reg_312 <= ap_phi_reg_pp2_iter3_value_nms_1_reg_312;
                end if;
            end if; 
        end if;
    end process;

    empty_35_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                empty_35_reg_267 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond879_fu_475_p2 = ap_const_lv1_0))) then 
                empty_35_reg_267 <= empty_37_fu_481_p2;
            end if; 
        end if;
    end process;

    empty_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond8810_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                empty_reg_256 <= empty_21_fu_337_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                empty_reg_256 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    phi_urem_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                phi_urem_reg_278 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond879_fu_475_p2 = ap_const_lv1_0))) then 
                phi_urem_reg_278 <= idx_urem_fu_561_p3;
            end if; 
        end if;
    end process;

    window_buf_0_1_1_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln32_reg_1161_pp2_iter2_reg = ap_const_lv1_0))) then 
                window_buf_0_1_1_fu_182 <= window_buf_0_2_fu_789_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                window_buf_0_1_1_fu_182 <= window_buf_0_2_0_load_reg_1046;
            end if; 
        end if;
    end process;

    window_buf_0_1_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln32_reg_1161_pp2_iter2_reg = ap_const_lv1_0))) then 
                window_buf_0_1_fu_178 <= window_buf_0_1_1_fu_182;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                window_buf_0_1_fu_178 <= window_buf_0_1_0_load_reg_1041;
            end if; 
        end if;
    end process;

    window_buf_1_1_1_fu_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln32_reg_1161_pp2_iter2_reg = ap_const_lv1_0))) then 
                window_buf_1_1_1_fu_190 <= line_buf_q0(31 downto 16);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                window_buf_1_1_1_fu_190 <= window_buf_1_2_0_load_reg_1056;
            end if; 
        end if;
    end process;

    window_buf_1_1_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln32_reg_1161_pp2_iter2_reg = ap_const_lv1_0))) then 
                window_buf_1_1_fu_186 <= window_buf_1_1_1_fu_190;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                window_buf_1_1_fu_186 <= window_buf_1_1_0_load_reg_1051;
            end if; 
        end if;
    end process;

    window_buf_2_1_1_fu_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln32_reg_1161_pp2_iter2_reg = ap_const_lv1_0))) then 
                window_buf_2_1_1_fu_198 <= line_buf_q0(47 downto 32);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                window_buf_2_1_1_fu_198 <= window_buf_2_2_0_load_reg_1066;
            end if; 
        end if;
    end process;

    window_buf_2_1_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln32_reg_1161_pp2_iter2_reg = ap_const_lv1_0))) then 
                window_buf_2_1_fu_194 <= window_buf_2_1_1_fu_198;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                window_buf_2_1_fu_194 <= window_buf_2_1_0_load_reg_1061;
            end if; 
        end if;
    end process;

    xi_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln32_reg_1161 = ap_const_lv1_0))) then 
                xi_reg_300 <= add_ln32_reg_1176;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln31_fu_593_p2 = ap_const_lv1_0))) then 
                xi_reg_300 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    yi_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                yi_reg_289 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                yi_reg_289 <= add_ln31_reg_1136;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln31_reg_1136 <= add_ln31_fu_599_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                add_ln32_reg_1176 <= add_ln32_fu_676_p2;
                ap_phi_reg_pp2_iter1_value_nms_1_reg_312 <= ap_phi_reg_pp2_iter0_value_nms_1_reg_312;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln32_reg_1161 = ap_const_lv1_0))) then
                add_ln45_reg_1186 <= add_ln45_fu_692_p2;
                data_load_reg_1191 <= data_q0;
                icmp_ln90_1_reg_1201 <= icmp_ln90_1_fu_713_p2;
                icmp_ln90_reg_1196 <= icmp_ln90_fu_707_p2;
                tmp_3_reg_1181 <= line_buf_q1(47 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                add_ln45_reg_1186_pp2_iter1_reg <= add_ln45_reg_1186;
                add_ln45_reg_1186_pp2_iter2_reg <= add_ln45_reg_1186_pp2_iter1_reg;
                add_ln45_reg_1186_pp2_iter3_reg <= add_ln45_reg_1186_pp2_iter2_reg;
                icmp_ln90_1_reg_1201_pp2_iter1_reg <= icmp_ln90_1_reg_1201;
                icmp_ln90_1_reg_1201_pp2_iter2_reg <= icmp_ln90_1_reg_1201_pp2_iter1_reg;
                icmp_ln90_1_reg_1201_pp2_iter3_reg <= icmp_ln90_1_reg_1201_pp2_iter2_reg;
                icmp_ln90_reg_1196_pp2_iter1_reg <= icmp_ln90_reg_1196;
                icmp_ln90_reg_1196_pp2_iter2_reg <= icmp_ln90_reg_1196_pp2_iter1_reg;
                icmp_ln90_reg_1196_pp2_iter3_reg <= icmp_ln90_reg_1196_pp2_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                ap_phi_reg_pp2_iter2_value_nms_1_reg_312 <= ap_phi_reg_pp2_iter1_value_nms_1_reg_312;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond8810_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_22_reg_974 <= empty_22_fu_343_p1;
                    empty_23_reg_989(5 downto 4) <= empty_23_fu_365_p2(5 downto 4);
                empty_24_reg_994 <= empty_24_fu_371_p2;
                empty_27_reg_1000 <= empty_27_fu_385_p2;
                tmp_1_reg_979 <= empty_reg_256(9 downto 8);
                    tmp_4_reg_984(5 downto 4) <= tmp_4_fu_357_p3(5 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond8810_reg_965 <= exitcond8810_fu_331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln32_reg_1161_pp2_iter2_reg = ap_const_lv1_0))) then
                grad_nms_reg_1215 <= window_buf_1_1_1_fu_190(15 downto 8);
                value_nms_reg_1206 <= value_nms_fu_761_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln32_reg_1161 <= icmp_ln32_fu_654_p2;
                icmp_ln32_reg_1161_pp2_iter1_reg <= icmp_ln32_reg_1161;
                icmp_ln32_reg_1161_pp2_iter2_reg <= icmp_ln32_reg_1161_pp2_iter1_reg;
                icmp_ln32_reg_1161_pp2_iter3_reg <= icmp_ln32_reg_1161_pp2_iter2_reg;
                line_buf_addr_1_reg_1165_pp2_iter1_reg <= line_buf_addr_1_reg_1165;
                line_buf_addr_1_reg_1165_pp2_iter2_reg <= line_buf_addr_1_reg_1165_pp2_iter1_reg;
                trunc_ln32_reg_1156 <= trunc_ln32_fu_650_p1;
                trunc_ln32_reg_1156_pp2_iter1_reg <= trunc_ln32_reg_1156;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (grad_nms_fu_766_p4 = ap_const_lv8_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln32_reg_1161_pp2_iter2_reg = ap_const_lv1_0))) then
                icmp_ln62_reg_1249 <= icmp_ln62_fu_857_p2;
                icmp_ln63_reg_1254 <= icmp_ln63_fu_863_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (grad_nms_fu_766_p4 = ap_const_lv8_2D) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln32_reg_1161_pp2_iter2_reg = ap_const_lv1_0))) then
                icmp_ln69_reg_1239 <= icmp_ln69_fu_845_p2;
                icmp_ln70_reg_1244 <= icmp_ln70_fu_851_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (grad_nms_fu_766_p4 = ap_const_lv8_5A) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln32_reg_1161_pp2_iter2_reg = ap_const_lv1_0))) then
                icmp_ln76_reg_1229 <= grp_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (grad_nms_fu_766_p4 = ap_const_lv8_5A) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln32_reg_1161_pp2_iter2_reg = ap_const_lv1_0))) then
                icmp_ln77_reg_1234 <= icmp_ln77_fu_839_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (grad_nms_fu_766_p4 = ap_const_lv8_87) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln32_reg_1161_pp2_iter2_reg = ap_const_lv1_0))) then
                icmp_ln83_reg_1219 <= icmp_ln83_fu_833_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (grad_nms_fu_766_p4 = ap_const_lv8_87) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln32_reg_1161_pp2_iter2_reg = ap_const_lv1_0))) then
                icmp_ln84_reg_1224 <= grp_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln32_fu_654_p2 = ap_const_lv1_0))) then
                line_buf_addr_1_reg_1165 <= zext_ln32_fu_645_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln31_fu_593_p2 = ap_const_lv1_0))) then
                or_ln90_1_reg_1151 <= or_ln90_1_fu_639_p2;
                    shl_ln_reg_1146(15 downto 8) <= shl_ln_fu_609_p3(15 downto 8);
                trunc_ln45_reg_1141 <= trunc_ln45_fu_605_p1;
            end if;
        end if;
    end process;
    tmp_4_reg_984(3 downto 0) <= "0000";
    empty_23_reg_989(3 downto 0) <= "1111";
    shl_ln_reg_1146(7 downto 0) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond8810_fu_331_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state5, exitcond879_fu_475_p2, icmp_ln31_fu_593_p2, ap_CS_fsm_state7, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter3, ap_block_pp0_stage0_subdone, ap_block_pp2_stage1_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond8810_fu_331_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond8810_fu_331_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond879_fu_475_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln31_fu_593_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln31_fu_599_p2 <= std_logic_vector(unsigned(yi_reg_289) + unsigned(ap_const_lv9_1));
    add_ln32_fu_676_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(xi_reg_300));
    add_ln45_1_fu_660_p3 <= (trunc_ln45_reg_1141 & trunc_ln32_fu_650_p1);
    add_ln45_fu_692_p2 <= std_logic_vector(unsigned(shl_ln_reg_1146) + unsigned(zext_ln32_1_fu_672_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(8);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_372_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter3)
    begin
                ap_condition_372 <= ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond8810_fu_331_p2)
    begin
        if ((exitcond8810_fu_331_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter3_state14_assign_proc : process(ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            ap_condition_pp2_exit_iter3_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter3_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_flush_enable_assign_proc : process(icmp_ln32_reg_1161, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln32_reg_1161 = ap_const_lv1_1))) then 
            ap_condition_pp2_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp2_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln31_fu_593_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln31_fu_593_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_xi_phi_fu_304_p4_assign_proc : process(xi_reg_300, ap_CS_fsm_pp2_stage0, icmp_ln32_reg_1161, add_ln32_reg_1176, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln32_reg_1161 = ap_const_lv1_0))) then 
            ap_phi_mux_xi_phi_fu_304_p4 <= add_ln32_reg_1176;
        else 
            ap_phi_mux_xi_phi_fu_304_p4 <= xi_reg_300;
        end if; 
    end process;

    ap_phi_reg_pp2_iter0_value_nms_1_reg_312 <= "XXXXXXXX";

    ap_ready_assign_proc : process(icmp_ln31_fu_593_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln31_fu_593_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cmp100_not_fu_633_p2 <= "1" when (unsigned(yi_reg_289) > unsigned(ap_const_lv9_FC)) else "0";
    data_address0 <= zext_ln45_fu_667_p1(16 - 1 downto 0);

    data_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_21_fu_337_p2 <= std_logic_vector(unsigned(empty_reg_256) + unsigned(ap_const_lv10_1));
    empty_22_fu_343_p1 <= empty_reg_256(8 - 1 downto 0);
    empty_23_fu_365_p2 <= (tmp_4_fu_357_p3 or ap_const_lv6_F);
    empty_24_fu_371_p2 <= "1" when (unsigned(tmp_4_fu_357_p3) > unsigned(empty_23_fu_365_p2)) else "0";
    empty_25_fu_377_p3 <= 
        tmp_4_fu_357_p3 when (empty_24_fu_371_p2(0) = '1') else 
        empty_23_fu_365_p2;
    empty_26_fu_395_p3 <= 
        empty_23_reg_989 when (empty_24_reg_994(0) = '1') else 
        tmp_4_reg_984;
    empty_27_fu_385_p2 <= std_logic_vector(signed(ap_const_lv6_2F) - signed(empty_25_fu_377_p3));
    empty_28_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_26_fu_395_p3),48));
    empty_29_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_27_reg_1000),48));
    empty_30_fu_407_p3 <= 
        ap_const_lv48_0 when (empty_24_reg_994(0) = '1') else 
        ap_const_lv48_0;
    empty_31_fu_414_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv48_FFFFFFFFFFFF),to_integer(unsigned('0' & empty_28_fu_400_p1(31-1 downto 0)))));
    empty_32_fu_420_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv48_FFFFFFFFFFFF),to_integer(unsigned('0' & empty_29_fu_404_p1(31-1 downto 0)))));
    empty_33_fu_432_p2 <= (p_demorgan_fu_426_p2 and empty_30_fu_407_p3);
    empty_34_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_439_p3),6));
    empty_37_fu_481_p2 <= std_logic_vector(unsigned(empty_35_reg_267) + unsigned(ap_const_lv4_1));
    empty_39_fu_555_p2 <= "1" when (unsigned(next_urem_fu_549_p2) < unsigned(ap_const_lv4_3)) else "0";
    exitcond879_fu_475_p2 <= "1" when (empty_35_reg_267 = ap_const_lv4_9) else "0";
    exitcond8810_fu_331_p2 <= "1" when (empty_reg_256 = ap_const_lv10_300) else "0";
    grad_nms_fu_766_p4 <= window_buf_1_1_1_fu_190(15 downto 8);
    grp_fu_327_p2 <= "1" when (unsigned(value_nms_fu_761_p1) < unsigned(trunc_ln55_fu_784_p1)) else "0";
    icmp_fu_627_p2 <= "1" when (tmp_2_fu_617_p4 = ap_const_lv7_0) else "0";
    icmp_ln31_fu_593_p2 <= "1" when (yi_reg_289 = ap_const_lv9_100) else "0";
    icmp_ln32_fu_654_p2 <= "1" when (ap_phi_mux_xi_phi_fu_304_p4 = ap_const_lv9_100) else "0";
    icmp_ln62_fu_857_p2 <= "1" when (unsigned(value_nms_fu_761_p1) < unsigned(trunc_ln50_1_fu_757_p1)) else "0";
    icmp_ln63_fu_863_p2 <= "1" when (unsigned(value_nms_fu_761_p1) < unsigned(trunc_ln55_3_fu_793_p4)) else "0";
    icmp_ln69_fu_845_p2 <= "1" when (unsigned(value_nms_fu_761_p1) < unsigned(trunc_ln50_fu_753_p1)) else "0";
    icmp_ln70_fu_851_p2 <= "1" when (unsigned(value_nms_fu_761_p1) < unsigned(trunc_ln55_2_fu_813_p4)) else "0";
    icmp_ln77_fu_839_p2 <= "1" when (unsigned(value_nms_fu_761_p1) < unsigned(trunc_ln50_4_fu_780_p1)) else "0";
    icmp_ln83_fu_833_p2 <= "1" when (unsigned(value_nms_fu_761_p1) < unsigned(trunc_ln50_3_fu_776_p1)) else "0";
    icmp_ln90_1_fu_713_p2 <= "1" when (unsigned(xi_reg_300) > unsigned(ap_const_lv9_FC)) else "0";
    icmp_ln90_fu_707_p2 <= "1" when (tmp_7_fu_697_p4 = ap_const_lv7_0) else "0";
    idx_urem_fu_561_p3 <= 
        next_urem_fu_549_p2 when (empty_39_fu_555_p2(0) = '1') else 
        ap_const_lv4_0;

    line_buf_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp2_stage0, line_buf_addr_1_reg_1165, line_buf_addr_1_reg_1165_pp2_iter2_reg, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, p_cast10_fu_391_p1, ap_block_pp0_stage0, ap_block_pp2_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            line_buf_address0 <= line_buf_addr_1_reg_1165_pp2_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            line_buf_address0 <= line_buf_addr_1_reg_1165;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buf_address0 <= p_cast10_fu_391_p1(8 - 1 downto 0);
        else 
            line_buf_address0 <= "XXXXXXXX";
        end if; 
    end process;


    line_buf_address1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, zext_ln32_fu_645_p1, zext_ln45_2_fu_723_p1, ap_block_pp2_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            line_buf_address1 <= zext_ln45_2_fu_723_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            line_buf_address1 <= zext_ln32_fu_645_p1(8 - 1 downto 0);
        else 
            line_buf_address1 <= "XXXXXXXX";
        end if; 
    end process;


    line_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            line_buf_ce0 <= ap_const_logic_1;
        else 
            line_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then 
            line_buf_ce1 <= ap_const_logic_1;
        else 
            line_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, ap_block_pp0_stage0, empty_33_fu_432_p2, zext_ln42_fu_719_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            line_buf_d0 <= zext_ln42_fu_719_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buf_d0 <= empty_33_fu_432_p2;
        else 
            line_buf_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    line_buf_d1 <= (data_load_reg_1191 & ap_const_lv32_0);

    line_buf_we0_assign_proc : process(exitcond8810_reg_965, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln32_reg_1161, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter1, mask_fu_450_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln32_reg_1161 = ap_const_lv1_0))) then 
            line_buf_we0 <= ap_const_lv6_F;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond8810_reg_965 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buf_we0 <= mask_fu_450_p2;
        else 
            line_buf_we0 <= ap_const_lv6_0;
        end if; 
    end process;


    line_buf_we1_assign_proc : process(icmp_ln32_reg_1161_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln32_reg_1161_pp2_iter1_reg = ap_const_lv1_0))) then 
            line_buf_we1 <= ap_const_lv6_30;
        else 
            line_buf_we1 <= ap_const_lv6_0;
        end if; 
    end process;

    mask_fu_450_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv6_3),to_integer(unsigned('0' & empty_34_fu_446_p1(6-1 downto 0)))));
    next_urem_fu_549_p2 <= std_logic_vector(unsigned(phi_urem_reg_278) + unsigned(ap_const_lv4_1));
    or_ln62_fu_932_p2 <= (icmp_ln63_reg_1254 or icmp_ln62_reg_1249);
    or_ln69_fu_921_p2 <= (icmp_ln70_reg_1244 or icmp_ln69_reg_1239);
    or_ln76_fu_910_p2 <= (icmp_ln77_reg_1234 or icmp_ln76_reg_1229);
    or_ln83_fu_899_p2 <= (icmp_ln84_reg_1224 or icmp_ln83_reg_1219);
    or_ln90_1_fu_639_p2 <= (icmp_fu_627_p2 or cmp100_not_fu_633_p2);
    or_ln90_2_fu_951_p2 <= (or_ln90_fu_947_p2 or or_ln90_1_reg_1151);
    or_ln90_fu_947_p2 <= (icmp_ln90_reg_1196_pp2_iter3_reg or icmp_ln90_1_reg_1201_pp2_iter3_reg);
    out_r_address0 <= zext_ln45_1_fu_943_p1(16 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= 
        ap_const_lv8_0 when (or_ln90_2_fu_951_p2(0) = '1') else 
        ap_phi_reg_pp2_iter4_value_nms_1_reg_312;

    out_r_we0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln32_reg_1161_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln32_reg_1161_pp2_iter3_reg = ap_const_lv1_0))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast10_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_22_reg_974),64));
    p_demorgan_fu_426_p2 <= (empty_32_fu_420_p2 and empty_31_fu_414_p2);
    select_ln62_fu_936_p3 <= 
        ap_const_lv8_0 when (or_ln62_fu_932_p2(0) = '1') else 
        value_nms_reg_1206;
    select_ln69_fu_925_p3 <= 
        ap_const_lv8_0 when (or_ln69_fu_921_p2(0) = '1') else 
        value_nms_reg_1206;
    select_ln76_fu_914_p3 <= 
        ap_const_lv8_0 when (or_ln76_fu_910_p2(0) = '1') else 
        value_nms_reg_1206;
    select_ln83_fu_903_p3 <= 
        ap_const_lv8_0 when (or_ln83_fu_899_p2(0) = '1') else 
        value_nms_reg_1206;
    shl_ln_fu_609_p3 <= (trunc_ln45_fu_605_p1 & ap_const_lv8_0);
    tmp_1_fu_347_p4 <= empty_reg_256(9 downto 8);
    tmp_2_fu_617_p4 <= yi_reg_289(8 downto 2);
    tmp_4_fu_357_p3 <= (tmp_1_fu_347_p4 & ap_const_lv4_0);
    tmp_7_fu_697_p4 <= xi_reg_300(8 downto 2);
    tmp_fu_439_p3 <= (tmp_1_reg_979 & ap_const_lv1_0);
    trunc_ln32_fu_650_p1 <= ap_phi_mux_xi_phi_fu_304_p4(8 - 1 downto 0);
    trunc_ln45_fu_605_p1 <= yi_reg_289(8 - 1 downto 0);
    trunc_ln50_1_fu_757_p1 <= window_buf_1_1_fu_186(8 - 1 downto 0);
    trunc_ln50_3_fu_776_p1 <= window_buf_2_1_fu_194(8 - 1 downto 0);
    trunc_ln50_4_fu_780_p1 <= window_buf_2_1_1_fu_198(8 - 1 downto 0);
    trunc_ln50_fu_753_p1 <= window_buf_0_1_fu_178(8 - 1 downto 0);
    trunc_ln55_2_fu_813_p4 <= line_buf_q0(39 downto 32);
    trunc_ln55_3_fu_793_p4 <= line_buf_q0(23 downto 16);
    trunc_ln55_fu_784_p1 <= line_buf_q0(8 - 1 downto 0);
    value_nms_fu_761_p1 <= window_buf_1_1_1_fu_190(8 - 1 downto 0);
    window_buf_0_1_0_load_reg_1041 <= ap_const_lv16_0;
    window_buf_0_2_0_load_reg_1046 <= ap_const_lv16_0;
    window_buf_0_2_fu_789_p1 <= line_buf_q0(16 - 1 downto 0);
    window_buf_1_1_0_load_reg_1051 <= ap_const_lv16_0;
    window_buf_1_2_0_load_reg_1056 <= ap_const_lv16_0;
    window_buf_2_1_0_load_reg_1061 <= ap_const_lv16_0;
    window_buf_2_2_0_load_reg_1066 <= ap_const_lv16_0;
    zext_ln32_1_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xi_reg_300),16));
    zext_ln32_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_xi_phi_fu_304_p4),64));
    zext_ln42_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_1181),48));
    zext_ln45_1_fu_943_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_reg_1186_pp2_iter3_reg),64));
    zext_ln45_2_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln32_reg_1156_pp2_iter1_reg),64));
    zext_ln45_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_1_fu_660_p3),64));
end behav;

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.1 (64-bit)
-- Version: 2020.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_sobel_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_46_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln45 : IN STD_LOGIC_VECTOR (57 downto 0);
    out_r : IN STD_LOGIC_VECTOR (63 downto 0);
    line_buf_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    line_buf_ce0 : OUT STD_LOGIC;
    line_buf_we0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    line_buf_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    line_buf_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    line_buf_ce1 : OUT STD_LOGIC;
    line_buf_q1 : IN STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of sobel_sobel_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_46_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv504_lc_1 : STD_LOGIC_VECTOR (503 downto
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_3FC : STD_LOGIC_VECTOR (9 downto 0) := "1111111100";
    constant ap_const_lv10_1F8 : STD_LOGIC_VECTOR (9 downto 0) := "0111111000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_1FC : STD_LOGIC_VECTOR (9 downto 0) := "0111111100";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_FFFFFD96 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111110110010110";
    constant ap_const_lv32_FFFFFF97 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110010111";
    constant ap_const_lv32_FFFFFF96 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110010110";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_26A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001101010";
    constant ap_const_lv8_2D : STD_LOGIC_VECTOR (7 downto 0) := "00101101";
    constant ap_const_lv8_5A : STD_LOGIC_VECTOR (7 downto 0) := "01011010";
    constant ap_const_lv8_87 : STD_LOGIC_VECTOR (7 downto 0) := "10000111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter49 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter50 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter51 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter52 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter53 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter54 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter55 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter56 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter57 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter58 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter59 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter60 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter61 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter62 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter63 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter64 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter65 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter66 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter67 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter68 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter69 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter70 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter71 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter72 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter73 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter74 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter75 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter76 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter77 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter78 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter79 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter80 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter81 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter82 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter83 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter84 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter85 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter86 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter87 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter88 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter89 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter90 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter91 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter92 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter93 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter94 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter95 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter96 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln45_reg_1311 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_1329 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op158_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal empty_39_reg_1338 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state28_io : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter41 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter42 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter43 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter44 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter45 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter46 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter47 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter48 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter49 : BOOLEAN;
    signal ap_block_state51_pp0_stage0_iter50 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter51 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter52 : BOOLEAN;
    signal ap_block_state54_pp0_stage0_iter53 : BOOLEAN;
    signal ap_block_state55_pp0_stage0_iter54 : BOOLEAN;
    signal ap_block_state56_pp0_stage0_iter55 : BOOLEAN;
    signal ap_block_state57_pp0_stage0_iter56 : BOOLEAN;
    signal ap_block_state58_pp0_stage0_iter57 : BOOLEAN;
    signal ap_block_state59_pp0_stage0_iter58 : BOOLEAN;
    signal ap_block_state60_pp0_stage0_iter59 : BOOLEAN;
    signal ap_block_state61_pp0_stage0_iter60 : BOOLEAN;
    signal ap_block_state62_pp0_stage0_iter61 : BOOLEAN;
    signal ap_block_state63_pp0_stage0_iter62 : BOOLEAN;
    signal ap_block_state64_pp0_stage0_iter63 : BOOLEAN;
    signal ap_block_state65_pp0_stage0_iter64 : BOOLEAN;
    signal ap_block_state66_pp0_stage0_iter65 : BOOLEAN;
    signal ap_block_state67_pp0_stage0_iter66 : BOOLEAN;
    signal ap_block_state68_pp0_stage0_iter67 : BOOLEAN;
    signal ap_block_state69_pp0_stage0_iter68 : BOOLEAN;
    signal ap_block_state70_pp0_stage0_iter69 : BOOLEAN;
    signal ap_block_state71_pp0_stage0_iter70 : BOOLEAN;
    signal ap_block_state72_pp0_stage0_iter71 : BOOLEAN;
    signal ap_block_state73_pp0_stage0_iter72 : BOOLEAN;
    signal ap_block_state74_pp0_stage0_iter73 : BOOLEAN;
    signal ap_block_state75_pp0_stage0_iter74 : BOOLEAN;
    signal ap_block_state76_pp0_stage0_iter75 : BOOLEAN;
    signal ap_block_state77_pp0_stage0_iter76 : BOOLEAN;
    signal ap_block_state78_pp0_stage0_iter77 : BOOLEAN;
    signal ap_block_state79_pp0_stage0_iter78 : BOOLEAN;
    signal ap_block_state80_pp0_stage0_iter79 : BOOLEAN;
    signal ap_block_state81_pp0_stage0_iter80 : BOOLEAN;
    signal ap_block_state82_pp0_stage0_iter81 : BOOLEAN;
    signal ap_block_state83_pp0_stage0_iter82 : BOOLEAN;
    signal ap_block_state84_pp0_stage0_iter83 : BOOLEAN;
    signal ap_block_state85_pp0_stage0_iter84 : BOOLEAN;
    signal ap_block_state86_pp0_stage0_iter85 : BOOLEAN;
    signal ap_block_state87_pp0_stage0_iter86 : BOOLEAN;
    signal ap_block_state88_pp0_stage0_iter87 : BOOLEAN;
    signal ap_block_state89_pp0_stage0_iter88 : BOOLEAN;
    signal ap_block_state90_pp0_stage0_iter89 : BOOLEAN;
    signal ap_block_state91_pp0_stage0_iter90 : BOOLEAN;
    signal ap_block_state92_pp0_stage0_iter91 : BOOLEAN;
    signal ap_block_state93_pp0_stage0_iter92 : BOOLEAN;
    signal ap_block_state94_pp0_stage0_iter93 : BOOLEAN;
    signal ap_block_state95_pp0_stage0_iter94 : BOOLEAN;
    signal ap_block_state96_pp0_stage0_iter95 : BOOLEAN;
    signal empty_41_reg_1342 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter95_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state97_pp0_stage0_iter96 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln45_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem1_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem1_blk_n_W : STD_LOGIC;
    signal gmem1_blk_n_B : STD_LOGIC;
    signal gmem0_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln45_reg_1311_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1311_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1315_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal line_buf_addr_reg_1323 : STD_LOGIC_VECTOR (8 downto 0);
    signal line_buf_addr_reg_1323_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln59_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_1329_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1333_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_reg_1338_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter47_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter48_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter49_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter50_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter51_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter52_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter53_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter54_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter55_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter56_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter57_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter58_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter59_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter60_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter61_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter62_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter63_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter64_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter65_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter66_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter67_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter68_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter69_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter70_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter71_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter72_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter73_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter74_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter75_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter76_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter77_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter78_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter79_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter80_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter81_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter82_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter83_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter84_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter85_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter86_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter87_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter88_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter89_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter90_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter91_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter92_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter93_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_reg_1342_pp0_iter94_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1346 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_1353 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem0_addr_read_reg_1359 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_3_reg_1364 : STD_LOGIC_VECTOR (15 downto 0);
    signal pix_h_sobel_fu_631_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal pix_h_sobel_reg_1369 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln79_2_fu_637_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln79_2_reg_1375 : STD_LOGIC_VECTOR (10 downto 0);
    signal pix_v_sobel_fu_689_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal pix_v_sobel_reg_1381 : STD_LOGIC_VECTOR (10 downto 0);
    signal pix_v_sobel_reg_1381_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal pix_h_sobel_2_fu_728_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal pix_h_sobel_2_reg_1387 : STD_LOGIC_VECTOR (10 downto 0);
    signal pix_h_sobel_2_reg_1387_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln99_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1392 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1392_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1392_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1392_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1392_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1392_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1392_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1392_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1392_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1392_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1392_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1392_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1392_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1392_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1392_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1392_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1392_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1392_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1392_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1392_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1392_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1392_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1392_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln74_fu_757_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln73_1_fu_760_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1217_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1223_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln90_reg_1423 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_300_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_1433 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_reg_1438 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln45_3_fu_894_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln45_3_reg_1443 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1448 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_fu_1025_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_reg_1453 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln100_fu_1033_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem1_addr_reg_1464 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln124_fu_1209_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln124_reg_1470 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_exit_pp0_iter26_stage0 : STD_LOGIC;
    signal ap_phi_mux_empty_42_phi_fu_283_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_42_reg_280 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln46_fu_536_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter0_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter6_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter7_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter8_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter9_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter10_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter11_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter12_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter13_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter14_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter15_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter16_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter17_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter18_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter19_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter20_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter21_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter22_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter23_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter24_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter25_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter26_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter27_t_int_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln46_1_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln45_1_fu_884_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shiftreg_fu_190 : STD_LOGIC_VECTOR (503 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal pix_v_sobel_1_fu_194 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_198 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_33_fu_202 : STD_LOGIC_VECTOR (7 downto 0);
    signal xi_fu_206 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln46_fu_447_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_xi_load : STD_LOGIC_VECTOR (9 downto 0);
    signal yi_fu_210 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln45_4_fu_901_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_fu_214 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln45_fu_371_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (18 downto 0);
    signal empty_34_fu_218 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_35_fu_222 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_36_fu_226 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln59_1_fu_550_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_300_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln45_fu_386_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln46_fu_399_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln59_fu_403_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln124_fu_413_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln124_fu_417_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_38_fu_429_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_17_fu_433_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal empty_40_fu_453_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_18_fu_457_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln45_1_fu_529_p3 : STD_LOGIC_VECTOR (503 downto 0);
    signal zext_ln73_1_fu_582_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_cast_fu_586_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_589_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_595_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln73_fu_572_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln79_fu_607_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal pix_h_sobel_3_fu_611_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln79_1_fu_617_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_cast_fu_579_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal pix_h_sobel_4_fu_621_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln79_fu_627_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln73_fu_603_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln74_fu_641_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln74_1_fu_645_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp16_fu_649_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_655_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pix_v_sobel_4_fu_667_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln86_fu_663_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_cast1_fu_576_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln86_fu_677_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln86_1_fu_673_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal pix_v_sobel_5_fu_683_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_fu_736_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_751_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_1_fu_774_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_37_fu_770_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp145_not_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln45_2_fu_810_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_820_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_44_fu_816_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_mid1_fu_842_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_6_fu_796_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln45_2_fu_850_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln127_1_mid2_v_v_v_v_v_fu_857_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln45_fu_865_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln45_1_fu_869_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln127_1_mid2_v_fu_874_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal icmp34_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp145_not_mid1_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln124_2_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln124_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_fu_908_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_929_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_fu_933_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal xs_exp_V_fu_919_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_fu_947_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_fu_951_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_fu_965_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_957_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_fu_971_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_975_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1488_fu_983_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_943_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1488_fu_987_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_991_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_14_fu_1003_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_997_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln818_fu_1011_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1015_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_751_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal result_V_2_fu_1048_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_fu_1053_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_1059_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln107_fu_1075_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_1_fu_1081_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_1_fu_1111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln115_fu_1117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_1_fu_1131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_1_fu_1099_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_fu_1137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln111_fu_1143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_fu_1093_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln111_1_fu_1149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_fu_1087_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln111_fu_1163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln111_fu_1155_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln107_fu_1123_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grad_sobel_fu_1169_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln93_fu_1069_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln126_fu_1189_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln126_fu_1193_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln124_1_fu_1177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln2_fu_1181_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_1201_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1217_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1217_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1223_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1223_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_300_ce : STD_LOGIC;
    signal grp_fu_303_ce : STD_LOGIC;
    signal grp_fu_751_ce : STD_LOGIC;
    signal grp_fu_1217_ce : STD_LOGIC;
    signal grp_fu_1223_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter39_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter40_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter41_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter42_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter43_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter44_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter45_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter46_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter47_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter48_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter49_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter50_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter51_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter52_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter53_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter54_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter55_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter56_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter57_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter58_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter59_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter60_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter61_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter62_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter63_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter64_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter65_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter66_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter67_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter68_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter69_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter70_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter71_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter72_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter73_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter74_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter75_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter76_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter77_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter78_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter79_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter80_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter81_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter82_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter83_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter84_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter85_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter86_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter87_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter88_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter89_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter90_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter91_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter92_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter93_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter94_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter95_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sobel_sitofp_32s_32_5_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sobel_fsqrt_32ns_32ns_32_12_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sobel_sdiv_20s_11s_20_24_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component sobel_mul_mul_11s_11s_22_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component sobel_mac_muladd_11s_11s_22s_22_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component sobel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sitofp_32s_32_5_no_dsp_1_U2 : component sobel_sitofp_32s_32_5_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_300_p0,
        ce => grp_fu_300_ce,
        dout => grp_fu_300_p1);

    fsqrt_32ns_32ns_32_12_no_dsp_1_U3 : component sobel_fsqrt_32ns_32ns_32_12_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => x_assign_reg_1433,
        ce => grp_fu_303_ce,
        dout => grp_fu_303_p2);

    sdiv_20s_11s_20_24_1_U4 : component sobel_sdiv_20s_11s_20_24_1
    generic map (
        ID => 1,
        NUM_STAGE => 24,
        din0_WIDTH => 20,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_751_p0,
        din1 => pix_h_sobel_2_fu_728_p2,
        ce => grp_fu_751_ce,
        dout => grp_fu_751_p2);

    mul_mul_11s_11s_22_4_1_U5 : component sobel_mul_mul_11s_11s_22_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1217_p0,
        din1 => grp_fu_1217_p1,
        ce => grp_fu_1217_ce,
        dout => grp_fu_1217_p2);

    mac_muladd_11s_11s_22s_22_4_1_U6 : component sobel_mac_muladd_11s_11s_22s_22_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1223_p0,
        din1 => grp_fu_1223_p1,
        din2 => grp_fu_1217_p2,
        ce => grp_fu_1223_ce,
        dout => grp_fu_1223_p3);

    flow_control_loop_pipe_sequential_init_U : component sobel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter95_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter26_stage0)) then 
                    ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter48 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter49 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter50 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter51 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter52_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter52 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter53_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter53 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter54_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter54 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter55_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter55 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter56_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter56 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter57_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter57 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter58_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter58 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter59_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter59 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter60_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter60 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter61_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter61 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter62_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter62 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter63_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter63 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter64_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter64 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter65_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter65 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter66_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter66 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter67_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter67 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter68_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter68 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter69_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter69 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter70_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter70 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter71_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter71 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter72_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter72 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter72 <= ap_enable_reg_pp0_iter71;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter73_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter73 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter73 <= ap_enable_reg_pp0_iter72;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter74_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter74 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter74 <= ap_enable_reg_pp0_iter73;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter75_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter75 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter75 <= ap_enable_reg_pp0_iter74;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter76_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter76 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter76 <= ap_enable_reg_pp0_iter75;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter77_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter77 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter77 <= ap_enable_reg_pp0_iter76;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter78_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter78 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter78 <= ap_enable_reg_pp0_iter77;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter79_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter79 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter79 <= ap_enable_reg_pp0_iter78;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter80_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter80 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter80 <= ap_enable_reg_pp0_iter79;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter81_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter81 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter81 <= ap_enable_reg_pp0_iter80;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter82_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter82 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter82 <= ap_enable_reg_pp0_iter81;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter83_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter83 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter83 <= ap_enable_reg_pp0_iter82;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter84_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter84 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter84 <= ap_enable_reg_pp0_iter83;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter85_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter85 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter85 <= ap_enable_reg_pp0_iter84;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter86_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter86 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter86 <= ap_enable_reg_pp0_iter85;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter87_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter87 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter87 <= ap_enable_reg_pp0_iter86;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter88_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter88 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter88 <= ap_enable_reg_pp0_iter87;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter89_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter89 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter89 <= ap_enable_reg_pp0_iter88;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter90_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter90 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter90 <= ap_enable_reg_pp0_iter89;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter91_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter91 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter91 <= ap_enable_reg_pp0_iter90;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter92_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter92 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter92 <= ap_enable_reg_pp0_iter91;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter93_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter93 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter93 <= ap_enable_reg_pp0_iter92;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter94_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter94 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter94 <= ap_enable_reg_pp0_iter93;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter95_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter95 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter95 <= ap_enable_reg_pp0_iter94;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter96_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter96 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter96 <= ap_enable_reg_pp0_iter95;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter27_t_int_1_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln45_reg_1311_pp0_iter25_reg = ap_const_lv1_0) and (icmp_ln99_reg_1392_pp0_iter25_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter27_t_int_1_reg_289 <= sext_ln100_fu_1033_p1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter27_t_int_1_reg_289 <= ap_phi_reg_pp0_iter26_t_int_1_reg_289;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter4_t_int_1_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                if (((icmp_ln45_reg_1311_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln99_fu_732_p2 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter4_t_int_1_reg_289 <= ap_const_lv32_7FFFFFFF;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter4_t_int_1_reg_289 <= ap_phi_reg_pp0_iter3_t_int_1_reg_289;
                end if;
            end if; 
        end if;
    end process;

    empty_33_fu_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    empty_33_fu_202 <= ap_const_lv8_0;
                elsif (((icmp_ln45_reg_1311_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_33_fu_202 <= empty_36_fu_226;
                end if;
            end if; 
        end if;
    end process;

    empty_34_fu_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    empty_34_fu_218 <= ap_const_lv8_0;
                elsif (((icmp_ln45_reg_1311_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_34_fu_218 <= tmp_4_reg_1346;
                end if;
            end if; 
        end if;
    end process;

    empty_35_fu_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    empty_35_fu_222 <= ap_const_lv8_0;
                elsif (((icmp_ln45_reg_1311_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_35_fu_222 <= tmp_7_reg_1353;
                end if;
            end if; 
        end if;
    end process;

    empty_36_fu_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    empty_36_fu_226 <= ap_const_lv8_0;
                elsif (((icmp_ln45_reg_1311_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_36_fu_226 <= trunc_ln59_1_fu_550_p1;
                end if;
            end if; 
        end if;
    end process;

    empty_fu_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    empty_fu_198 <= ap_const_lv8_0;
                elsif (((icmp_ln45_reg_1311_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    empty_fu_198 <= empty_35_fu_222;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln45_fu_365_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_214 <= add_ln45_fu_371_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_214 <= ap_const_lv19_0;
                end if;
            end if; 
        end if;
    end process;

    pix_v_sobel_1_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    pix_v_sobel_1_fu_194 <= ap_const_lv8_0;
                elsif (((icmp_ln45_reg_1311_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    pix_v_sobel_1_fu_194 <= empty_34_fu_218;
                end if;
            end if; 
        end if;
    end process;

    shiftreg_fu_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    shiftreg_fu_190 <= ap_const_lv504_lc_1;
                elsif (((icmp_ln45_reg_1311_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    shiftreg_fu_190 <= ap_phi_mux_empty_42_phi_fu_283_p4(511 downto 8);
                end if;
            end if; 
        end if;
    end process;

    xi_fu_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln45_fu_365_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    xi_fu_206 <= add_ln46_fu_447_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    xi_fu_206 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    yi_fu_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    yi_fu_210 <= ap_const_lv10_0;
                elsif (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (icmp_ln45_reg_1311_pp0_iter25_reg = ap_const_lv1_0))) then 
                    yi_fu_210 <= select_ln45_4_fu_901_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_reg_1311_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then
                add_ln90_reg_1423 <= grp_fu_1223_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
                ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
                ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
                ap_loop_exit_ready_pp0_iter42_reg <= ap_loop_exit_ready_pp0_iter41_reg;
                ap_loop_exit_ready_pp0_iter43_reg <= ap_loop_exit_ready_pp0_iter42_reg;
                ap_loop_exit_ready_pp0_iter44_reg <= ap_loop_exit_ready_pp0_iter43_reg;
                ap_loop_exit_ready_pp0_iter45_reg <= ap_loop_exit_ready_pp0_iter44_reg;
                ap_loop_exit_ready_pp0_iter46_reg <= ap_loop_exit_ready_pp0_iter45_reg;
                ap_loop_exit_ready_pp0_iter47_reg <= ap_loop_exit_ready_pp0_iter46_reg;
                ap_loop_exit_ready_pp0_iter48_reg <= ap_loop_exit_ready_pp0_iter47_reg;
                ap_loop_exit_ready_pp0_iter49_reg <= ap_loop_exit_ready_pp0_iter48_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter50_reg <= ap_loop_exit_ready_pp0_iter49_reg;
                ap_loop_exit_ready_pp0_iter51_reg <= ap_loop_exit_ready_pp0_iter50_reg;
                ap_loop_exit_ready_pp0_iter52_reg <= ap_loop_exit_ready_pp0_iter51_reg;
                ap_loop_exit_ready_pp0_iter53_reg <= ap_loop_exit_ready_pp0_iter52_reg;
                ap_loop_exit_ready_pp0_iter54_reg <= ap_loop_exit_ready_pp0_iter53_reg;
                ap_loop_exit_ready_pp0_iter55_reg <= ap_loop_exit_ready_pp0_iter54_reg;
                ap_loop_exit_ready_pp0_iter56_reg <= ap_loop_exit_ready_pp0_iter55_reg;
                ap_loop_exit_ready_pp0_iter57_reg <= ap_loop_exit_ready_pp0_iter56_reg;
                ap_loop_exit_ready_pp0_iter58_reg <= ap_loop_exit_ready_pp0_iter57_reg;
                ap_loop_exit_ready_pp0_iter59_reg <= ap_loop_exit_ready_pp0_iter58_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter60_reg <= ap_loop_exit_ready_pp0_iter59_reg;
                ap_loop_exit_ready_pp0_iter61_reg <= ap_loop_exit_ready_pp0_iter60_reg;
                ap_loop_exit_ready_pp0_iter62_reg <= ap_loop_exit_ready_pp0_iter61_reg;
                ap_loop_exit_ready_pp0_iter63_reg <= ap_loop_exit_ready_pp0_iter62_reg;
                ap_loop_exit_ready_pp0_iter64_reg <= ap_loop_exit_ready_pp0_iter63_reg;
                ap_loop_exit_ready_pp0_iter65_reg <= ap_loop_exit_ready_pp0_iter64_reg;
                ap_loop_exit_ready_pp0_iter66_reg <= ap_loop_exit_ready_pp0_iter65_reg;
                ap_loop_exit_ready_pp0_iter67_reg <= ap_loop_exit_ready_pp0_iter66_reg;
                ap_loop_exit_ready_pp0_iter68_reg <= ap_loop_exit_ready_pp0_iter67_reg;
                ap_loop_exit_ready_pp0_iter69_reg <= ap_loop_exit_ready_pp0_iter68_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter70_reg <= ap_loop_exit_ready_pp0_iter69_reg;
                ap_loop_exit_ready_pp0_iter71_reg <= ap_loop_exit_ready_pp0_iter70_reg;
                ap_loop_exit_ready_pp0_iter72_reg <= ap_loop_exit_ready_pp0_iter71_reg;
                ap_loop_exit_ready_pp0_iter73_reg <= ap_loop_exit_ready_pp0_iter72_reg;
                ap_loop_exit_ready_pp0_iter74_reg <= ap_loop_exit_ready_pp0_iter73_reg;
                ap_loop_exit_ready_pp0_iter75_reg <= ap_loop_exit_ready_pp0_iter74_reg;
                ap_loop_exit_ready_pp0_iter76_reg <= ap_loop_exit_ready_pp0_iter75_reg;
                ap_loop_exit_ready_pp0_iter77_reg <= ap_loop_exit_ready_pp0_iter76_reg;
                ap_loop_exit_ready_pp0_iter78_reg <= ap_loop_exit_ready_pp0_iter77_reg;
                ap_loop_exit_ready_pp0_iter79_reg <= ap_loop_exit_ready_pp0_iter78_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter80_reg <= ap_loop_exit_ready_pp0_iter79_reg;
                ap_loop_exit_ready_pp0_iter81_reg <= ap_loop_exit_ready_pp0_iter80_reg;
                ap_loop_exit_ready_pp0_iter82_reg <= ap_loop_exit_ready_pp0_iter81_reg;
                ap_loop_exit_ready_pp0_iter83_reg <= ap_loop_exit_ready_pp0_iter82_reg;
                ap_loop_exit_ready_pp0_iter84_reg <= ap_loop_exit_ready_pp0_iter83_reg;
                ap_loop_exit_ready_pp0_iter85_reg <= ap_loop_exit_ready_pp0_iter84_reg;
                ap_loop_exit_ready_pp0_iter86_reg <= ap_loop_exit_ready_pp0_iter85_reg;
                ap_loop_exit_ready_pp0_iter87_reg <= ap_loop_exit_ready_pp0_iter86_reg;
                ap_loop_exit_ready_pp0_iter88_reg <= ap_loop_exit_ready_pp0_iter87_reg;
                ap_loop_exit_ready_pp0_iter89_reg <= ap_loop_exit_ready_pp0_iter88_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter90_reg <= ap_loop_exit_ready_pp0_iter89_reg;
                ap_loop_exit_ready_pp0_iter91_reg <= ap_loop_exit_ready_pp0_iter90_reg;
                ap_loop_exit_ready_pp0_iter92_reg <= ap_loop_exit_ready_pp0_iter91_reg;
                ap_loop_exit_ready_pp0_iter93_reg <= ap_loop_exit_ready_pp0_iter92_reg;
                ap_loop_exit_ready_pp0_iter94_reg <= ap_loop_exit_ready_pp0_iter93_reg;
                ap_loop_exit_ready_pp0_iter95_reg <= ap_loop_exit_ready_pp0_iter94_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                empty_39_reg_1338_pp0_iter10_reg <= empty_39_reg_1338_pp0_iter9_reg;
                empty_39_reg_1338_pp0_iter11_reg <= empty_39_reg_1338_pp0_iter10_reg;
                empty_39_reg_1338_pp0_iter12_reg <= empty_39_reg_1338_pp0_iter11_reg;
                empty_39_reg_1338_pp0_iter13_reg <= empty_39_reg_1338_pp0_iter12_reg;
                empty_39_reg_1338_pp0_iter14_reg <= empty_39_reg_1338_pp0_iter13_reg;
                empty_39_reg_1338_pp0_iter15_reg <= empty_39_reg_1338_pp0_iter14_reg;
                empty_39_reg_1338_pp0_iter16_reg <= empty_39_reg_1338_pp0_iter15_reg;
                empty_39_reg_1338_pp0_iter17_reg <= empty_39_reg_1338_pp0_iter16_reg;
                empty_39_reg_1338_pp0_iter18_reg <= empty_39_reg_1338_pp0_iter17_reg;
                empty_39_reg_1338_pp0_iter19_reg <= empty_39_reg_1338_pp0_iter18_reg;
                empty_39_reg_1338_pp0_iter20_reg <= empty_39_reg_1338_pp0_iter19_reg;
                empty_39_reg_1338_pp0_iter21_reg <= empty_39_reg_1338_pp0_iter20_reg;
                empty_39_reg_1338_pp0_iter22_reg <= empty_39_reg_1338_pp0_iter21_reg;
                empty_39_reg_1338_pp0_iter23_reg <= empty_39_reg_1338_pp0_iter22_reg;
                empty_39_reg_1338_pp0_iter24_reg <= empty_39_reg_1338_pp0_iter23_reg;
                empty_39_reg_1338_pp0_iter25_reg <= empty_39_reg_1338_pp0_iter24_reg;
                empty_39_reg_1338_pp0_iter26_reg <= empty_39_reg_1338_pp0_iter25_reg;
                empty_39_reg_1338_pp0_iter2_reg <= empty_39_reg_1338_pp0_iter1_reg;
                empty_39_reg_1338_pp0_iter3_reg <= empty_39_reg_1338_pp0_iter2_reg;
                empty_39_reg_1338_pp0_iter4_reg <= empty_39_reg_1338_pp0_iter3_reg;
                empty_39_reg_1338_pp0_iter5_reg <= empty_39_reg_1338_pp0_iter4_reg;
                empty_39_reg_1338_pp0_iter6_reg <= empty_39_reg_1338_pp0_iter5_reg;
                empty_39_reg_1338_pp0_iter7_reg <= empty_39_reg_1338_pp0_iter6_reg;
                empty_39_reg_1338_pp0_iter8_reg <= empty_39_reg_1338_pp0_iter7_reg;
                empty_39_reg_1338_pp0_iter9_reg <= empty_39_reg_1338_pp0_iter8_reg;
                empty_41_reg_1342_pp0_iter10_reg <= empty_41_reg_1342_pp0_iter9_reg;
                empty_41_reg_1342_pp0_iter11_reg <= empty_41_reg_1342_pp0_iter10_reg;
                empty_41_reg_1342_pp0_iter12_reg <= empty_41_reg_1342_pp0_iter11_reg;
                empty_41_reg_1342_pp0_iter13_reg <= empty_41_reg_1342_pp0_iter12_reg;
                empty_41_reg_1342_pp0_iter14_reg <= empty_41_reg_1342_pp0_iter13_reg;
                empty_41_reg_1342_pp0_iter15_reg <= empty_41_reg_1342_pp0_iter14_reg;
                empty_41_reg_1342_pp0_iter16_reg <= empty_41_reg_1342_pp0_iter15_reg;
                empty_41_reg_1342_pp0_iter17_reg <= empty_41_reg_1342_pp0_iter16_reg;
                empty_41_reg_1342_pp0_iter18_reg <= empty_41_reg_1342_pp0_iter17_reg;
                empty_41_reg_1342_pp0_iter19_reg <= empty_41_reg_1342_pp0_iter18_reg;
                empty_41_reg_1342_pp0_iter20_reg <= empty_41_reg_1342_pp0_iter19_reg;
                empty_41_reg_1342_pp0_iter21_reg <= empty_41_reg_1342_pp0_iter20_reg;
                empty_41_reg_1342_pp0_iter22_reg <= empty_41_reg_1342_pp0_iter21_reg;
                empty_41_reg_1342_pp0_iter23_reg <= empty_41_reg_1342_pp0_iter22_reg;
                empty_41_reg_1342_pp0_iter24_reg <= empty_41_reg_1342_pp0_iter23_reg;
                empty_41_reg_1342_pp0_iter25_reg <= empty_41_reg_1342_pp0_iter24_reg;
                empty_41_reg_1342_pp0_iter26_reg <= empty_41_reg_1342_pp0_iter25_reg;
                empty_41_reg_1342_pp0_iter27_reg <= empty_41_reg_1342_pp0_iter26_reg;
                empty_41_reg_1342_pp0_iter28_reg <= empty_41_reg_1342_pp0_iter27_reg;
                empty_41_reg_1342_pp0_iter29_reg <= empty_41_reg_1342_pp0_iter28_reg;
                empty_41_reg_1342_pp0_iter2_reg <= empty_41_reg_1342_pp0_iter1_reg;
                empty_41_reg_1342_pp0_iter30_reg <= empty_41_reg_1342_pp0_iter29_reg;
                empty_41_reg_1342_pp0_iter31_reg <= empty_41_reg_1342_pp0_iter30_reg;
                empty_41_reg_1342_pp0_iter32_reg <= empty_41_reg_1342_pp0_iter31_reg;
                empty_41_reg_1342_pp0_iter33_reg <= empty_41_reg_1342_pp0_iter32_reg;
                empty_41_reg_1342_pp0_iter34_reg <= empty_41_reg_1342_pp0_iter33_reg;
                empty_41_reg_1342_pp0_iter35_reg <= empty_41_reg_1342_pp0_iter34_reg;
                empty_41_reg_1342_pp0_iter36_reg <= empty_41_reg_1342_pp0_iter35_reg;
                empty_41_reg_1342_pp0_iter37_reg <= empty_41_reg_1342_pp0_iter36_reg;
                empty_41_reg_1342_pp0_iter38_reg <= empty_41_reg_1342_pp0_iter37_reg;
                empty_41_reg_1342_pp0_iter39_reg <= empty_41_reg_1342_pp0_iter38_reg;
                empty_41_reg_1342_pp0_iter3_reg <= empty_41_reg_1342_pp0_iter2_reg;
                empty_41_reg_1342_pp0_iter40_reg <= empty_41_reg_1342_pp0_iter39_reg;
                empty_41_reg_1342_pp0_iter41_reg <= empty_41_reg_1342_pp0_iter40_reg;
                empty_41_reg_1342_pp0_iter42_reg <= empty_41_reg_1342_pp0_iter41_reg;
                empty_41_reg_1342_pp0_iter43_reg <= empty_41_reg_1342_pp0_iter42_reg;
                empty_41_reg_1342_pp0_iter44_reg <= empty_41_reg_1342_pp0_iter43_reg;
                empty_41_reg_1342_pp0_iter45_reg <= empty_41_reg_1342_pp0_iter44_reg;
                empty_41_reg_1342_pp0_iter46_reg <= empty_41_reg_1342_pp0_iter45_reg;
                empty_41_reg_1342_pp0_iter47_reg <= empty_41_reg_1342_pp0_iter46_reg;
                empty_41_reg_1342_pp0_iter48_reg <= empty_41_reg_1342_pp0_iter47_reg;
                empty_41_reg_1342_pp0_iter49_reg <= empty_41_reg_1342_pp0_iter48_reg;
                empty_41_reg_1342_pp0_iter4_reg <= empty_41_reg_1342_pp0_iter3_reg;
                empty_41_reg_1342_pp0_iter50_reg <= empty_41_reg_1342_pp0_iter49_reg;
                empty_41_reg_1342_pp0_iter51_reg <= empty_41_reg_1342_pp0_iter50_reg;
                empty_41_reg_1342_pp0_iter52_reg <= empty_41_reg_1342_pp0_iter51_reg;
                empty_41_reg_1342_pp0_iter53_reg <= empty_41_reg_1342_pp0_iter52_reg;
                empty_41_reg_1342_pp0_iter54_reg <= empty_41_reg_1342_pp0_iter53_reg;
                empty_41_reg_1342_pp0_iter55_reg <= empty_41_reg_1342_pp0_iter54_reg;
                empty_41_reg_1342_pp0_iter56_reg <= empty_41_reg_1342_pp0_iter55_reg;
                empty_41_reg_1342_pp0_iter57_reg <= empty_41_reg_1342_pp0_iter56_reg;
                empty_41_reg_1342_pp0_iter58_reg <= empty_41_reg_1342_pp0_iter57_reg;
                empty_41_reg_1342_pp0_iter59_reg <= empty_41_reg_1342_pp0_iter58_reg;
                empty_41_reg_1342_pp0_iter5_reg <= empty_41_reg_1342_pp0_iter4_reg;
                empty_41_reg_1342_pp0_iter60_reg <= empty_41_reg_1342_pp0_iter59_reg;
                empty_41_reg_1342_pp0_iter61_reg <= empty_41_reg_1342_pp0_iter60_reg;
                empty_41_reg_1342_pp0_iter62_reg <= empty_41_reg_1342_pp0_iter61_reg;
                empty_41_reg_1342_pp0_iter63_reg <= empty_41_reg_1342_pp0_iter62_reg;
                empty_41_reg_1342_pp0_iter64_reg <= empty_41_reg_1342_pp0_iter63_reg;
                empty_41_reg_1342_pp0_iter65_reg <= empty_41_reg_1342_pp0_iter64_reg;
                empty_41_reg_1342_pp0_iter66_reg <= empty_41_reg_1342_pp0_iter65_reg;
                empty_41_reg_1342_pp0_iter67_reg <= empty_41_reg_1342_pp0_iter66_reg;
                empty_41_reg_1342_pp0_iter68_reg <= empty_41_reg_1342_pp0_iter67_reg;
                empty_41_reg_1342_pp0_iter69_reg <= empty_41_reg_1342_pp0_iter68_reg;
                empty_41_reg_1342_pp0_iter6_reg <= empty_41_reg_1342_pp0_iter5_reg;
                empty_41_reg_1342_pp0_iter70_reg <= empty_41_reg_1342_pp0_iter69_reg;
                empty_41_reg_1342_pp0_iter71_reg <= empty_41_reg_1342_pp0_iter70_reg;
                empty_41_reg_1342_pp0_iter72_reg <= empty_41_reg_1342_pp0_iter71_reg;
                empty_41_reg_1342_pp0_iter73_reg <= empty_41_reg_1342_pp0_iter72_reg;
                empty_41_reg_1342_pp0_iter74_reg <= empty_41_reg_1342_pp0_iter73_reg;
                empty_41_reg_1342_pp0_iter75_reg <= empty_41_reg_1342_pp0_iter74_reg;
                empty_41_reg_1342_pp0_iter76_reg <= empty_41_reg_1342_pp0_iter75_reg;
                empty_41_reg_1342_pp0_iter77_reg <= empty_41_reg_1342_pp0_iter76_reg;
                empty_41_reg_1342_pp0_iter78_reg <= empty_41_reg_1342_pp0_iter77_reg;
                empty_41_reg_1342_pp0_iter79_reg <= empty_41_reg_1342_pp0_iter78_reg;
                empty_41_reg_1342_pp0_iter7_reg <= empty_41_reg_1342_pp0_iter6_reg;
                empty_41_reg_1342_pp0_iter80_reg <= empty_41_reg_1342_pp0_iter79_reg;
                empty_41_reg_1342_pp0_iter81_reg <= empty_41_reg_1342_pp0_iter80_reg;
                empty_41_reg_1342_pp0_iter82_reg <= empty_41_reg_1342_pp0_iter81_reg;
                empty_41_reg_1342_pp0_iter83_reg <= empty_41_reg_1342_pp0_iter82_reg;
                empty_41_reg_1342_pp0_iter84_reg <= empty_41_reg_1342_pp0_iter83_reg;
                empty_41_reg_1342_pp0_iter85_reg <= empty_41_reg_1342_pp0_iter84_reg;
                empty_41_reg_1342_pp0_iter86_reg <= empty_41_reg_1342_pp0_iter85_reg;
                empty_41_reg_1342_pp0_iter87_reg <= empty_41_reg_1342_pp0_iter86_reg;
                empty_41_reg_1342_pp0_iter88_reg <= empty_41_reg_1342_pp0_iter87_reg;
                empty_41_reg_1342_pp0_iter89_reg <= empty_41_reg_1342_pp0_iter88_reg;
                empty_41_reg_1342_pp0_iter8_reg <= empty_41_reg_1342_pp0_iter7_reg;
                empty_41_reg_1342_pp0_iter90_reg <= empty_41_reg_1342_pp0_iter89_reg;
                empty_41_reg_1342_pp0_iter91_reg <= empty_41_reg_1342_pp0_iter90_reg;
                empty_41_reg_1342_pp0_iter92_reg <= empty_41_reg_1342_pp0_iter91_reg;
                empty_41_reg_1342_pp0_iter93_reg <= empty_41_reg_1342_pp0_iter92_reg;
                empty_41_reg_1342_pp0_iter94_reg <= empty_41_reg_1342_pp0_iter93_reg;
                empty_41_reg_1342_pp0_iter95_reg <= empty_41_reg_1342_pp0_iter94_reg;
                empty_41_reg_1342_pp0_iter9_reg <= empty_41_reg_1342_pp0_iter8_reg;
                icmp_ln124_reg_1333_pp0_iter10_reg <= icmp_ln124_reg_1333_pp0_iter9_reg;
                icmp_ln124_reg_1333_pp0_iter11_reg <= icmp_ln124_reg_1333_pp0_iter10_reg;
                icmp_ln124_reg_1333_pp0_iter12_reg <= icmp_ln124_reg_1333_pp0_iter11_reg;
                icmp_ln124_reg_1333_pp0_iter13_reg <= icmp_ln124_reg_1333_pp0_iter12_reg;
                icmp_ln124_reg_1333_pp0_iter14_reg <= icmp_ln124_reg_1333_pp0_iter13_reg;
                icmp_ln124_reg_1333_pp0_iter15_reg <= icmp_ln124_reg_1333_pp0_iter14_reg;
                icmp_ln124_reg_1333_pp0_iter16_reg <= icmp_ln124_reg_1333_pp0_iter15_reg;
                icmp_ln124_reg_1333_pp0_iter17_reg <= icmp_ln124_reg_1333_pp0_iter16_reg;
                icmp_ln124_reg_1333_pp0_iter18_reg <= icmp_ln124_reg_1333_pp0_iter17_reg;
                icmp_ln124_reg_1333_pp0_iter19_reg <= icmp_ln124_reg_1333_pp0_iter18_reg;
                icmp_ln124_reg_1333_pp0_iter20_reg <= icmp_ln124_reg_1333_pp0_iter19_reg;
                icmp_ln124_reg_1333_pp0_iter21_reg <= icmp_ln124_reg_1333_pp0_iter20_reg;
                icmp_ln124_reg_1333_pp0_iter22_reg <= icmp_ln124_reg_1333_pp0_iter21_reg;
                icmp_ln124_reg_1333_pp0_iter23_reg <= icmp_ln124_reg_1333_pp0_iter22_reg;
                icmp_ln124_reg_1333_pp0_iter24_reg <= icmp_ln124_reg_1333_pp0_iter23_reg;
                icmp_ln124_reg_1333_pp0_iter25_reg <= icmp_ln124_reg_1333_pp0_iter24_reg;
                icmp_ln124_reg_1333_pp0_iter26_reg <= icmp_ln124_reg_1333_pp0_iter25_reg;
                icmp_ln124_reg_1333_pp0_iter2_reg <= icmp_ln124_reg_1333_pp0_iter1_reg;
                icmp_ln124_reg_1333_pp0_iter3_reg <= icmp_ln124_reg_1333_pp0_iter2_reg;
                icmp_ln124_reg_1333_pp0_iter4_reg <= icmp_ln124_reg_1333_pp0_iter3_reg;
                icmp_ln124_reg_1333_pp0_iter5_reg <= icmp_ln124_reg_1333_pp0_iter4_reg;
                icmp_ln124_reg_1333_pp0_iter6_reg <= icmp_ln124_reg_1333_pp0_iter5_reg;
                icmp_ln124_reg_1333_pp0_iter7_reg <= icmp_ln124_reg_1333_pp0_iter6_reg;
                icmp_ln124_reg_1333_pp0_iter8_reg <= icmp_ln124_reg_1333_pp0_iter7_reg;
                icmp_ln124_reg_1333_pp0_iter9_reg <= icmp_ln124_reg_1333_pp0_iter8_reg;
                icmp_ln45_reg_1311_pp0_iter10_reg <= icmp_ln45_reg_1311_pp0_iter9_reg;
                icmp_ln45_reg_1311_pp0_iter11_reg <= icmp_ln45_reg_1311_pp0_iter10_reg;
                icmp_ln45_reg_1311_pp0_iter12_reg <= icmp_ln45_reg_1311_pp0_iter11_reg;
                icmp_ln45_reg_1311_pp0_iter13_reg <= icmp_ln45_reg_1311_pp0_iter12_reg;
                icmp_ln45_reg_1311_pp0_iter14_reg <= icmp_ln45_reg_1311_pp0_iter13_reg;
                icmp_ln45_reg_1311_pp0_iter15_reg <= icmp_ln45_reg_1311_pp0_iter14_reg;
                icmp_ln45_reg_1311_pp0_iter16_reg <= icmp_ln45_reg_1311_pp0_iter15_reg;
                icmp_ln45_reg_1311_pp0_iter17_reg <= icmp_ln45_reg_1311_pp0_iter16_reg;
                icmp_ln45_reg_1311_pp0_iter18_reg <= icmp_ln45_reg_1311_pp0_iter17_reg;
                icmp_ln45_reg_1311_pp0_iter19_reg <= icmp_ln45_reg_1311_pp0_iter18_reg;
                icmp_ln45_reg_1311_pp0_iter20_reg <= icmp_ln45_reg_1311_pp0_iter19_reg;
                icmp_ln45_reg_1311_pp0_iter21_reg <= icmp_ln45_reg_1311_pp0_iter20_reg;
                icmp_ln45_reg_1311_pp0_iter22_reg <= icmp_ln45_reg_1311_pp0_iter21_reg;
                icmp_ln45_reg_1311_pp0_iter23_reg <= icmp_ln45_reg_1311_pp0_iter22_reg;
                icmp_ln45_reg_1311_pp0_iter24_reg <= icmp_ln45_reg_1311_pp0_iter23_reg;
                icmp_ln45_reg_1311_pp0_iter25_reg <= icmp_ln45_reg_1311_pp0_iter24_reg;
                icmp_ln45_reg_1311_pp0_iter26_reg <= icmp_ln45_reg_1311_pp0_iter25_reg;
                icmp_ln45_reg_1311_pp0_iter2_reg <= icmp_ln45_reg_1311_pp0_iter1_reg;
                icmp_ln45_reg_1311_pp0_iter3_reg <= icmp_ln45_reg_1311_pp0_iter2_reg;
                icmp_ln45_reg_1311_pp0_iter4_reg <= icmp_ln45_reg_1311_pp0_iter3_reg;
                icmp_ln45_reg_1311_pp0_iter5_reg <= icmp_ln45_reg_1311_pp0_iter4_reg;
                icmp_ln45_reg_1311_pp0_iter6_reg <= icmp_ln45_reg_1311_pp0_iter5_reg;
                icmp_ln45_reg_1311_pp0_iter7_reg <= icmp_ln45_reg_1311_pp0_iter6_reg;
                icmp_ln45_reg_1311_pp0_iter8_reg <= icmp_ln45_reg_1311_pp0_iter7_reg;
                icmp_ln45_reg_1311_pp0_iter9_reg <= icmp_ln45_reg_1311_pp0_iter8_reg;
                icmp_ln46_reg_1315_pp0_iter10_reg <= icmp_ln46_reg_1315_pp0_iter9_reg;
                icmp_ln46_reg_1315_pp0_iter11_reg <= icmp_ln46_reg_1315_pp0_iter10_reg;
                icmp_ln46_reg_1315_pp0_iter12_reg <= icmp_ln46_reg_1315_pp0_iter11_reg;
                icmp_ln46_reg_1315_pp0_iter13_reg <= icmp_ln46_reg_1315_pp0_iter12_reg;
                icmp_ln46_reg_1315_pp0_iter14_reg <= icmp_ln46_reg_1315_pp0_iter13_reg;
                icmp_ln46_reg_1315_pp0_iter15_reg <= icmp_ln46_reg_1315_pp0_iter14_reg;
                icmp_ln46_reg_1315_pp0_iter16_reg <= icmp_ln46_reg_1315_pp0_iter15_reg;
                icmp_ln46_reg_1315_pp0_iter17_reg <= icmp_ln46_reg_1315_pp0_iter16_reg;
                icmp_ln46_reg_1315_pp0_iter18_reg <= icmp_ln46_reg_1315_pp0_iter17_reg;
                icmp_ln46_reg_1315_pp0_iter19_reg <= icmp_ln46_reg_1315_pp0_iter18_reg;
                icmp_ln46_reg_1315_pp0_iter20_reg <= icmp_ln46_reg_1315_pp0_iter19_reg;
                icmp_ln46_reg_1315_pp0_iter21_reg <= icmp_ln46_reg_1315_pp0_iter20_reg;
                icmp_ln46_reg_1315_pp0_iter22_reg <= icmp_ln46_reg_1315_pp0_iter21_reg;
                icmp_ln46_reg_1315_pp0_iter23_reg <= icmp_ln46_reg_1315_pp0_iter22_reg;
                icmp_ln46_reg_1315_pp0_iter24_reg <= icmp_ln46_reg_1315_pp0_iter23_reg;
                icmp_ln46_reg_1315_pp0_iter25_reg <= icmp_ln46_reg_1315_pp0_iter24_reg;
                icmp_ln46_reg_1315_pp0_iter2_reg <= icmp_ln46_reg_1315_pp0_iter1_reg;
                icmp_ln46_reg_1315_pp0_iter3_reg <= icmp_ln46_reg_1315_pp0_iter2_reg;
                icmp_ln46_reg_1315_pp0_iter4_reg <= icmp_ln46_reg_1315_pp0_iter3_reg;
                icmp_ln46_reg_1315_pp0_iter5_reg <= icmp_ln46_reg_1315_pp0_iter4_reg;
                icmp_ln46_reg_1315_pp0_iter6_reg <= icmp_ln46_reg_1315_pp0_iter5_reg;
                icmp_ln46_reg_1315_pp0_iter7_reg <= icmp_ln46_reg_1315_pp0_iter6_reg;
                icmp_ln46_reg_1315_pp0_iter8_reg <= icmp_ln46_reg_1315_pp0_iter7_reg;
                icmp_ln46_reg_1315_pp0_iter9_reg <= icmp_ln46_reg_1315_pp0_iter8_reg;
                icmp_ln99_reg_1392_pp0_iter10_reg <= icmp_ln99_reg_1392_pp0_iter9_reg;
                icmp_ln99_reg_1392_pp0_iter11_reg <= icmp_ln99_reg_1392_pp0_iter10_reg;
                icmp_ln99_reg_1392_pp0_iter12_reg <= icmp_ln99_reg_1392_pp0_iter11_reg;
                icmp_ln99_reg_1392_pp0_iter13_reg <= icmp_ln99_reg_1392_pp0_iter12_reg;
                icmp_ln99_reg_1392_pp0_iter14_reg <= icmp_ln99_reg_1392_pp0_iter13_reg;
                icmp_ln99_reg_1392_pp0_iter15_reg <= icmp_ln99_reg_1392_pp0_iter14_reg;
                icmp_ln99_reg_1392_pp0_iter16_reg <= icmp_ln99_reg_1392_pp0_iter15_reg;
                icmp_ln99_reg_1392_pp0_iter17_reg <= icmp_ln99_reg_1392_pp0_iter16_reg;
                icmp_ln99_reg_1392_pp0_iter18_reg <= icmp_ln99_reg_1392_pp0_iter17_reg;
                icmp_ln99_reg_1392_pp0_iter19_reg <= icmp_ln99_reg_1392_pp0_iter18_reg;
                icmp_ln99_reg_1392_pp0_iter20_reg <= icmp_ln99_reg_1392_pp0_iter19_reg;
                icmp_ln99_reg_1392_pp0_iter21_reg <= icmp_ln99_reg_1392_pp0_iter20_reg;
                icmp_ln99_reg_1392_pp0_iter22_reg <= icmp_ln99_reg_1392_pp0_iter21_reg;
                icmp_ln99_reg_1392_pp0_iter23_reg <= icmp_ln99_reg_1392_pp0_iter22_reg;
                icmp_ln99_reg_1392_pp0_iter24_reg <= icmp_ln99_reg_1392_pp0_iter23_reg;
                icmp_ln99_reg_1392_pp0_iter25_reg <= icmp_ln99_reg_1392_pp0_iter24_reg;
                icmp_ln99_reg_1392_pp0_iter4_reg <= icmp_ln99_reg_1392;
                icmp_ln99_reg_1392_pp0_iter5_reg <= icmp_ln99_reg_1392_pp0_iter4_reg;
                icmp_ln99_reg_1392_pp0_iter6_reg <= icmp_ln99_reg_1392_pp0_iter5_reg;
                icmp_ln99_reg_1392_pp0_iter7_reg <= icmp_ln99_reg_1392_pp0_iter6_reg;
                icmp_ln99_reg_1392_pp0_iter8_reg <= icmp_ln99_reg_1392_pp0_iter7_reg;
                icmp_ln99_reg_1392_pp0_iter9_reg <= icmp_ln99_reg_1392_pp0_iter8_reg;
                pix_h_sobel_2_reg_1387_pp0_iter4_reg <= pix_h_sobel_2_reg_1387;
                pix_v_sobel_reg_1381_pp0_iter3_reg <= pix_v_sobel_reg_1381;
                select_ln124_reg_1470 <= select_ln124_fu_1209_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_39_reg_1338_pp0_iter1_reg <= empty_39_reg_1338;
                empty_41_reg_1342_pp0_iter1_reg <= empty_41_reg_1342;
                icmp_ln124_reg_1333_pp0_iter1_reg <= icmp_ln124_reg_1333;
                icmp_ln45_reg_1311 <= icmp_ln45_fu_365_p2;
                icmp_ln45_reg_1311_pp0_iter1_reg <= icmp_ln45_reg_1311;
                icmp_ln46_reg_1315_pp0_iter1_reg <= icmp_ln46_reg_1315;
                icmp_ln59_reg_1329_pp0_iter1_reg <= icmp_ln59_reg_1329;
                line_buf_addr_reg_1323_pp0_iter1_reg <= line_buf_addr_reg_1323;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter10_t_int_1_reg_289 <= ap_phi_reg_pp0_iter9_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter11_t_int_1_reg_289 <= ap_phi_reg_pp0_iter10_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter12_t_int_1_reg_289 <= ap_phi_reg_pp0_iter11_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter13_t_int_1_reg_289 <= ap_phi_reg_pp0_iter12_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter14_t_int_1_reg_289 <= ap_phi_reg_pp0_iter13_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter15_t_int_1_reg_289 <= ap_phi_reg_pp0_iter14_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter16_t_int_1_reg_289 <= ap_phi_reg_pp0_iter15_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter17_t_int_1_reg_289 <= ap_phi_reg_pp0_iter16_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter18_t_int_1_reg_289 <= ap_phi_reg_pp0_iter17_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter19_t_int_1_reg_289 <= ap_phi_reg_pp0_iter18_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_t_int_1_reg_289 <= ap_phi_reg_pp0_iter0_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter20_t_int_1_reg_289 <= ap_phi_reg_pp0_iter19_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter21_t_int_1_reg_289 <= ap_phi_reg_pp0_iter20_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter22_t_int_1_reg_289 <= ap_phi_reg_pp0_iter21_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter23_t_int_1_reg_289 <= ap_phi_reg_pp0_iter22_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter24_t_int_1_reg_289 <= ap_phi_reg_pp0_iter23_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter25_t_int_1_reg_289 <= ap_phi_reg_pp0_iter24_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter26_t_int_1_reg_289 <= ap_phi_reg_pp0_iter25_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_t_int_1_reg_289 <= ap_phi_reg_pp0_iter1_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter3_t_int_1_reg_289 <= ap_phi_reg_pp0_iter2_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter5_t_int_1_reg_289 <= ap_phi_reg_pp0_iter4_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter6_t_int_1_reg_289 <= ap_phi_reg_pp0_iter5_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter7_t_int_1_reg_289 <= ap_phi_reg_pp0_iter6_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter8_t_int_1_reg_289 <= ap_phi_reg_pp0_iter7_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter9_t_int_1_reg_289 <= ap_phi_reg_pp0_iter8_t_int_1_reg_289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_reg_1311_pp0_iter24_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                dc_reg_1438 <= grp_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_365_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_39_reg_1338 <= empty_39_fu_441_p2;
                empty_41_reg_1342 <= empty_41_fu_465_p2;
                icmp_ln124_reg_1333 <= icmp_ln124_fu_423_p2;
                icmp_ln46_reg_1315 <= icmp_ln46_fu_380_p2;
                icmp_ln59_reg_1329 <= icmp_ln59_fu_407_p2;
                line_buf_addr_reg_1323 <= zext_ln46_1_fu_394_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op158_read_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                gmem0_addr_read_reg_1359 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_reg_1311_pp0_iter25_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem1_addr_reg_1464 <= sext_ln45_1_fu_884_p1;
                p_Result_s_reg_1448 <= data_V_fu_908_p1(31 downto 31);
                select_ln45_3_reg_1443 <= select_ln45_3_fu_894_p3;
                val_reg_1453 <= val_fu_1025_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_reg_1311_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln99_reg_1392 <= icmp_ln99_fu_732_p2;
                pix_h_sobel_2_reg_1387 <= pix_h_sobel_2_fu_728_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_reg_1311_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                pix_h_sobel_reg_1369 <= pix_h_sobel_fu_631_p2;
                pix_v_sobel_reg_1381 <= pix_v_sobel_fu_689_p2;
                    zext_ln79_2_reg_1375(7 downto 0) <= zext_ln79_2_fu_637_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_reg_1311 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_3_reg_1364 <= line_buf_q1(23 downto 8);
                tmp_4_reg_1346 <= line_buf_q1(15 downto 8);
                tmp_7_reg_1353 <= line_buf_q1(23 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_reg_1311_pp0_iter12_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                x_assign_reg_1433 <= grp_fu_300_p1;
            end if;
        end if;
    end process;
    zext_ln79_2_reg_1375(10 downto 8) <= "000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln124_fu_417_p2 <= std_logic_vector(unsigned(zext_ln124_fu_413_p1) + unsigned(ap_const_lv10_3FC));
    add_ln346_fu_951_p2 <= std_logic_vector(unsigned(zext_ln346_fu_947_p1) + unsigned(ap_const_lv9_181));
    add_ln45_1_fu_869_p2 <= std_logic_vector(unsigned(zext_ln45_fu_865_p1) + unsigned(out_r));
    add_ln45_2_fu_810_p2 <= std_logic_vector(unsigned(yi_fu_210) + unsigned(ap_const_lv10_1));
    add_ln45_fu_371_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv19_1));
    add_ln46_fu_447_p2 <= std_logic_vector(unsigned(select_ln45_fu_386_p3) + unsigned(ap_const_lv10_1));
    add_ln86_fu_677_p2 <= std_logic_vector(signed(sext_ln86_fu_663_p1) + signed(tmp_2_cast1_fu_576_p1));
    and_ln107_1_fu_1131_p2 <= (icmp_ln107_fu_1075_p2 and icmp_ln107_1_fu_1081_p2);
    and_ln107_fu_1087_p2 <= (icmp_ln107_fu_1075_p2 and icmp_ln107_1_fu_1081_p2);
    and_ln111_1_fu_1149_p2 <= (icmp_ln111_fu_1093_p2 and and_ln111_fu_1143_p2);
    and_ln111_fu_1143_p2 <= (xor_ln107_fu_1137_p2 and icmp_ln111_1_fu_1099_p2);
    and_ln115_fu_1117_p2 <= (icmp_ln115_fu_1105_p2 and icmp_ln115_1_fu_1111_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter96, m_axi_gmem0_RVALID, ap_predicate_op158_read_state2, m_axi_gmem1_BVALID, empty_41_reg_1342_pp0_iter95_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((empty_41_reg_1342_pp0_iter95_reg = ap_const_lv1_1) and (m_axi_gmem1_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter96 = ap_const_logic_1)) or ((ap_predicate_op158_read_state2 = ap_const_boolean_1) and (m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter96, m_axi_gmem0_RVALID, ap_predicate_op158_read_state2, m_axi_gmem1_WREADY, m_axi_gmem1_BVALID, ap_block_state28_io, empty_41_reg_1342_pp0_iter95_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((empty_41_reg_1342_pp0_iter95_reg = ap_const_lv1_1) and (m_axi_gmem1_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter96 = ap_const_logic_1)) or ((m_axi_gmem1_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state28_io) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_predicate_op158_read_state2 = ap_const_boolean_1) and (m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter96, m_axi_gmem0_RVALID, ap_predicate_op158_read_state2, m_axi_gmem1_WREADY, m_axi_gmem1_BVALID, ap_block_state28_io, empty_41_reg_1342_pp0_iter95_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((empty_41_reg_1342_pp0_iter95_reg = ap_const_lv1_1) and (m_axi_gmem1_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter96 = ap_const_logic_1)) or ((m_axi_gmem1_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state28_io) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_predicate_op158_read_state2 = ap_const_boolean_1) and (m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state28_io_assign_proc : process(m_axi_gmem1_AWREADY, empty_39_reg_1338_pp0_iter26_reg)
    begin
                ap_block_state28_io <= ((empty_39_reg_1338_pp0_iter26_reg = ap_const_lv1_1) and (m_axi_gmem1_AWREADY = ap_const_logic_0));
    end process;

        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_gmem0_RVALID, ap_predicate_op158_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op158_read_state2 = ap_const_boolean_1) and (m_axi_gmem0_RVALID = ap_const_logic_0));
    end process;

        ap_block_state30_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter49 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage0_iter50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter51 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter52 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage0_iter53 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage0_iter54 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage0_iter55 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage0_iter56 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage0_iter57 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage0_iter58 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage0_iter59 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage0_iter60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage0_iter61 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage0_iter62 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage0_iter63 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage0_iter64 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage0_iter65 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage0_iter66 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage0_iter67 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage0_iter68 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp0_stage0_iter69 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp0_stage0_iter70 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp0_stage0_iter71 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp0_stage0_iter72 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp0_stage0_iter73 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp0_stage0_iter74 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp0_stage0_iter75 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp0_stage0_iter76 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp0_stage0_iter77 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp0_stage0_iter78 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp0_stage0_iter79 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp0_stage0_iter80 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp0_stage0_iter81 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp0_stage0_iter82 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp0_stage0_iter83 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp0_stage0_iter84 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp0_stage0_iter85 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp0_stage0_iter86 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp0_stage0_iter87 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state89_pp0_stage0_iter88 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state90_pp0_stage0_iter89 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state91_pp0_stage0_iter90 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state92_pp0_stage0_iter91 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state93_pp0_stage0_iter92 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state94_pp0_stage0_iter93 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state95_pp0_stage0_iter94 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state96_pp0_stage0_iter95 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state97_pp0_stage0_iter96_assign_proc : process(m_axi_gmem1_BVALID, empty_41_reg_1342_pp0_iter95_reg)
    begin
                ap_block_state97_pp0_stage0_iter96 <= ((empty_41_reg_1342_pp0_iter95_reg = ap_const_lv1_1) and (m_axi_gmem1_BVALID = ap_const_logic_0));
    end process;

        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln45_fu_365_p2)
    begin
        if (((icmp_ln45_fu_365_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter26_stage0_assign_proc : process(ap_enable_reg_pp0_iter26, ap_block_pp0_stage0_subdone, icmp_ln45_reg_1311_pp0_iter25_reg)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (icmp_ln45_reg_1311_pp0_iter25_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter26_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter26_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter95_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter95_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49, ap_enable_reg_pp0_iter50, ap_enable_reg_pp0_iter51, ap_enable_reg_pp0_iter52, ap_enable_reg_pp0_iter53, ap_enable_reg_pp0_iter54, ap_enable_reg_pp0_iter55, ap_enable_reg_pp0_iter56, ap_enable_reg_pp0_iter57, ap_enable_reg_pp0_iter58, ap_enable_reg_pp0_iter59, ap_enable_reg_pp0_iter60, ap_enable_reg_pp0_iter61, ap_enable_reg_pp0_iter62, ap_enable_reg_pp0_iter63, ap_enable_reg_pp0_iter64, ap_enable_reg_pp0_iter65, ap_enable_reg_pp0_iter66, ap_enable_reg_pp0_iter67, ap_enable_reg_pp0_iter68, ap_enable_reg_pp0_iter69, ap_enable_reg_pp0_iter70, ap_enable_reg_pp0_iter71, ap_enable_reg_pp0_iter72, ap_enable_reg_pp0_iter73, ap_enable_reg_pp0_iter74, ap_enable_reg_pp0_iter75, ap_enable_reg_pp0_iter76, ap_enable_reg_pp0_iter77, ap_enable_reg_pp0_iter78, ap_enable_reg_pp0_iter79, ap_enable_reg_pp0_iter80, ap_enable_reg_pp0_iter81, ap_enable_reg_pp0_iter82, ap_enable_reg_pp0_iter83, ap_enable_reg_pp0_iter84, ap_enable_reg_pp0_iter85, ap_enable_reg_pp0_iter86, ap_enable_reg_pp0_iter87, ap_enable_reg_pp0_iter88, ap_enable_reg_pp0_iter89, ap_enable_reg_pp0_iter90, ap_enable_reg_pp0_iter91, ap_enable_reg_pp0_iter92, ap_enable_reg_pp0_iter93, ap_enable_reg_pp0_iter94, ap_enable_reg_pp0_iter95, ap_enable_reg_pp0_iter96)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter96 = ap_const_logic_0) and (ap_enable_reg_pp0_iter95 = ap_const_logic_0) and (ap_enable_reg_pp0_iter94 = ap_const_logic_0) and (ap_enable_reg_pp0_iter93 = ap_const_logic_0) and (ap_enable_reg_pp0_iter92 = ap_const_logic_0) and (ap_enable_reg_pp0_iter91 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter90 = ap_const_logic_0) and (ap_enable_reg_pp0_iter89 = ap_const_logic_0) and (ap_enable_reg_pp0_iter88 = ap_const_logic_0) and (ap_enable_reg_pp0_iter87 = ap_const_logic_0) and (ap_enable_reg_pp0_iter86 = ap_const_logic_0) and (ap_enable_reg_pp0_iter85 = ap_const_logic_0) and (ap_enable_reg_pp0_iter84 = ap_const_logic_0) and (ap_enable_reg_pp0_iter83 = ap_const_logic_0) and (ap_enable_reg_pp0_iter82 = ap_const_logic_0) and (ap_enable_reg_pp0_iter81 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter80 = ap_const_logic_0) and (ap_enable_reg_pp0_iter79 = ap_const_logic_0) and (ap_enable_reg_pp0_iter78 = ap_const_logic_0) and (ap_enable_reg_pp0_iter77 = ap_const_logic_0) and (ap_enable_reg_pp0_iter76 = ap_const_logic_0) and (ap_enable_reg_pp0_iter75 = ap_const_logic_0) and (ap_enable_reg_pp0_iter74 = ap_const_logic_0) and (ap_enable_reg_pp0_iter73 = ap_const_logic_0) and (ap_enable_reg_pp0_iter72 = ap_const_logic_0) and (ap_enable_reg_pp0_iter71 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter70 = ap_const_logic_0) and (ap_enable_reg_pp0_iter69 = ap_const_logic_0) and (ap_enable_reg_pp0_iter68 = ap_const_logic_0) and (ap_enable_reg_pp0_iter67 = ap_const_logic_0) and (ap_enable_reg_pp0_iter66 = ap_const_logic_0) and (ap_enable_reg_pp0_iter65 = ap_const_logic_0) and (ap_enable_reg_pp0_iter64 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter63 = ap_const_logic_0) and (ap_enable_reg_pp0_iter62 = ap_const_logic_0) and (ap_enable_reg_pp0_iter61 = ap_const_logic_0) and (ap_enable_reg_pp0_iter60 = ap_const_logic_0) and (ap_enable_reg_pp0_iter59 = ap_const_logic_0) and (ap_enable_reg_pp0_iter58 = ap_const_logic_0) and (ap_enable_reg_pp0_iter57 = ap_const_logic_0) and (ap_enable_reg_pp0_iter56 = ap_const_logic_0) and (ap_enable_reg_pp0_iter55 = ap_const_logic_0) and (ap_enable_reg_pp0_iter54 = ap_const_logic_0) and (ap_enable_reg_pp0_iter53 = ap_const_logic_0) and (ap_enable_reg_pp0_iter52 = ap_const_logic_0) and (ap_enable_reg_pp0_iter51 = ap_const_logic_0) and (ap_enable_reg_pp0_iter50 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_empty_42_phi_fu_283_p4_assign_proc : process(icmp_ln45_reg_1311_pp0_iter1_reg, icmp_ln59_reg_1329_pp0_iter1_reg, gmem0_addr_read_reg_1359, ap_phi_reg_pp0_iter2_empty_42_reg_280, zext_ln46_fu_536_p1)
    begin
        if ((icmp_ln45_reg_1311_pp0_iter1_reg = ap_const_lv1_0)) then
            if ((icmp_ln59_reg_1329_pp0_iter1_reg = ap_const_lv1_0)) then 
                ap_phi_mux_empty_42_phi_fu_283_p4 <= zext_ln46_fu_536_p1;
            elsif ((icmp_ln59_reg_1329_pp0_iter1_reg = ap_const_lv1_1)) then 
                ap_phi_mux_empty_42_phi_fu_283_p4 <= gmem0_addr_read_reg_1359;
            else 
                ap_phi_mux_empty_42_phi_fu_283_p4 <= ap_phi_reg_pp0_iter2_empty_42_reg_280;
            end if;
        else 
            ap_phi_mux_empty_42_phi_fu_283_p4 <= ap_phi_reg_pp0_iter2_empty_42_reg_280;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_t_int_1_reg_289 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter2_empty_42_reg_280 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op158_read_state2_assign_proc : process(icmp_ln45_reg_1311, icmp_ln59_reg_1329)
    begin
                ap_predicate_op158_read_state2 <= ((icmp_ln59_reg_1329 = ap_const_lv1_1) and (icmp_ln45_reg_1311 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_214)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv19_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_214;
        end if; 
    end process;


    ap_sig_allocacmp_xi_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, xi_fu_206)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_xi_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_xi_load <= xi_fu_206;
        end if; 
    end process;

    cmp145_not_fu_790_p2 <= "1" when (unsigned(yi_fu_210) > unsigned(ap_const_lv10_1FC)) else "0";
    cmp145_not_mid1_fu_836_p2 <= "1" when (unsigned(add_ln45_2_fu_810_p2) > unsigned(ap_const_lv10_1FC)) else "0";
    data_V_fu_908_p1 <= dc_reg_1438;
    empty_37_fu_770_p1 <= yi_fu_210(9 - 1 downto 0);
    empty_38_fu_429_p1 <= ap_sig_allocacmp_indvar_flatten_load(9 - 1 downto 0);
    empty_39_fu_441_p2 <= "1" when (tmp_17_fu_433_p3 = ap_const_lv19_0) else "0";
    empty_40_fu_453_p1 <= add_ln45_fu_371_p2(9 - 1 downto 0);
    empty_41_fu_465_p2 <= "1" when (tmp_18_fu_457_p3 = ap_const_lv19_0) else "0";
    empty_44_fu_816_p1 <= add_ln45_2_fu_810_p2(9 - 1 downto 0);

    gmem0_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_gmem0_RVALID, ap_predicate_op158_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op158_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gmem0_blk_n_R <= m_axi_gmem0_RVALID;
        else 
            gmem0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter27, m_axi_gmem1_AWREADY, empty_39_reg_1338_pp0_iter26_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (empty_39_reg_1338_pp0_iter26_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            gmem1_blk_n_AW <= m_axi_gmem1_AWREADY;
        else 
            gmem1_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter96, m_axi_gmem1_BVALID, empty_41_reg_1342_pp0_iter95_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (empty_41_reg_1342_pp0_iter95_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter96 = ap_const_logic_1))) then 
            gmem1_blk_n_B <= m_axi_gmem1_BVALID;
        else 
            gmem1_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter28, m_axi_gmem1_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            gmem1_blk_n_W <= m_axi_gmem1_WREADY;
        else 
            gmem1_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grad_sobel_fu_1169_p3 <= 
        select_ln111_fu_1155_p3 when (or_ln111_fu_1163_p2(0) = '1') else 
        select_ln107_fu_1123_p3;

    grp_fu_1217_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1217_ce <= ap_const_logic_1;
        else 
            grp_fu_1217_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1217_p0 <= sext_ln74_fu_757_p1(11 - 1 downto 0);
    grp_fu_1217_p1 <= sext_ln74_fu_757_p1(11 - 1 downto 0);

    grp_fu_1223_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1223_ce <= ap_const_logic_1;
        else 
            grp_fu_1223_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1223_p0 <= sext_ln73_1_fu_760_p1(11 - 1 downto 0);
    grp_fu_1223_p1 <= sext_ln73_1_fu_760_p1(11 - 1 downto 0);

    grp_fu_300_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_300_ce <= ap_const_logic_1;
        else 
            grp_fu_300_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_300_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln90_reg_1423),32));


    grp_fu_303_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_303_ce <= ap_const_logic_1;
        else 
            grp_fu_303_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_751_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_751_ce <= ap_const_logic_1;
        else 
            grp_fu_751_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_751_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_fu_736_p3),20));

    icmp34_fu_830_p2 <= "1" when (tmp_2_fu_820_p4 = ap_const_lv8_0) else "0";
    icmp_fu_784_p2 <= "1" when (tmp_1_fu_774_p4 = ap_const_lv8_0) else "0";
    icmp_ln107_1_fu_1081_p2 <= "1" when (signed(ap_phi_reg_pp0_iter27_t_int_1_reg_289) < signed(ap_const_lv32_FFFFFF97)) else "0";
    icmp_ln107_fu_1075_p2 <= "1" when (signed(ap_phi_reg_pp0_iter27_t_int_1_reg_289) > signed(ap_const_lv32_FFFFFD96)) else "0";
    icmp_ln111_1_fu_1099_p2 <= "1" when (signed(ap_phi_reg_pp0_iter27_t_int_1_reg_289) < signed(ap_const_lv32_6B)) else "0";
    icmp_ln111_fu_1093_p2 <= "1" when (signed(ap_phi_reg_pp0_iter27_t_int_1_reg_289) > signed(ap_const_lv32_FFFFFF96)) else "0";
    icmp_ln115_1_fu_1111_p2 <= "1" when (signed(ap_phi_reg_pp0_iter27_t_int_1_reg_289) < signed(ap_const_lv32_26A)) else "0";
    icmp_ln115_fu_1105_p2 <= "1" when (signed(ap_phi_reg_pp0_iter27_t_int_1_reg_289) > signed(ap_const_lv32_6A)) else "0";
    icmp_ln124_fu_423_p2 <= "1" when (unsigned(add_ln124_fu_417_p2) > unsigned(ap_const_lv10_1F8)) else "0";
    icmp_ln45_fu_365_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv19_40000) else "0";
    icmp_ln46_fu_380_p2 <= "1" when (ap_sig_allocacmp_xi_load = ap_const_lv10_200) else "0";
    icmp_ln59_fu_407_p2 <= "1" when (trunc_ln46_fu_399_p1 = ap_const_lv6_0) else "0";
    icmp_ln93_fu_1069_p2 <= "1" when (signed(tmp_15_fu_1059_p4) > signed(ap_const_lv24_0)) else "0";
    icmp_ln99_fu_732_p2 <= "1" when (pix_h_sobel_reg_1369 = zext_ln79_2_reg_1375) else "0";
    isNeg_fu_957_p3 <= add_ln346_fu_951_p2(8 downto 8);
    line_buf_address0 <= line_buf_addr_reg_1323_pp0_iter1_reg;
    line_buf_address1 <= zext_ln46_1_fu_394_p1(9 - 1 downto 0);

    line_buf_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buf_ce0 <= ap_const_logic_1;
        else 
            line_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buf_ce1 <= ap_const_logic_1;
        else 
            line_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buf_d0 <= (trunc_ln59_1_fu_550_p1 & tmp_3_reg_1364);

    line_buf_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln45_reg_1311_pp0_iter1_reg)
    begin
        if (((icmp_ln45_reg_1311_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buf_we0 <= ap_const_lv3_7;
        else 
            line_buf_we0 <= ap_const_lv3_0;
        end if; 
    end process;

    m_axi_gmem0_ARADDR <= ap_const_lv64_0;
    m_axi_gmem0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem0_ARID <= ap_const_lv1_0;
    m_axi_gmem0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem0_ARVALID <= ap_const_logic_0;
    m_axi_gmem0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_BREADY <= ap_const_logic_0;

    m_axi_gmem0_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op158_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op158_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_gmem0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_WDATA <= ap_const_lv512_lc_1;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv64_0;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_WVALID <= ap_const_logic_0;
    m_axi_gmem1_ARADDR <= ap_const_lv64_0;
    m_axi_gmem1_ARBURST <= ap_const_lv2_0;
    m_axi_gmem1_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem1_ARID <= ap_const_lv1_0;
    m_axi_gmem1_ARLEN <= ap_const_lv32_0;
    m_axi_gmem1_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem1_ARPROT <= ap_const_lv3_0;
    m_axi_gmem1_ARQOS <= ap_const_lv4_0;
    m_axi_gmem1_ARREGION <= ap_const_lv4_0;
    m_axi_gmem1_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem1_ARUSER <= ap_const_lv1_0;
    m_axi_gmem1_ARVALID <= ap_const_logic_0;
    m_axi_gmem1_AWADDR <= gmem1_addr_reg_1464;
    m_axi_gmem1_AWBURST <= ap_const_lv2_0;
    m_axi_gmem1_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem1_AWID <= ap_const_lv1_0;
    m_axi_gmem1_AWLEN <= ap_const_lv32_200;
    m_axi_gmem1_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem1_AWPROT <= ap_const_lv3_0;
    m_axi_gmem1_AWQOS <= ap_const_lv4_0;
    m_axi_gmem1_AWREGION <= ap_const_lv4_0;
    m_axi_gmem1_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem1_AWUSER <= ap_const_lv1_0;

    m_axi_gmem1_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter27, empty_39_reg_1338_pp0_iter26_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_39_reg_1338_pp0_iter26_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            m_axi_gmem1_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem1_BREADY_assign_proc : process(ap_enable_reg_pp0_iter96, empty_41_reg_1342_pp0_iter95_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_41_reg_1342_pp0_iter95_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter96 = ap_const_logic_1))) then 
            m_axi_gmem1_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem1_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem1_RREADY <= ap_const_logic_0;
    m_axi_gmem1_WDATA <= select_ln124_reg_1470;
    m_axi_gmem1_WID <= ap_const_lv1_0;
    m_axi_gmem1_WLAST <= ap_const_logic_0;
    m_axi_gmem1_WSTRB <= ap_const_lv2_3;
    m_axi_gmem1_WUSER <= ap_const_lv1_0;

    m_axi_gmem1_WVALID_assign_proc : process(ap_enable_reg_pp0_iter28, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            m_axi_gmem1_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem1_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mantissa_fu_933_p4 <= ((ap_const_lv1_1 & p_Result_1_fu_929_p1) & ap_const_lv1_0);
    or_ln111_fu_1163_p2 <= (and_ln111_1_fu_1149_p2 or and_ln107_fu_1087_p2);
    or_ln124_1_fu_1177_p2 <= (select_ln45_3_reg_1443 or icmp_ln124_reg_1333_pp0_iter26_reg);
    or_ln124_2_fu_888_p2 <= (icmp34_fu_830_p2 or cmp145_not_mid1_fu_836_p2);
    or_ln124_fu_804_p2 <= (icmp_fu_784_p2 or cmp145_not_fu_790_p2);
    p_Result_1_fu_929_p1 <= data_V_fu_908_p1(23 - 1 downto 0);
    pix_h_sobel_2_fu_728_p2 <= std_logic_vector(unsigned(pix_h_sobel_reg_1369) - unsigned(zext_ln79_2_reg_1375));
    pix_h_sobel_3_fu_611_p2 <= std_logic_vector(unsigned(zext_ln73_fu_572_p1) + unsigned(zext_ln79_fu_607_p1));
    pix_h_sobel_4_fu_621_p2 <= std_logic_vector(unsigned(zext_ln79_1_fu_617_p1) - unsigned(tmp_2_cast_fu_579_p1));
    pix_h_sobel_fu_631_p2 <= std_logic_vector(signed(sext_ln79_fu_627_p1) + signed(sext_ln73_fu_603_p1));
    pix_v_sobel_4_fu_667_p2 <= std_logic_vector(unsigned(zext_ln73_fu_572_p1) - unsigned(zext_ln79_fu_607_p1));
    pix_v_sobel_5_fu_683_p2 <= std_logic_vector(unsigned(add_ln86_fu_677_p2) + unsigned(sext_ln86_1_fu_673_p1));
    pix_v_sobel_fu_689_p2 <= std_logic_vector(unsigned(pix_v_sobel_5_fu_683_p2) - unsigned(zext_ln79_2_fu_637_p1));
    r_V_1_fu_997_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_943_p1),to_integer(unsigned('0' & zext_ln1488_fu_987_p1(31-1 downto 0)))));
    r_V_fu_991_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_943_p1),to_integer(unsigned('0' & zext_ln1488_fu_987_p1(31-1 downto 0)))));
    result_V_2_fu_1048_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_reg_1453));
    result_V_fu_1053_p3 <= 
        result_V_2_fu_1048_p2 when (p_Result_s_reg_1448(0) = '1') else 
        val_reg_1453;
    select_ln107_fu_1123_p3 <= 
        ap_const_lv8_2D when (and_ln115_fu_1117_p2(0) = '1') else 
        ap_const_lv8_5A;
    select_ln111_fu_1155_p3 <= 
        ap_const_lv8_0 when (and_ln111_1_fu_1149_p2(0) = '1') else 
        ap_const_lv8_87;
    select_ln124_fu_1209_p3 <= 
        shl_ln2_fu_1181_p3 when (or_ln124_1_fu_1177_p2(0) = '1') else 
        tmp_s_fu_1201_p3;
    select_ln126_fu_1193_p3 <= 
        ap_const_lv8_FF when (icmp_ln93_fu_1069_p2(0) = '1') else 
        trunc_ln126_fu_1189_p1;
    select_ln45_1_fu_529_p3 <= 
        ap_const_lv504_lc_1 when (icmp_ln46_reg_1315_pp0_iter1_reg(0) = '1') else 
        shiftreg_fu_190;
    select_ln45_2_fu_850_p3 <= 
        tmp_6_mid1_fu_842_p3 when (icmp_ln46_reg_1315_pp0_iter25_reg(0) = '1') else 
        tmp_6_fu_796_p3;
    select_ln45_3_fu_894_p3 <= 
        or_ln124_2_fu_888_p2 when (icmp_ln46_reg_1315_pp0_iter25_reg(0) = '1') else 
        or_ln124_fu_804_p2;
    select_ln45_4_fu_901_p3 <= 
        add_ln45_2_fu_810_p2 when (icmp_ln46_reg_1315_pp0_iter25_reg(0) = '1') else 
        yi_fu_210;
    select_ln45_fu_386_p3 <= 
        ap_const_lv10_0 when (icmp_ln46_fu_380_p2(0) = '1') else 
        ap_sig_allocacmp_xi_load;
        sext_ln100_fu_1033_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_751_p2),32));

    sext_ln127_1_mid2_v_fu_874_p4 <= add_ln45_1_fu_869_p2(63 downto 1);
    sext_ln127_1_mid2_v_v_v_v_v_fu_857_p3 <= (select_ln45_2_fu_850_p3 & ap_const_lv1_0);
        sext_ln1488_fu_983_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_975_p3),32));

        sext_ln1512_fu_971_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_fu_965_p2),9));

        sext_ln45_1_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln127_1_mid2_v_fu_874_p4),64));

        sext_ln73_1_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pix_h_sobel_2_reg_1387_pp0_iter4_reg),22));

        sext_ln73_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_fu_595_p3),11));

        sext_ln74_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pix_v_sobel_reg_1381_pp0_iter3_reg),22));

        sext_ln79_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pix_h_sobel_4_fu_621_p2),11));

        sext_ln86_1_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pix_v_sobel_4_fu_667_p2),11));

        sext_ln86_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_655_p3),11));

    shl_ln2_fu_1181_p3 <= (grad_sobel_fu_1169_p3 & ap_const_lv8_0);
    sub_ln1512_fu_965_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_fu_919_p4));
    tmp16_fu_649_p2 <= std_logic_vector(unsigned(zext_ln74_fu_641_p1) - unsigned(zext_ln74_1_fu_645_p1));
    tmp_10_fu_1015_p4 <= r_V_1_fu_997_p2(55 downto 24);
    tmp_14_fu_1003_p3 <= r_V_fu_991_p2(24 downto 24);
    tmp_15_fu_1059_p4 <= result_V_fu_1053_p3(31 downto 8);
    tmp_16_fu_736_p3 <= (pix_v_sobel_reg_1381 & ap_const_lv8_0);
    tmp_17_fu_433_p3 <= (ap_const_lv10_0 & empty_38_fu_429_p1);
    tmp_18_fu_457_p3 <= (ap_const_lv10_0 & empty_40_fu_453_p1);
    tmp_1_fu_774_p4 <= yi_fu_210(9 downto 2);
    tmp_2_cast1_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_1346),11));
    tmp_2_cast_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_1346),10));
    tmp_2_fu_820_p4 <= add_ln45_2_fu_810_p2(9 downto 2);
    tmp_4_cast_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_1353),9));
    tmp_6_fu_796_p3 <= (empty_37_fu_770_p1 & ap_const_lv9_0);
    tmp_6_mid1_fu_842_p3 <= (empty_44_fu_816_p1 & ap_const_lv9_0);
    tmp_8_fu_655_p3 <= (tmp16_fu_649_p2 & ap_const_lv1_0);
    tmp_9_fu_595_p3 <= (tmp_fu_589_p2 & ap_const_lv1_0);
    tmp_fu_589_p2 <= std_logic_vector(unsigned(zext_ln73_1_fu_582_p1) - unsigned(tmp_4_cast_fu_586_p1));
    tmp_s_fu_1201_p3 <= (grad_sobel_fu_1169_p3 & select_ln126_fu_1193_p3);
    trunc_ln126_fu_1189_p1 <= result_V_fu_1053_p3(8 - 1 downto 0);
    trunc_ln46_fu_399_p1 <= select_ln45_fu_386_p3(6 - 1 downto 0);
    trunc_ln59_1_fu_550_p1 <= ap_phi_mux_empty_42_phi_fu_283_p4(8 - 1 downto 0);
    trunc_ln59_fu_403_p1 <= select_ln45_fu_386_p3(9 - 1 downto 0);
    ush_fu_975_p3 <= 
        sext_ln1512_fu_971_p1 when (isNeg_fu_957_p3(0) = '1') else 
        add_ln346_fu_951_p2;
    val_fu_1025_p3 <= 
        zext_ln818_fu_1011_p1 when (isNeg_fu_957_p3(0) = '1') else 
        tmp_10_fu_1015_p4;
    xor_ln107_fu_1137_p2 <= (ap_const_lv1_1 xor and_ln107_1_fu_1131_p2);
    xs_exp_V_fu_919_p4 <= data_V_fu_908_p1(30 downto 23);
    zext_ln124_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln59_fu_403_p1),10));
    zext_ln1488_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_983_p1),79));
    zext_ln15_fu_943_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_933_p4),79));
    zext_ln346_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_fu_919_p4),9));
    zext_ln45_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln127_1_mid2_v_v_v_v_v_fu_857_p3),64));
    zext_ln46_1_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln45_fu_386_p3),64));
    zext_ln46_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln45_1_fu_529_p3),512));
    zext_ln73_1_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_198),9));
    zext_ln73_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pix_v_sobel_1_fu_194),9));
    zext_ln74_1_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_36_fu_226),9));
    zext_ln74_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_34_fu_218),9));
    zext_ln79_1_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pix_h_sobel_3_fu_611_p2),10));
    zext_ln79_2_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln59_1_fu_550_p1),11));
    zext_ln79_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_33_fu_202),9));
    zext_ln818_fu_1011_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_1003_p3),32));
end behav;

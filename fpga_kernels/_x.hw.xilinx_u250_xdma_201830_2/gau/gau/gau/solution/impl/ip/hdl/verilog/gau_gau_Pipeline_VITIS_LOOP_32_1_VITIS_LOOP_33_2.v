// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.1 (64-bit)
// Version: 2020.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gau_gau_Pipeline_VITIS_LOOP_32_1_VITIS_LOOP_33_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RFIFONUM,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RFIFONUM,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        sext_ln32_1,
        sext_ln32,
        line_buf_address0,
        line_buf_ce0,
        line_buf_we0,
        line_buf_d0,
        line_buf_address1,
        line_buf_ce1,
        line_buf_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [63:0] m_axi_gmem0_AWADDR;
output  [0:0] m_axi_gmem0_AWID;
output  [31:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [0:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [511:0] m_axi_gmem0_WDATA;
output  [63:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [0:0] m_axi_gmem0_WID;
output  [0:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [63:0] m_axi_gmem0_ARADDR;
output  [0:0] m_axi_gmem0_ARID;
output  [31:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [0:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [511:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [0:0] m_axi_gmem0_RID;
input  [8:0] m_axi_gmem0_RFIFONUM;
input  [0:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [0:0] m_axi_gmem0_BID;
input  [0:0] m_axi_gmem0_BUSER;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [63:0] m_axi_gmem1_AWADDR;
output  [0:0] m_axi_gmem1_AWID;
output  [31:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [0:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [511:0] m_axi_gmem1_WDATA;
output  [63:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [0:0] m_axi_gmem1_WID;
output  [0:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [63:0] m_axi_gmem1_ARADDR;
output  [0:0] m_axi_gmem1_ARID;
output  [31:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [0:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [511:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [0:0] m_axi_gmem1_RID;
input  [8:0] m_axi_gmem1_RFIFONUM;
input  [0:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [0:0] m_axi_gmem1_BID;
input  [0:0] m_axi_gmem1_BUSER;
input  [57:0] sext_ln32_1;
input  [57:0] sext_ln32;
output  [8:0] line_buf_address0;
output   line_buf_ce0;
output  [2:0] line_buf_we0;
output  [23:0] line_buf_d0;
output  [8:0] line_buf_address1;
output   line_buf_ce1;
input  [23:0] line_buf_q1;

reg ap_idle;
reg m_axi_gmem0_RREADY;
reg m_axi_gmem1_WVALID;
reg line_buf_ce0;
reg[2:0] line_buf_we0;
reg line_buf_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln32_reg_720;
reg   [0:0] icmp_ln45_reg_736;
reg    ap_predicate_op57_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg   [0:0] icmp_ln71_reg_740;
reg   [0:0] icmp_ln71_reg_740_pp0_iter3_reg;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln32_fu_272_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem1_blk_n_W;
wire    ap_block_pp0_stage0;
reg    gmem0_blk_n_R;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln32_reg_720_pp0_iter1_reg;
reg   [0:0] icmp_ln32_reg_720_pp0_iter2_reg;
wire   [0:0] icmp_ln33_fu_287_p2;
reg   [0:0] icmp_ln33_reg_724;
reg   [0:0] icmp_ln33_reg_724_pp0_iter1_reg;
reg   [0:0] icmp_ln33_reg_724_pp0_iter2_reg;
reg   [8:0] line_buf_addr_reg_730;
reg   [8:0] line_buf_addr_reg_730_pp0_iter1_reg;
wire   [0:0] icmp_ln45_fu_310_p2;
reg   [0:0] icmp_ln45_reg_736_pp0_iter1_reg;
wire   [0:0] icmp_ln71_fu_316_p2;
reg   [0:0] icmp_ln71_reg_740_pp0_iter1_reg;
reg   [0:0] icmp_ln71_reg_740_pp0_iter2_reg;
reg   [7:0] tmp_s_reg_745;
reg   [7:0] tmp_1_reg_751;
reg   [511:0] gmem0_addr_read_reg_757;
reg   [15:0] tmp_reg_762;
reg   [7:0] p_load13_reg_767;
wire   [11:0] add_ln63_fu_497_p2;
reg   [11:0] add_ln63_reg_772;
wire   [9:0] add_ln63_3_fu_513_p2;
reg   [9:0] add_ln63_3_reg_777;
wire   [511:0] or_ln_fu_602_p3;
reg   [511:0] or_ln_reg_787;
reg    ap_condition_exit_pp0_iter3_stage0;
reg   [511:0] ap_phi_mux_empty_35_phi_fu_205_p4;
wire   [511:0] ap_phi_reg_pp0_iter2_empty_35_reg_202;
wire   [511:0] zext_ln33_fu_393_p1;
wire   [63:0] zext_ln33_1_fu_301_p1;
reg    ap_block_pp0_stage0_01001;
reg   [503:0] phi_ln71_fu_120;
wire   [503:0] select_ln71_fu_628_p3;
wire    ap_loop_init;
reg   [503:0] shiftreg_fu_124;
reg   [7:0] pix_gauss_fu_128;
reg   [7:0] empty_fu_132;
reg   [7:0] empty_31_fu_136;
reg   [9:0] xi_fu_140;
wire   [9:0] add_ln33_fu_322_p2;
reg   [9:0] ap_sig_allocacmp_xi_load;
reg   [18:0] indvar_flatten_fu_144;
wire   [18:0] add_ln32_fu_278_p2;
reg   [18:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [7:0] empty_32_fu_148;
reg   [7:0] empty_33_fu_152;
reg   [7:0] empty_34_fu_156;
wire   [7:0] trunc_ln45_fu_407_p1;
wire   [9:0] select_ln32_fu_293_p3;
wire   [5:0] trunc_ln33_fu_306_p1;
wire   [503:0] select_ln32_1_fu_386_p3;
wire   [8:0] p_cast10_fu_448_p1;
wire   [8:0] p_cast11_fu_444_p1;
wire   [8:0] tmp1_fu_459_p2;
wire   [8:0] p_cast12_fu_452_p1;
wire   [8:0] tmp_4_cast_fu_456_p1;
wire   [8:0] tmp2_fu_469_p2;
wire   [9:0] tmp2_cast_fu_475_p1;
wire   [9:0] tmp1_cast_fu_465_p1;
wire   [9:0] tmp146_fu_479_p2;
wire   [10:0] tmp7_fu_485_p3;
wire   [11:0] zext_ln63_3_fu_493_p1;
wire   [11:0] zext_ln63_2_fu_436_p1;
wire   [8:0] zext_ln63_fu_433_p1;
wire   [8:0] trunc_ln45_cast_fu_440_p1;
wire   [8:0] add_ln63_2_fu_503_p2;
wire   [9:0] zext_ln63_4_fu_509_p1;
wire   [9:0] zext_ln37_fu_429_p1;
wire   [9:0] shl_ln_fu_567_p3;
wire   [11:0] zext_ln63_1_fu_574_p1;
wire   [11:0] add_ln63_1_fu_581_p2;
wire   [11:0] zext_ln63_5_fu_578_p1;
wire   [11:0] pix_gauss_1_fu_586_p2;
wire   [7:0] trunc_ln3_fu_592_p4;
wire   [503:0] select_ln32_2_fu_560_p3;
wire   [495:0] tmp_8_fu_610_p4;
wire   [503:0] tmp_9_fu_620_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

gau_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter3_stage0)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_31_fu_136 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln32_reg_720_pp0_iter1_reg == 1'd0))) begin
            empty_31_fu_136 <= empty_34_fu_156;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_32_fu_148 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln32_reg_720_pp0_iter1_reg == 1'd0))) begin
            empty_32_fu_148 <= tmp_s_reg_745;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_33_fu_152 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln32_reg_720_pp0_iter1_reg == 1'd0))) begin
            empty_33_fu_152 <= tmp_1_reg_751;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_34_fu_156 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln32_reg_720_pp0_iter1_reg == 1'd0))) begin
            empty_34_fu_156 <= trunc_ln45_fu_407_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_fu_132 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln32_reg_720_pp0_iter1_reg == 1'd0))) begin
            empty_fu_132 <= empty_33_fu_152;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln32_fu_272_p2 == 1'd0))) begin
            indvar_flatten_fu_144 <= add_ln32_fu_278_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_144 <= 19'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            phi_ln71_fu_120 <= 504'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln32_reg_720_pp0_iter2_reg == 1'd0))) begin
            phi_ln71_fu_120 <= select_ln71_fu_628_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            pix_gauss_fu_128 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln32_reg_720_pp0_iter1_reg == 1'd0))) begin
            pix_gauss_fu_128 <= empty_32_fu_148;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            shiftreg_fu_124 <= 504'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln32_reg_720_pp0_iter1_reg == 1'd0))) begin
            shiftreg_fu_124 <= {{ap_phi_mux_empty_35_phi_fu_205_p4[511:8]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln32_fu_272_p2 == 1'd0))) begin
            xi_fu_140 <= add_ln33_fu_322_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            xi_fu_140 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_720_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln63_3_reg_777 <= add_ln63_3_fu_513_p2;
        add_ln63_reg_772 <= add_ln63_fu_497_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln32_reg_720 <= icmp_ln32_fu_272_p2;
        icmp_ln32_reg_720_pp0_iter1_reg <= icmp_ln32_reg_720;
        icmp_ln33_reg_724_pp0_iter1_reg <= icmp_ln33_reg_724;
        icmp_ln45_reg_736_pp0_iter1_reg <= icmp_ln45_reg_736;
        icmp_ln71_reg_740_pp0_iter1_reg <= icmp_ln71_reg_740;
        line_buf_addr_reg_730_pp0_iter1_reg <= line_buf_addr_reg_730;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln32_reg_720_pp0_iter2_reg <= icmp_ln32_reg_720_pp0_iter1_reg;
        icmp_ln33_reg_724_pp0_iter2_reg <= icmp_ln33_reg_724_pp0_iter1_reg;
        icmp_ln71_reg_740_pp0_iter2_reg <= icmp_ln71_reg_740_pp0_iter1_reg;
        icmp_ln71_reg_740_pp0_iter3_reg <= icmp_ln71_reg_740_pp0_iter2_reg;
        p_load13_reg_767 <= empty_33_fu_152;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op57_read_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem0_addr_read_reg_757 <= m_axi_gmem0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_fu_272_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln33_reg_724 <= icmp_ln33_fu_287_p2;
        icmp_ln45_reg_736 <= icmp_ln45_fu_310_p2;
        icmp_ln71_reg_740 <= icmp_ln71_fu_316_p2;
        line_buf_addr_reg_730 <= zext_ln33_1_fu_301_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_720_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_ln_reg_787 <= or_ln_fu_602_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_720 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_1_reg_751 <= {{line_buf_q1[23:16]}};
        tmp_reg_762 <= {{line_buf_q1[23:8]}};
        tmp_s_reg_745 <= {{line_buf_q1[15:8]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_fu_272_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln32_reg_720_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln32_reg_720_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln45_reg_736_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_empty_35_phi_fu_205_p4 = zext_ln33_fu_393_p1;
        end else if ((icmp_ln45_reg_736_pp0_iter1_reg == 1'd1)) begin
            ap_phi_mux_empty_35_phi_fu_205_p4 = gmem0_addr_read_reg_757;
        end else begin
            ap_phi_mux_empty_35_phi_fu_205_p4 = ap_phi_reg_pp0_iter2_empty_35_reg_202;
        end
    end else begin
        ap_phi_mux_empty_35_phi_fu_205_p4 = ap_phi_reg_pp0_iter2_empty_35_reg_202;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 19'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_144;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_xi_load = 10'd0;
    end else begin
        ap_sig_allocacmp_xi_load = xi_fu_140;
    end
end

always @ (*) begin
    if (((ap_predicate_op57_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem0_blk_n_R = m_axi_gmem0_RVALID;
    end else begin
        gmem0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln71_reg_740_pp0_iter3_reg == 1'd1))) begin
        gmem1_blk_n_W = m_axi_gmem1_WREADY;
    end else begin
        gmem1_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buf_ce0 = 1'b1;
    end else begin
        line_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buf_ce1 = 1'b1;
    end else begin
        line_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln32_reg_720_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buf_we0 = 3'd7;
    end else begin
        line_buf_we0 = 3'd0;
    end
end

always @ (*) begin
    if (((ap_predicate_op57_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem0_RREADY = 1'b1;
    end else begin
        m_axi_gmem0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln71_reg_740_pp0_iter3_reg == 1'd1))) begin
        m_axi_gmem1_WVALID = 1'b1;
    end else begin
        m_axi_gmem1_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_fu_278_p2 = (ap_sig_allocacmp_indvar_flatten_load + 19'd1);

assign add_ln33_fu_322_p2 = (select_ln32_fu_293_p3 + 10'd1);

assign add_ln63_1_fu_581_p2 = (add_ln63_reg_772 + zext_ln63_1_fu_574_p1);

assign add_ln63_2_fu_503_p2 = (zext_ln63_fu_433_p1 + trunc_ln45_cast_fu_440_p1);

assign add_ln63_3_fu_513_p2 = (zext_ln63_4_fu_509_p1 + zext_ln37_fu_429_p1);

assign add_ln63_fu_497_p2 = (zext_ln63_3_fu_493_p1 + zext_ln63_2_fu_436_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_predicate_op57_read_state2 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_io)) | ((ap_predicate_op57_read_state2 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_io)) | ((ap_predicate_op57_read_state2 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((ap_predicate_op57_read_state2 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((icmp_ln71_reg_740_pp0_iter3_reg == 1'd1) & (m_axi_gmem1_WREADY == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter2_empty_35_reg_202 = 'bx;

always @ (*) begin
    ap_predicate_op57_read_state2 = ((icmp_ln45_reg_736 == 1'd1) & (icmp_ln32_reg_720 == 1'd0));
end

assign icmp_ln32_fu_272_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 19'd262144) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_287_p2 = ((ap_sig_allocacmp_xi_load == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_310_p2 = ((trunc_ln33_fu_306_p1 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_316_p2 = ((trunc_ln33_fu_306_p1 == 6'd63) ? 1'b1 : 1'b0);

assign line_buf_address0 = line_buf_addr_reg_730_pp0_iter1_reg;

assign line_buf_address1 = zext_ln33_1_fu_301_p1;

assign line_buf_d0 = {{trunc_ln45_fu_407_p1}, {tmp_reg_762}};

assign m_axi_gmem0_ARADDR = 64'd0;

assign m_axi_gmem0_ARBURST = 2'd0;

assign m_axi_gmem0_ARCACHE = 4'd0;

assign m_axi_gmem0_ARID = 1'd0;

assign m_axi_gmem0_ARLEN = 32'd0;

assign m_axi_gmem0_ARLOCK = 2'd0;

assign m_axi_gmem0_ARPROT = 3'd0;

assign m_axi_gmem0_ARQOS = 4'd0;

assign m_axi_gmem0_ARREGION = 4'd0;

assign m_axi_gmem0_ARSIZE = 3'd0;

assign m_axi_gmem0_ARUSER = 1'd0;

assign m_axi_gmem0_ARVALID = 1'b0;

assign m_axi_gmem0_AWADDR = 64'd0;

assign m_axi_gmem0_AWBURST = 2'd0;

assign m_axi_gmem0_AWCACHE = 4'd0;

assign m_axi_gmem0_AWID = 1'd0;

assign m_axi_gmem0_AWLEN = 32'd0;

assign m_axi_gmem0_AWLOCK = 2'd0;

assign m_axi_gmem0_AWPROT = 3'd0;

assign m_axi_gmem0_AWQOS = 4'd0;

assign m_axi_gmem0_AWREGION = 4'd0;

assign m_axi_gmem0_AWSIZE = 3'd0;

assign m_axi_gmem0_AWUSER = 1'd0;

assign m_axi_gmem0_AWVALID = 1'b0;

assign m_axi_gmem0_BREADY = 1'b0;

assign m_axi_gmem0_WDATA = 512'd0;

assign m_axi_gmem0_WID = 1'd0;

assign m_axi_gmem0_WLAST = 1'b0;

assign m_axi_gmem0_WSTRB = 64'd0;

assign m_axi_gmem0_WUSER = 1'd0;

assign m_axi_gmem0_WVALID = 1'b0;

assign m_axi_gmem1_ARADDR = 64'd0;

assign m_axi_gmem1_ARBURST = 2'd0;

assign m_axi_gmem1_ARCACHE = 4'd0;

assign m_axi_gmem1_ARID = 1'd0;

assign m_axi_gmem1_ARLEN = 32'd0;

assign m_axi_gmem1_ARLOCK = 2'd0;

assign m_axi_gmem1_ARPROT = 3'd0;

assign m_axi_gmem1_ARQOS = 4'd0;

assign m_axi_gmem1_ARREGION = 4'd0;

assign m_axi_gmem1_ARSIZE = 3'd0;

assign m_axi_gmem1_ARUSER = 1'd0;

assign m_axi_gmem1_ARVALID = 1'b0;

assign m_axi_gmem1_AWADDR = 64'd0;

assign m_axi_gmem1_AWBURST = 2'd0;

assign m_axi_gmem1_AWCACHE = 4'd0;

assign m_axi_gmem1_AWID = 1'd0;

assign m_axi_gmem1_AWLEN = 32'd0;

assign m_axi_gmem1_AWLOCK = 2'd0;

assign m_axi_gmem1_AWPROT = 3'd0;

assign m_axi_gmem1_AWQOS = 4'd0;

assign m_axi_gmem1_AWREGION = 4'd0;

assign m_axi_gmem1_AWSIZE = 3'd0;

assign m_axi_gmem1_AWUSER = 1'd0;

assign m_axi_gmem1_AWVALID = 1'b0;

assign m_axi_gmem1_BREADY = 1'b0;

assign m_axi_gmem1_RREADY = 1'b0;

assign m_axi_gmem1_WDATA = or_ln_reg_787;

assign m_axi_gmem1_WID = 1'd0;

assign m_axi_gmem1_WLAST = 1'b0;

assign m_axi_gmem1_WSTRB = 64'd18446744073709551615;

assign m_axi_gmem1_WUSER = 1'd0;

assign or_ln_fu_602_p3 = {{trunc_ln3_fu_592_p4}, {select_ln32_2_fu_560_p3}};

assign p_cast10_fu_448_p1 = empty_fu_132;

assign p_cast11_fu_444_p1 = empty_34_fu_156;

assign p_cast12_fu_452_p1 = empty_32_fu_148;

assign pix_gauss_1_fu_586_p2 = (add_ln63_1_fu_581_p2 + zext_ln63_5_fu_578_p1);

assign select_ln32_1_fu_386_p3 = ((icmp_ln33_reg_724_pp0_iter1_reg[0:0] == 1'b1) ? 504'd0 : shiftreg_fu_124);

assign select_ln32_2_fu_560_p3 = ((icmp_ln33_reg_724_pp0_iter2_reg[0:0] == 1'b1) ? 504'd0 : phi_ln71_fu_120);

assign select_ln32_fu_293_p3 = ((icmp_ln33_fu_287_p2[0:0] == 1'b1) ? 10'd0 : ap_sig_allocacmp_xi_load);

assign select_ln71_fu_628_p3 = ((icmp_ln71_reg_740_pp0_iter2_reg[0:0] == 1'b1) ? 504'd0 : tmp_9_fu_620_p3);

assign shl_ln_fu_567_p3 = {{p_load13_reg_767}, {2'd0}};

assign tmp146_fu_479_p2 = (tmp2_cast_fu_475_p1 + tmp1_cast_fu_465_p1);

assign tmp1_cast_fu_465_p1 = tmp1_fu_459_p2;

assign tmp1_fu_459_p2 = (p_cast10_fu_448_p1 + p_cast11_fu_444_p1);

assign tmp2_cast_fu_475_p1 = tmp2_fu_469_p2;

assign tmp2_fu_469_p2 = (p_cast12_fu_452_p1 + tmp_4_cast_fu_456_p1);

assign tmp7_fu_485_p3 = {{tmp146_fu_479_p2}, {1'd0}};

assign tmp_4_cast_fu_456_p1 = tmp_1_reg_751;

assign tmp_8_fu_610_p4 = {{select_ln32_2_fu_560_p3[503:8]}};

assign tmp_9_fu_620_p3 = {{trunc_ln3_fu_592_p4}, {tmp_8_fu_610_p4}};

assign trunc_ln33_fu_306_p1 = select_ln32_fu_293_p3[5:0];

assign trunc_ln3_fu_592_p4 = {{pix_gauss_1_fu_586_p2[11:4]}};

assign trunc_ln45_cast_fu_440_p1 = trunc_ln45_fu_407_p1;

assign trunc_ln45_fu_407_p1 = ap_phi_mux_empty_35_phi_fu_205_p4[7:0];

assign zext_ln33_1_fu_301_p1 = select_ln32_fu_293_p3;

assign zext_ln33_fu_393_p1 = select_ln32_1_fu_386_p3;

assign zext_ln37_fu_429_p1 = pix_gauss_fu_128;

assign zext_ln63_1_fu_574_p1 = shl_ln_fu_567_p3;

assign zext_ln63_2_fu_436_p1 = empty_31_fu_136;

assign zext_ln63_3_fu_493_p1 = tmp7_fu_485_p3;

assign zext_ln63_4_fu_509_p1 = add_ln63_2_fu_503_p2;

assign zext_ln63_5_fu_578_p1 = add_ln63_3_reg_777;

assign zext_ln63_fu_433_p1 = tmp_s_reg_745;

endmodule //gau_gau_Pipeline_VITIS_LOOP_32_1_VITIS_LOOP_33_2

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.1 (64-bit)
-- Version: 2020.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gau_gau_Pipeline_VITIS_LOOP_32_1_VITIS_LOOP_33_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln32_1 : IN STD_LOGIC_VECTOR (57 downto 0);
    sext_ln32 : IN STD_LOGIC_VECTOR (57 downto 0);
    line_buf_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    line_buf_ce0 : OUT STD_LOGIC;
    line_buf_we0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    line_buf_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    line_buf_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    line_buf_ce1 : OUT STD_LOGIC;
    line_buf_q1 : IN STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of gau_gau_Pipeline_VITIS_LOOP_32_1_VITIS_LOOP_33_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv504_lc_1 : STD_LOGIC_VECTOR (503 downto
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1F7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln32_reg_720 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_736 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op57_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal icmp_ln71_reg_740 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_reg_740_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln32_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem1_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem0_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln32_reg_720_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_720_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_724 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_724_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_724_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal line_buf_addr_reg_730 : STD_LOGIC_VECTOR (8 downto 0);
    signal line_buf_addr_reg_730_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln45_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_736_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_reg_740_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_reg_740_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_745 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_751 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem0_addr_read_reg_757 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_reg_762 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_load13_reg_767 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln63_fu_497_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln63_reg_772 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln63_3_fu_513_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln63_3_reg_777 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln_fu_602_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln_reg_787 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal ap_phi_mux_empty_35_phi_fu_205_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_35_reg_202 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln33_fu_393_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln33_1_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal phi_ln71_fu_120 : STD_LOGIC_VECTOR (503 downto 0);
    signal select_ln71_fu_628_p3 : STD_LOGIC_VECTOR (503 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal shiftreg_fu_124 : STD_LOGIC_VECTOR (503 downto 0);
    signal pix_gauss_fu_128 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_132 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_31_fu_136 : STD_LOGIC_VECTOR (7 downto 0);
    signal xi_fu_140 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln33_fu_322_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_xi_load : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_fu_144 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln32_fu_278_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (18 downto 0);
    signal empty_32_fu_148 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_33_fu_152 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_34_fu_156 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_fu_407_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_fu_293_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln33_fu_306_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln32_1_fu_386_p3 : STD_LOGIC_VECTOR (503 downto 0);
    signal p_cast10_fu_448_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_cast11_fu_444_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_459_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_cast12_fu_452_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_cast_fu_456_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_469_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_cast_fu_475_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_cast_fu_465_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp146_fu_479_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp7_fu_485_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln63_3_fu_493_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln63_2_fu_436_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln63_fu_433_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln45_cast_fu_440_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln63_2_fu_503_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln63_4_fu_509_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln37_fu_429_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_fu_567_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln63_1_fu_574_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln63_1_fu_581_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln63_5_fu_578_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal pix_gauss_1_fu_586_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln3_fu_592_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_2_fu_560_p3 : STD_LOGIC_VECTOR (503 downto 0);
    signal tmp_8_fu_610_p4 : STD_LOGIC_VECTOR (495 downto 0);
    signal tmp_9_fu_620_p3 : STD_LOGIC_VECTOR (503 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gau_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component gau_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    empty_31_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_31_fu_136 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln32_reg_720_pp0_iter1_reg = ap_const_lv1_0))) then 
                    empty_31_fu_136 <= empty_34_fu_156;
                end if;
            end if; 
        end if;
    end process;

    empty_32_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_32_fu_148 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln32_reg_720_pp0_iter1_reg = ap_const_lv1_0))) then 
                    empty_32_fu_148 <= tmp_s_reg_745;
                end if;
            end if; 
        end if;
    end process;

    empty_33_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_33_fu_152 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln32_reg_720_pp0_iter1_reg = ap_const_lv1_0))) then 
                    empty_33_fu_152 <= tmp_1_reg_751;
                end if;
            end if; 
        end if;
    end process;

    empty_34_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_34_fu_156 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln32_reg_720_pp0_iter1_reg = ap_const_lv1_0))) then 
                    empty_34_fu_156 <= trunc_ln45_fu_407_p1;
                end if;
            end if; 
        end if;
    end process;

    empty_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_fu_132 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln32_reg_720_pp0_iter1_reg = ap_const_lv1_0))) then 
                    empty_fu_132 <= empty_33_fu_152;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln32_fu_272_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_144 <= add_ln32_fu_278_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_144 <= ap_const_lv19_0;
                end if;
            end if; 
        end if;
    end process;

    phi_ln71_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    phi_ln71_fu_120 <= ap_const_lv504_lc_1;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln32_reg_720_pp0_iter2_reg = ap_const_lv1_0))) then 
                    phi_ln71_fu_120 <= select_ln71_fu_628_p3;
                end if;
            end if; 
        end if;
    end process;

    pix_gauss_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    pix_gauss_fu_128 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln32_reg_720_pp0_iter1_reg = ap_const_lv1_0))) then 
                    pix_gauss_fu_128 <= empty_32_fu_148;
                end if;
            end if; 
        end if;
    end process;

    shiftreg_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    shiftreg_fu_124 <= ap_const_lv504_lc_1;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln32_reg_720_pp0_iter1_reg = ap_const_lv1_0))) then 
                    shiftreg_fu_124 <= ap_phi_mux_empty_35_phi_fu_205_p4(511 downto 8);
                end if;
            end if; 
        end if;
    end process;

    xi_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln32_fu_272_p2 = ap_const_lv1_0))) then 
                    xi_fu_140 <= add_ln33_fu_322_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    xi_fu_140 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_720_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln63_3_reg_777 <= add_ln63_3_fu_513_p2;
                add_ln63_reg_772 <= add_ln63_fu_497_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln32_reg_720 <= icmp_ln32_fu_272_p2;
                icmp_ln32_reg_720_pp0_iter1_reg <= icmp_ln32_reg_720;
                icmp_ln33_reg_724_pp0_iter1_reg <= icmp_ln33_reg_724;
                icmp_ln45_reg_736_pp0_iter1_reg <= icmp_ln45_reg_736;
                icmp_ln71_reg_740_pp0_iter1_reg <= icmp_ln71_reg_740;
                line_buf_addr_reg_730_pp0_iter1_reg <= line_buf_addr_reg_730;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                icmp_ln32_reg_720_pp0_iter2_reg <= icmp_ln32_reg_720_pp0_iter1_reg;
                icmp_ln33_reg_724_pp0_iter2_reg <= icmp_ln33_reg_724_pp0_iter1_reg;
                icmp_ln71_reg_740_pp0_iter2_reg <= icmp_ln71_reg_740_pp0_iter1_reg;
                icmp_ln71_reg_740_pp0_iter3_reg <= icmp_ln71_reg_740_pp0_iter2_reg;
                p_load13_reg_767 <= empty_33_fu_152;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op57_read_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem0_addr_read_reg_757 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_fu_272_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln33_reg_724 <= icmp_ln33_fu_287_p2;
                icmp_ln45_reg_736 <= icmp_ln45_fu_310_p2;
                icmp_ln71_reg_740 <= icmp_ln71_fu_316_p2;
                line_buf_addr_reg_730 <= zext_ln33_1_fu_301_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_720_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                or_ln_reg_787 <= or_ln_fu_602_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_720 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1_reg_751 <= line_buf_q1(23 downto 16);
                tmp_reg_762 <= line_buf_q1(23 downto 8);
                tmp_s_reg_745 <= line_buf_q1(15 downto 8);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln32_fu_278_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv19_1));
    add_ln33_fu_322_p2 <= std_logic_vector(unsigned(select_ln32_fu_293_p3) + unsigned(ap_const_lv10_1));
    add_ln63_1_fu_581_p2 <= std_logic_vector(unsigned(add_ln63_reg_772) + unsigned(zext_ln63_1_fu_574_p1));
    add_ln63_2_fu_503_p2 <= std_logic_vector(unsigned(zext_ln63_fu_433_p1) + unsigned(trunc_ln45_cast_fu_440_p1));
    add_ln63_3_fu_513_p2 <= std_logic_vector(unsigned(zext_ln63_4_fu_509_p1) + unsigned(zext_ln37_fu_429_p1));
    add_ln63_fu_497_p2 <= std_logic_vector(unsigned(zext_ln63_3_fu_493_p1) + unsigned(zext_ln63_2_fu_436_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_RVALID, ap_predicate_op57_read_state2)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_predicate_op57_read_state2 = ap_const_boolean_1) and (m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, m_axi_gmem0_RVALID, ap_predicate_op57_read_state2, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)) or ((ap_predicate_op57_read_state2 = ap_const_boolean_1) and (m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, m_axi_gmem0_RVALID, ap_predicate_op57_read_state2, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)) or ((ap_predicate_op57_read_state2 = ap_const_boolean_1) and (m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_gmem0_RVALID, ap_predicate_op57_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op57_read_state2 = ap_const_boolean_1) and (m_axi_gmem0_RVALID = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(m_axi_gmem1_WREADY, icmp_ln71_reg_740_pp0_iter3_reg)
    begin
                ap_block_state5_io <= ((icmp_ln71_reg_740_pp0_iter3_reg = ap_const_lv1_1) and (m_axi_gmem1_WREADY = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln32_fu_272_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_fu_272_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, icmp_ln32_reg_720_pp0_iter2_reg)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln32_reg_720_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_empty_35_phi_fu_205_p4_assign_proc : process(icmp_ln32_reg_720_pp0_iter1_reg, icmp_ln45_reg_736_pp0_iter1_reg, gmem0_addr_read_reg_757, ap_phi_reg_pp0_iter2_empty_35_reg_202, zext_ln33_fu_393_p1)
    begin
        if ((icmp_ln32_reg_720_pp0_iter1_reg = ap_const_lv1_0)) then
            if ((icmp_ln45_reg_736_pp0_iter1_reg = ap_const_lv1_0)) then 
                ap_phi_mux_empty_35_phi_fu_205_p4 <= zext_ln33_fu_393_p1;
            elsif ((icmp_ln45_reg_736_pp0_iter1_reg = ap_const_lv1_1)) then 
                ap_phi_mux_empty_35_phi_fu_205_p4 <= gmem0_addr_read_reg_757;
            else 
                ap_phi_mux_empty_35_phi_fu_205_p4 <= ap_phi_reg_pp0_iter2_empty_35_reg_202;
            end if;
        else 
            ap_phi_mux_empty_35_phi_fu_205_p4 <= ap_phi_reg_pp0_iter2_empty_35_reg_202;
        end if; 
    end process;

    ap_phi_reg_pp0_iter2_empty_35_reg_202 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op57_read_state2_assign_proc : process(icmp_ln32_reg_720, icmp_ln45_reg_736)
    begin
                ap_predicate_op57_read_state2 <= ((icmp_ln45_reg_736 = ap_const_lv1_1) and (icmp_ln32_reg_720 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_144)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv19_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_144;
        end if; 
    end process;


    ap_sig_allocacmp_xi_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, xi_fu_140)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_xi_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_xi_load <= xi_fu_140;
        end if; 
    end process;


    gmem0_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_gmem0_RVALID, ap_predicate_op57_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op57_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem0_blk_n_R <= m_axi_gmem0_RVALID;
        else 
            gmem0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter4, m_axi_gmem1_WREADY, icmp_ln71_reg_740_pp0_iter3_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln71_reg_740_pp0_iter3_reg = ap_const_lv1_1))) then 
            gmem1_blk_n_W <= m_axi_gmem1_WREADY;
        else 
            gmem1_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln32_fu_272_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv19_40000) else "0";
    icmp_ln33_fu_287_p2 <= "1" when (ap_sig_allocacmp_xi_load = ap_const_lv10_200) else "0";
    icmp_ln45_fu_310_p2 <= "1" when (trunc_ln33_fu_306_p1 = ap_const_lv6_0) else "0";
    icmp_ln71_fu_316_p2 <= "1" when (trunc_ln33_fu_306_p1 = ap_const_lv6_3F) else "0";
    line_buf_address0 <= line_buf_addr_reg_730_pp0_iter1_reg;
    line_buf_address1 <= zext_ln33_1_fu_301_p1(9 - 1 downto 0);

    line_buf_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buf_ce0 <= ap_const_logic_1;
        else 
            line_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buf_ce1 <= ap_const_logic_1;
        else 
            line_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buf_d0 <= (trunc_ln45_fu_407_p1 & tmp_reg_762);

    line_buf_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln32_reg_720_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln32_reg_720_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buf_we0 <= ap_const_lv3_7;
        else 
            line_buf_we0 <= ap_const_lv3_0;
        end if; 
    end process;

    m_axi_gmem0_ARADDR <= ap_const_lv64_0;
    m_axi_gmem0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem0_ARID <= ap_const_lv1_0;
    m_axi_gmem0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem0_ARVALID <= ap_const_logic_0;
    m_axi_gmem0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_BREADY <= ap_const_logic_0;

    m_axi_gmem0_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op57_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op57_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_WDATA <= ap_const_lv512_lc_1;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv64_0;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_WVALID <= ap_const_logic_0;
    m_axi_gmem1_ARADDR <= ap_const_lv64_0;
    m_axi_gmem1_ARBURST <= ap_const_lv2_0;
    m_axi_gmem1_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem1_ARID <= ap_const_lv1_0;
    m_axi_gmem1_ARLEN <= ap_const_lv32_0;
    m_axi_gmem1_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem1_ARPROT <= ap_const_lv3_0;
    m_axi_gmem1_ARQOS <= ap_const_lv4_0;
    m_axi_gmem1_ARREGION <= ap_const_lv4_0;
    m_axi_gmem1_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem1_ARUSER <= ap_const_lv1_0;
    m_axi_gmem1_ARVALID <= ap_const_logic_0;
    m_axi_gmem1_AWADDR <= ap_const_lv64_0;
    m_axi_gmem1_AWBURST <= ap_const_lv2_0;
    m_axi_gmem1_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem1_AWID <= ap_const_lv1_0;
    m_axi_gmem1_AWLEN <= ap_const_lv32_0;
    m_axi_gmem1_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem1_AWPROT <= ap_const_lv3_0;
    m_axi_gmem1_AWQOS <= ap_const_lv4_0;
    m_axi_gmem1_AWREGION <= ap_const_lv4_0;
    m_axi_gmem1_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem1_AWUSER <= ap_const_lv1_0;
    m_axi_gmem1_AWVALID <= ap_const_logic_0;
    m_axi_gmem1_BREADY <= ap_const_logic_0;
    m_axi_gmem1_RREADY <= ap_const_logic_0;
    m_axi_gmem1_WDATA <= or_ln_reg_787;
    m_axi_gmem1_WID <= ap_const_lv1_0;
    m_axi_gmem1_WLAST <= ap_const_logic_0;
    m_axi_gmem1_WSTRB <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    m_axi_gmem1_WUSER <= ap_const_lv1_0;

    m_axi_gmem1_WVALID_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln71_reg_740_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln71_reg_740_pp0_iter3_reg = ap_const_lv1_1))) then 
            m_axi_gmem1_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem1_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln_fu_602_p3 <= (trunc_ln3_fu_592_p4 & select_ln32_2_fu_560_p3);
    p_cast10_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_132),9));
    p_cast11_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_34_fu_156),9));
    p_cast12_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_32_fu_148),9));
    pix_gauss_1_fu_586_p2 <= std_logic_vector(unsigned(add_ln63_1_fu_581_p2) + unsigned(zext_ln63_5_fu_578_p1));
    select_ln32_1_fu_386_p3 <= 
        ap_const_lv504_lc_1 when (icmp_ln33_reg_724_pp0_iter1_reg(0) = '1') else 
        shiftreg_fu_124;
    select_ln32_2_fu_560_p3 <= 
        ap_const_lv504_lc_1 when (icmp_ln33_reg_724_pp0_iter2_reg(0) = '1') else 
        phi_ln71_fu_120;
    select_ln32_fu_293_p3 <= 
        ap_const_lv10_0 when (icmp_ln33_fu_287_p2(0) = '1') else 
        ap_sig_allocacmp_xi_load;
    select_ln71_fu_628_p3 <= 
        ap_const_lv504_lc_1 when (icmp_ln71_reg_740_pp0_iter2_reg(0) = '1') else 
        tmp_9_fu_620_p3;
    shl_ln_fu_567_p3 <= (p_load13_reg_767 & ap_const_lv2_0);
    tmp146_fu_479_p2 <= std_logic_vector(unsigned(tmp2_cast_fu_475_p1) + unsigned(tmp1_cast_fu_465_p1));
    tmp1_cast_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_459_p2),10));
    tmp1_fu_459_p2 <= std_logic_vector(unsigned(p_cast10_fu_448_p1) + unsigned(p_cast11_fu_444_p1));
    tmp2_cast_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_469_p2),10));
    tmp2_fu_469_p2 <= std_logic_vector(unsigned(p_cast12_fu_452_p1) + unsigned(tmp_4_cast_fu_456_p1));
    tmp7_fu_485_p3 <= (tmp146_fu_479_p2 & ap_const_lv1_0);
    tmp_4_cast_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_751),9));
    tmp_8_fu_610_p4 <= select_ln32_2_fu_560_p3(503 downto 8);
    tmp_9_fu_620_p3 <= (trunc_ln3_fu_592_p4 & tmp_8_fu_610_p4);
    trunc_ln33_fu_306_p1 <= select_ln32_fu_293_p3(6 - 1 downto 0);
    trunc_ln3_fu_592_p4 <= pix_gauss_1_fu_586_p2(11 downto 4);
    trunc_ln45_cast_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln45_fu_407_p1),9));
    trunc_ln45_fu_407_p1 <= ap_phi_mux_empty_35_phi_fu_205_p4(8 - 1 downto 0);
    zext_ln33_1_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_fu_293_p3),64));
    zext_ln33_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_1_fu_386_p3),512));
    zext_ln37_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pix_gauss_fu_128),10));
    zext_ln63_1_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_567_p3),12));
    zext_ln63_2_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_31_fu_136),12));
    zext_ln63_3_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_fu_485_p3),12));
    zext_ln63_4_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_2_fu_503_p2),10));
    zext_ln63_5_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_3_reg_777),12));
    zext_ln63_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_745),9));
end behav;

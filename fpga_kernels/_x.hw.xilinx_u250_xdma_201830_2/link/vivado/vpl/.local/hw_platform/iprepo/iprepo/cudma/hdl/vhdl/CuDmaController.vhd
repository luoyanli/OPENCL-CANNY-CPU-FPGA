-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- (c) Copyright 1986-2019 Xilinx, Inc. All rights reserved.
--
-- This file contains confidential and proprietary information
-- of Xilinx, Inc. and is protected under U.S. and
-- international copyright and other intellectual property
-- laws.
--
-- DISCLAIMER
-- This disclaimer is not a license and does not grant any
-- rights to the materials distributed herewith. Except as
-- otherwise provided in a valid license issued to you by
-- Xilinx, and to the maximum extent permitted by applicable
-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
-- (2) Xilinx shall not be liable (whether in contract or tort,
-- including negligence, or under any other theory of
-- liability) for any loss or damage of any kind or nature
-- related to, arising under or in connection with these
-- materials, including for any direct, or any indirect,
-- special, incidental, or consequential loss or damage
-- (including loss of data, profits, goodwill, or any type of
-- loss or damage suffered as a result of any action brought
-- by a third party) even if such damage or loss was
-- reasonably foreseeable or Xilinx had been advised of the
-- possibility of the same.
--
-- CRITICAL APPLICATIONS
-- Xilinx products are not designed or intended to be fail-
-- safe, or for use in any application requiring fail-safe
-- performance, such as life-support or safety devices or
-- systems, Class III medical devices, nuclear facilities,
-- applications related to the deployment of airbags, or any
-- other applications that could lead to death, personal
-- injury, or severe property or environmental damage
-- (individually and collectively, "Critical
-- Applications"). Customer assumes the sole risk and
-- liability of any use of Xilinx products in Critical
-- Applications, subject only to applicable laws and
-- regulations governing limitations on product liability.
--
-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
-- PART OF THIS FILE AT ALL TIMES.
------------------------------------------------------------
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CuDmaController is
generic (
    C_M_AXI_CQDMA_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_CQDMA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_CQDMA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CQDMA_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CQDMA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CQDMA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CQDMA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CQDMA_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CUDMA_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_CUDMA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_CUDMA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CUDMA_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CUDMA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CUDMA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CUDMA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CUDMA_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CQDMA_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_CQDMA_USER_VALUE : INTEGER := 0;
    C_M_AXI_CQDMA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_CQDMA_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_CUDMA_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_CUDMA_USER_VALUE : INTEGER := 0;
    C_M_AXI_CUDMA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_CUDMA_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_CQDma_AWVALID : OUT STD_LOGIC;
    m_axi_CQDma_AWREADY : IN STD_LOGIC;
    m_axi_CQDma_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CQDMA_ADDR_WIDTH-1 downto 0);
    m_axi_CQDma_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_CQDMA_ID_WIDTH-1 downto 0);
    m_axi_CQDma_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_CQDma_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CQDma_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CQDma_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CQDma_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CQDma_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CQDma_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CQDma_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CQDma_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CQDMA_AWUSER_WIDTH-1 downto 0);
    m_axi_CQDma_WVALID : OUT STD_LOGIC;
    m_axi_CQDma_WREADY : IN STD_LOGIC;
    m_axi_CQDma_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_CQDMA_DATA_WIDTH-1 downto 0);
    m_axi_CQDma_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_CQDMA_DATA_WIDTH/8-1 downto 0);
    m_axi_CQDma_WLAST : OUT STD_LOGIC;
    m_axi_CQDma_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_CQDMA_ID_WIDTH-1 downto 0);
    m_axi_CQDma_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CQDMA_WUSER_WIDTH-1 downto 0);
    m_axi_CQDma_ARVALID : OUT STD_LOGIC;
    m_axi_CQDma_ARREADY : IN STD_LOGIC;
    m_axi_CQDma_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CQDMA_ADDR_WIDTH-1 downto 0);
    m_axi_CQDma_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_CQDMA_ID_WIDTH-1 downto 0);
    m_axi_CQDma_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_CQDma_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CQDma_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CQDma_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CQDma_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CQDma_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CQDma_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CQDma_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CQDma_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CQDMA_ARUSER_WIDTH-1 downto 0);
    m_axi_CQDma_RVALID : IN STD_LOGIC;
    m_axi_CQDma_RREADY : OUT STD_LOGIC;
    m_axi_CQDma_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_CQDMA_DATA_WIDTH-1 downto 0);
    m_axi_CQDma_RLAST : IN STD_LOGIC;
    m_axi_CQDma_RID : IN STD_LOGIC_VECTOR (C_M_AXI_CQDMA_ID_WIDTH-1 downto 0);
    m_axi_CQDma_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CQDMA_RUSER_WIDTH-1 downto 0);
    m_axi_CQDma_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CQDma_BVALID : IN STD_LOGIC;
    m_axi_CQDma_BREADY : OUT STD_LOGIC;
    m_axi_CQDma_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CQDma_BID : IN STD_LOGIC_VECTOR (C_M_AXI_CQDMA_ID_WIDTH-1 downto 0);
    m_axi_CQDma_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CQDMA_BUSER_WIDTH-1 downto 0);
    m_axi_CUDma_AWVALID : OUT STD_LOGIC;
    m_axi_CUDma_AWREADY : IN STD_LOGIC;
    m_axi_CUDma_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CUDMA_ADDR_WIDTH-1 downto 0);
    m_axi_CUDma_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_CUDMA_ID_WIDTH-1 downto 0);
    m_axi_CUDma_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_CUDma_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CUDma_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CUDma_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CUDma_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CUDma_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CUDma_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CUDma_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CUDma_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CUDMA_AWUSER_WIDTH-1 downto 0);
    m_axi_CUDma_WVALID : OUT STD_LOGIC;
    m_axi_CUDma_WREADY : IN STD_LOGIC;
    m_axi_CUDma_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_CUDMA_DATA_WIDTH-1 downto 0);
    m_axi_CUDma_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_CUDMA_DATA_WIDTH/8-1 downto 0);
    m_axi_CUDma_WLAST : OUT STD_LOGIC;
    m_axi_CUDma_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_CUDMA_ID_WIDTH-1 downto 0);
    m_axi_CUDma_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CUDMA_WUSER_WIDTH-1 downto 0);
    m_axi_CUDma_ARVALID : OUT STD_LOGIC;
    m_axi_CUDma_ARREADY : IN STD_LOGIC;
    m_axi_CUDma_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CUDMA_ADDR_WIDTH-1 downto 0);
    m_axi_CUDma_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_CUDMA_ID_WIDTH-1 downto 0);
    m_axi_CUDma_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_CUDma_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CUDma_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CUDma_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CUDma_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CUDma_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CUDma_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CUDma_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CUDma_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CUDMA_ARUSER_WIDTH-1 downto 0);
    m_axi_CUDma_RVALID : IN STD_LOGIC;
    m_axi_CUDma_RREADY : OUT STD_LOGIC;
    m_axi_CUDma_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_CUDMA_DATA_WIDTH-1 downto 0);
    m_axi_CUDma_RLAST : IN STD_LOGIC;
    m_axi_CUDma_RID : IN STD_LOGIC_VECTOR (C_M_AXI_CUDMA_ID_WIDTH-1 downto 0);
    m_axi_CUDma_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CUDMA_RUSER_WIDTH-1 downto 0);
    m_axi_CUDma_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CUDma_BVALID : IN STD_LOGIC;
    m_axi_CUDma_BREADY : OUT STD_LOGIC;
    m_axi_CUDma_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CUDma_BID : IN STD_LOGIC_VECTOR (C_M_AXI_CUDMA_ID_WIDTH-1 downto 0);
    m_axi_CUDma_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CUDMA_BUSER_WIDTH-1 downto 0);
    CuDmaQueue : IN STD_LOGIC_VECTOR (127 downto 0);
    SlotSize : IN STD_LOGIC_VECTOR (12 downto 0);
    NoOfSlots : IN STD_LOGIC_VECTOR (7 downto 0);
    CqBaseAddress : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of CuDmaController is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "CuDmaController,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1483,HLS_SYN_LUT=2205,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal CQDma_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal CQDma_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_550 : STD_LOGIC_VECTOR (0 downto 0);
    signal CUDma_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal CUDma_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal exitcond_reg_550_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal CUDma_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal bit_reg_490 : STD_LOGIC_VECTOR (0 downto 0);
    signal CQDma_AWREADY : STD_LOGIC;
    signal CQDma_WREADY : STD_LOGIC;
    signal CQDma_ARVALID : STD_LOGIC;
    signal CQDma_ARREADY : STD_LOGIC;
    signal CQDma_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal CQDma_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal CQDma_RVALID : STD_LOGIC;
    signal CQDma_RREADY : STD_LOGIC;
    signal CQDma_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal CQDma_RLAST : STD_LOGIC;
    signal CQDma_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal CQDma_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal CQDma_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal CQDma_BVALID : STD_LOGIC;
    signal CQDma_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal CQDma_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal CQDma_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal CUDma_AWVALID : STD_LOGIC;
    signal CUDma_AWREADY : STD_LOGIC;
    signal CUDma_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal CUDma_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal CUDma_WVALID : STD_LOGIC;
    signal CUDma_WREADY : STD_LOGIC;
    signal CUDma_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal CUDma_ARREADY : STD_LOGIC;
    signal CUDma_RVALID : STD_LOGIC;
    signal CUDma_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal CUDma_RLAST : STD_LOGIC;
    signal CUDma_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal CUDma_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal CUDma_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal CUDma_BVALID : STD_LOGIC;
    signal CUDma_BREADY : STD_LOGIC;
    signal CUDma_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal CUDma_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal CUDma_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal l_reg_226 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_249 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_279_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_reg_485 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal bit_fu_295_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal SlotBaseAddr_fu_299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal SlotBaseAddr_reg_494 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_CQDma_ARREADY : STD_LOGIC;
    signal payload_reg_506 : STD_LOGIC_VECTOR (7 downto 0);
    signal noofcumasksread_tmp_reg_511 : STD_LOGIC_VECTOR (1 downto 0);
    signal payload_1_fu_376_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal payload_1_reg_516 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_9_fu_391_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_533 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_539 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_sig_ioackin_CUDma_AWREADY : STD_LOGIC;
    signal exitcond_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state20_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_CUDma_WREADY : STD_LOGIC;
    signal ap_block_state22_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal l_1_fu_431_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal CQDma_addr_1_read_reg_559 : STD_LOGIC_VECTOR (31 downto 0);
    signal SlotOffset_n_1_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state29 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state20 : STD_LOGIC;
    signal SlotOffset_n_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_reg_215 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_CQDma_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_CUDma_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_CUDma_WREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal CuDmaQueue_assign_fu_108 : STD_LOGIC_VECTOR (127 downto 0);
    signal SlotSize_assign_fu_112 : STD_LOGIC_VECTOR (12 downto 0);
    signal NoOfSlots_assign_fu_116 : STD_LOGIC_VECTOR (7 downto 0);
    signal CqBaseAddress_assign_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_285_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_4_fu_289_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal noofcumasksread_tmp_s_fu_345_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal noofcumasksread_fu_348_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_335_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_not_fu_358_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_neg_fu_364_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_370_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_cast_fu_354_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_381_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_387_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_448_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_542 : BOOLEAN;

    component CuDmaController_CQDma_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component CuDmaController_CUDma_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    CuDmaController_CQDma_m_axi_U : component CuDmaController_CQDma_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_CQDMA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_CQDMA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_CQDMA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_CQDMA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_CQDMA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_CQDMA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_CQDMA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_CQDMA_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_CQDMA_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_CQDMA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_CQDMA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_CQDMA_CACHE_VALUE)
    port map (
        AWVALID => m_axi_CQDma_AWVALID,
        AWREADY => m_axi_CQDma_AWREADY,
        AWADDR => m_axi_CQDma_AWADDR,
        AWID => m_axi_CQDma_AWID,
        AWLEN => m_axi_CQDma_AWLEN,
        AWSIZE => m_axi_CQDma_AWSIZE,
        AWBURST => m_axi_CQDma_AWBURST,
        AWLOCK => m_axi_CQDma_AWLOCK,
        AWCACHE => m_axi_CQDma_AWCACHE,
        AWPROT => m_axi_CQDma_AWPROT,
        AWQOS => m_axi_CQDma_AWQOS,
        AWREGION => m_axi_CQDma_AWREGION,
        AWUSER => m_axi_CQDma_AWUSER,
        WVALID => m_axi_CQDma_WVALID,
        WREADY => m_axi_CQDma_WREADY,
        WDATA => m_axi_CQDma_WDATA,
        WSTRB => m_axi_CQDma_WSTRB,
        WLAST => m_axi_CQDma_WLAST,
        WID => m_axi_CQDma_WID,
        WUSER => m_axi_CQDma_WUSER,
        ARVALID => m_axi_CQDma_ARVALID,
        ARREADY => m_axi_CQDma_ARREADY,
        ARADDR => m_axi_CQDma_ARADDR,
        ARID => m_axi_CQDma_ARID,
        ARLEN => m_axi_CQDma_ARLEN,
        ARSIZE => m_axi_CQDma_ARSIZE,
        ARBURST => m_axi_CQDma_ARBURST,
        ARLOCK => m_axi_CQDma_ARLOCK,
        ARCACHE => m_axi_CQDma_ARCACHE,
        ARPROT => m_axi_CQDma_ARPROT,
        ARQOS => m_axi_CQDma_ARQOS,
        ARREGION => m_axi_CQDma_ARREGION,
        ARUSER => m_axi_CQDma_ARUSER,
        RVALID => m_axi_CQDma_RVALID,
        RREADY => m_axi_CQDma_RREADY,
        RDATA => m_axi_CQDma_RDATA,
        RLAST => m_axi_CQDma_RLAST,
        RID => m_axi_CQDma_RID,
        RUSER => m_axi_CQDma_RUSER,
        RRESP => m_axi_CQDma_RRESP,
        BVALID => m_axi_CQDma_BVALID,
        BREADY => m_axi_CQDma_BREADY,
        BRESP => m_axi_CQDma_BRESP,
        BID => m_axi_CQDma_BID,
        BUSER => m_axi_CQDma_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => CQDma_ARVALID,
        I_ARREADY => CQDma_ARREADY,
        I_ARADDR => CQDma_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => CQDma_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => CQDma_RVALID,
        I_RREADY => CQDma_RREADY,
        I_RDATA => CQDma_RDATA,
        I_RID => CQDma_RID,
        I_RUSER => CQDma_RUSER,
        I_RRESP => CQDma_RRESP,
        I_RLAST => CQDma_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => CQDma_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => CQDma_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => CQDma_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => CQDma_BRESP,
        I_BID => CQDma_BID,
        I_BUSER => CQDma_BUSER);

    CuDmaController_CUDma_m_axi_U : component CuDmaController_CUDma_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_CUDMA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_CUDMA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_CUDMA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_CUDMA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_CUDMA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_CUDMA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_CUDMA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_CUDMA_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_CUDMA_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_CUDMA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_CUDMA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_CUDMA_CACHE_VALUE)
    port map (
        AWVALID => m_axi_CUDma_AWVALID,
        AWREADY => m_axi_CUDma_AWREADY,
        AWADDR => m_axi_CUDma_AWADDR,
        AWID => m_axi_CUDma_AWID,
        AWLEN => m_axi_CUDma_AWLEN,
        AWSIZE => m_axi_CUDma_AWSIZE,
        AWBURST => m_axi_CUDma_AWBURST,
        AWLOCK => m_axi_CUDma_AWLOCK,
        AWCACHE => m_axi_CUDma_AWCACHE,
        AWPROT => m_axi_CUDma_AWPROT,
        AWQOS => m_axi_CUDma_AWQOS,
        AWREGION => m_axi_CUDma_AWREGION,
        AWUSER => m_axi_CUDma_AWUSER,
        WVALID => m_axi_CUDma_WVALID,
        WREADY => m_axi_CUDma_WREADY,
        WDATA => m_axi_CUDma_WDATA,
        WSTRB => m_axi_CUDma_WSTRB,
        WLAST => m_axi_CUDma_WLAST,
        WID => m_axi_CUDma_WID,
        WUSER => m_axi_CUDma_WUSER,
        ARVALID => m_axi_CUDma_ARVALID,
        ARREADY => m_axi_CUDma_ARREADY,
        ARADDR => m_axi_CUDma_ARADDR,
        ARID => m_axi_CUDma_ARID,
        ARLEN => m_axi_CUDma_ARLEN,
        ARSIZE => m_axi_CUDma_ARSIZE,
        ARBURST => m_axi_CUDma_ARBURST,
        ARLOCK => m_axi_CUDma_ARLOCK,
        ARCACHE => m_axi_CUDma_ARCACHE,
        ARPROT => m_axi_CUDma_ARPROT,
        ARQOS => m_axi_CUDma_ARQOS,
        ARREGION => m_axi_CUDma_ARREGION,
        ARUSER => m_axi_CUDma_ARUSER,
        RVALID => m_axi_CUDma_RVALID,
        RREADY => m_axi_CUDma_RREADY,
        RDATA => m_axi_CUDma_RDATA,
        RLAST => m_axi_CUDma_RLAST,
        RID => m_axi_CUDma_RID,
        RUSER => m_axi_CUDma_RUSER,
        RRESP => m_axi_CUDma_RRESP,
        BVALID => m_axi_CUDma_BVALID,
        BREADY => m_axi_CUDma_BREADY,
        BRESP => m_axi_CUDma_BRESP,
        BID => m_axi_CUDma_BID,
        BUSER => m_axi_CUDma_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => CUDma_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => CUDma_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => CUDma_RDATA,
        I_RID => CUDma_RID,
        I_RUSER => CUDma_RUSER,
        I_RRESP => CUDma_RRESP,
        I_RLAST => CUDma_RLAST,
        I_AWVALID => CUDma_AWVALID,
        I_AWREADY => CUDma_AWREADY,
        I_AWADDR => CUDma_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => CUDma_AWLEN,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => CUDma_WVALID,
        I_WREADY => CUDma_WREADY,
        I_WDATA => CUDma_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => CUDma_BVALID,
        I_BREADY => CUDma_BREADY,
        I_BRESP => CUDma_BRESP,
        I_BID => CUDma_BID,
        I_BUSER => CUDma_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state20) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_sig_ioackin_CUDma_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state20)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state20);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_sig_ioackin_CUDma_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_CQDma_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_CQDma_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_CQDma_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_sig_ioackin_CQDma_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                    ap_reg_ioackin_CQDma_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = CQDma_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = CQDma_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                    ap_reg_ioackin_CQDma_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_CUDma_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_CUDma_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_CUDma_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_sig_ioackin_CUDma_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
                    ap_reg_ioackin_CUDma_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = CUDma_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_const_logic_1 = CUDma_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
                    ap_reg_ioackin_CUDma_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_CUDma_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_CUDma_WREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_CUDma_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond_reg_550_pp0_iter1_reg = ap_const_lv1_0)))) then 
                    ap_reg_ioackin_CUDma_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = CUDma_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = CUDma_WREADY) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond_reg_550_pp0_iter1_reg = ap_const_lv1_0)))) then 
                    ap_reg_ioackin_CUDma_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    SlotOffset_n_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = CUDma_BVALID) and (bit_reg_490 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                SlotOffset_n_reg_203 <= SlotOffset_n_1_fu_452_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                SlotOffset_n_reg_203 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = CUDma_BVALID) and (bit_reg_490 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                i_reg_215 <= i_1_reg_485;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_215 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    l_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_fu_426_p2 = ap_const_lv1_0))) then 
                l_reg_226 <= l_1_fu_431_p2;
            elsif (((ap_sig_ioackin_CUDma_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                l_reg_226 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_reg_550 = ap_const_lv1_0))) then
                CQDma_addr_1_read_reg_559 <= CQDma_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                CqBaseAddress_assign_fu_120 <= CqBaseAddress;
                CuDmaQueue_assign_fu_108 <= CuDmaQueue;
                NoOfSlots_assign_fu_116 <= NoOfSlots;
                SlotSize_assign_fu_112 <= SlotSize;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_273_p2 = ap_const_lv1_1) and (bit_fu_295_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                SlotBaseAddr_reg_494 <= SlotBaseAddr_fu_299_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_273_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                bit_reg_490 <= bit_fu_295_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_reg_550 <= exitcond_fu_426_p2;
                exitcond_reg_550_pp0_iter1_reg <= exitcond_reg_550;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_1_reg_485 <= i_1_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = CQDma_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                noofcumasksread_tmp_reg_511 <= CQDma_RDATA(11 downto 10);
                payload_reg_506 <= CQDma_RDATA(19 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                payload_1_reg_516 <= payload_1_fu_376_p2;
                tmp_9_reg_522 <= tmp_9_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = CQDma_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = CQDma_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then
                reg_249 <= CQDma_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_CQDma_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    tmp_11_reg_533(7 downto 0) <= tmp_11_fu_406_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_5_reg_539 <= tmp_5_fu_410_p2;
            end if;
        end if;
    end process;
    tmp_11_reg_533(31 downto 8) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_state13, ap_enable_reg_pp0_iter1, ap_CS_fsm_state19, ap_enable_reg_pp0_iter2, ap_CS_fsm_state28, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state29, bit_reg_490, CQDma_RVALID, CUDma_BVALID, ap_CS_fsm_state3, bit_fu_295_p1, tmp_2_fu_273_p2, ap_sig_ioackin_CQDma_ARREADY, ap_sig_ioackin_CUDma_AWREADY, exitcond_fu_426_p2, ap_sig_ioackin_CUDma_WREADY, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_273_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((tmp_2_fu_273_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (bit_fu_295_p1 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_sig_ioackin_CQDma_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = CQDma_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_sig_ioackin_CQDma_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = CQDma_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_sig_ioackin_CUDma_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_426_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_426_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_sig_ioackin_CUDma_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_sig_ioackin_CUDma_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = CUDma_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if ((not(((ap_const_logic_0 = CUDma_BVALID) and (bit_reg_490 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    CQDma_ARADDR_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state13, tmp_6_fu_305_p1, tmp_1_fu_396_p1, ap_reg_ioackin_CQDma_ARREADY)
    begin
        if ((ap_reg_ioackin_CQDma_ARREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                CQDma_ARADDR <= tmp_1_fu_396_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                CQDma_ARADDR <= tmp_6_fu_305_p1(32 - 1 downto 0);
            else 
                CQDma_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            CQDma_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    CQDma_ARLEN_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state13, tmp_11_fu_406_p1, ap_reg_ioackin_CQDma_ARREADY)
    begin
        if ((ap_reg_ioackin_CQDma_ARREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                CQDma_ARLEN <= tmp_11_fu_406_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                CQDma_ARLEN <= ap_const_lv32_2;
            else 
                CQDma_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            CQDma_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    CQDma_ARVALID_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state13, ap_reg_ioackin_CQDma_ARREADY)
    begin
        if ((((ap_reg_ioackin_CQDma_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_reg_ioackin_CQDma_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            CQDma_ARVALID <= ap_const_logic_1;
        else 
            CQDma_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    CQDma_RREADY_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_550, CQDma_RVALID, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_reg_550 = ap_const_lv1_0)) or ((ap_const_logic_1 = CQDma_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = CQDma_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            CQDma_RREADY <= ap_const_logic_1;
        else 
            CQDma_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    CQDma_blk_n_AR_assign_proc : process(m_axi_CQDma_ARREADY, ap_CS_fsm_state4, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            CQDma_blk_n_AR <= m_axi_CQDma_ARREADY;
        else 
            CQDma_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    CQDma_blk_n_R_assign_proc : process(m_axi_CQDma_RVALID, ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_550)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_reg_550 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            CQDma_blk_n_R <= m_axi_CQDma_RVALID;
        else 
            CQDma_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    CUDma_AWADDR_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state23, tmp_10_fu_416_p1, tmp_12_fu_437_p1, ap_reg_ioackin_CUDma_AWREADY)
    begin
        if ((ap_reg_ioackin_CUDma_AWREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                CUDma_AWADDR <= tmp_12_fu_437_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                CUDma_AWADDR <= tmp_10_fu_416_p1(32 - 1 downto 0);
            else 
                CUDma_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            CUDma_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    CUDma_AWLEN_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state23, tmp_11_reg_533, ap_reg_ioackin_CUDma_AWREADY)
    begin
        if ((ap_reg_ioackin_CUDma_AWREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                CUDma_AWLEN <= ap_const_lv32_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                CUDma_AWLEN <= tmp_11_reg_533;
            else 
                CUDma_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            CUDma_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    CUDma_AWVALID_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state23, ap_reg_ioackin_CUDma_AWREADY)
    begin
        if ((((ap_reg_ioackin_CUDma_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_reg_ioackin_CUDma_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            CUDma_AWVALID <= ap_const_logic_1;
        else 
            CUDma_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    CUDma_BREADY_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state29, bit_reg_490, CUDma_BVALID)
    begin
        if (((not(((ap_const_logic_0 = CUDma_BVALID) and (bit_reg_490 = ap_const_lv1_1))) and (bit_reg_490 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_const_logic_1 = CUDma_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state28)))) then 
            CUDma_BREADY <= ap_const_logic_1;
        else 
            CUDma_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    CUDma_WDATA_assign_proc : process(ap_CS_fsm_state24, CQDma_addr_1_read_reg_559, ap_reg_ioackin_CUDma_WREADY, ap_condition_542)
    begin
        if ((ap_reg_ioackin_CUDma_WREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                CUDma_WDATA <= ap_const_lv32_1;
            elsif ((ap_const_boolean_1 = ap_condition_542)) then 
                CUDma_WDATA <= CQDma_addr_1_read_reg_559;
            else 
                CUDma_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            CUDma_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    CUDma_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, exitcond_reg_550_pp0_iter1_reg, ap_CS_fsm_state24, ap_reg_ioackin_CUDma_WREADY, ap_block_pp0_stage0_01001)
    begin
        if ((((ap_reg_ioackin_CUDma_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_CUDma_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond_reg_550_pp0_iter1_reg = ap_const_lv1_0)))) then 
            CUDma_WVALID <= ap_const_logic_1;
        else 
            CUDma_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    CUDma_blk_n_AW_assign_proc : process(m_axi_CUDma_AWREADY, ap_CS_fsm_state19, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            CUDma_blk_n_AW <= m_axi_CUDma_AWREADY;
        else 
            CUDma_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    CUDma_blk_n_B_assign_proc : process(m_axi_CUDma_BVALID, ap_CS_fsm_state28, ap_CS_fsm_state29, bit_reg_490)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or ((bit_reg_490 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            CUDma_blk_n_B <= m_axi_CUDma_BVALID;
        else 
            CUDma_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    CUDma_blk_n_W_assign_proc : process(m_axi_CUDma_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, exitcond_reg_550_pp0_iter1_reg, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond_reg_550_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            CUDma_blk_n_W <= m_axi_CUDma_WREADY;
        else 
            CUDma_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    SlotBaseAddr_fu_299_p2 <= std_logic_vector(unsigned(SlotOffset_n_reg_203) + unsigned(CqBaseAddress_assign_fu_120));
    SlotOffset_n_1_fu_452_p2 <= std_logic_vector(unsigned(tmp_14_fu_448_p1) + unsigned(SlotOffset_n_reg_203));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(19);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(20);
    ap_CS_fsm_state24 <= ap_CS_fsm(21);
    ap_CS_fsm_state28 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_reg_550, CQDma_RVALID)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_const_logic_0 = CQDma_RVALID) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_reg_550 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_reg_550, ap_enable_reg_pp0_iter2, CQDma_RVALID, ap_block_state22_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state22_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_logic_0 = CQDma_RVALID) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_reg_550 = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_reg_550, ap_enable_reg_pp0_iter2, CQDma_RVALID, ap_block_state22_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state22_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_logic_0 = CQDma_RVALID) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_reg_550 = ap_const_lv1_0)));
    end process;

        ap_block_state20_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state21_pp0_stage0_iter1_assign_proc : process(exitcond_reg_550, CQDma_RVALID)
    begin
                ap_block_state21_pp0_stage0_iter1 <= ((ap_const_logic_0 = CQDma_RVALID) and (exitcond_reg_550 = ap_const_lv1_0));
    end process;


    ap_block_state22_io_assign_proc : process(exitcond_reg_550_pp0_iter1_reg, ap_sig_ioackin_CUDma_WREADY)
    begin
                ap_block_state22_io <= ((ap_sig_ioackin_CUDma_WREADY = ap_const_logic_0) and (exitcond_reg_550_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state22_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state29_assign_proc : process(bit_reg_490, CUDma_BVALID)
    begin
                ap_block_state29 <= ((ap_const_logic_0 = CUDma_BVALID) and (bit_reg_490 = ap_const_lv1_1));
    end process;


    ap_condition_542_assign_proc : process(ap_enable_reg_pp0_iter2, exitcond_reg_550_pp0_iter1_reg, ap_block_pp0_stage0_01001)
    begin
                ap_condition_542 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond_reg_550_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state20_assign_proc : process(exitcond_fu_426_p2)
    begin
        if ((exitcond_fu_426_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state20 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state3, tmp_2_fu_273_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_273_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, tmp_2_fu_273_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_273_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_CQDma_ARREADY_assign_proc : process(CQDma_ARREADY, ap_reg_ioackin_CQDma_ARREADY)
    begin
        if ((ap_reg_ioackin_CQDma_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_CQDma_ARREADY <= CQDma_ARREADY;
        else 
            ap_sig_ioackin_CQDma_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_CUDma_AWREADY_assign_proc : process(CUDma_AWREADY, ap_reg_ioackin_CUDma_AWREADY)
    begin
        if ((ap_reg_ioackin_CUDma_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_CUDma_AWREADY <= CUDma_AWREADY;
        else 
            ap_sig_ioackin_CUDma_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_CUDma_WREADY_assign_proc : process(CUDma_WREADY, ap_reg_ioackin_CUDma_WREADY)
    begin
        if ((ap_reg_ioackin_CUDma_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_CUDma_WREADY <= CUDma_WREADY;
        else 
            ap_sig_ioackin_CUDma_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    bit_fu_295_p1 <= tmp_4_fu_289_p2(1 - 1 downto 0);
    exitcond_fu_426_p2 <= "1" when (l_reg_226 = payload_1_reg_516) else "0";
    i_1_fu_279_p2 <= std_logic_vector(unsigned(i_reg_215) + unsigned(ap_const_lv8_1));
    l_1_fu_431_p2 <= std_logic_vector(unsigned(l_reg_226) + unsigned(ap_const_lv8_1));
    noofcumasksread_fu_348_p2 <= std_logic_vector(unsigned(noofcumasksread_tmp_s_fu_345_p1) + unsigned(ap_const_lv3_1));
    noofcumasksread_tmp_s_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(noofcumasksread_tmp_reg_511),3));
    p_neg_fu_364_p2 <= (p_not_fu_358_p2 xor ap_const_lv8_3);
    p_not_fu_358_p2 <= (tmp_s_fu_335_p4 or ap_const_lv8_FC);
    payload_1_fu_376_p2 <= std_logic_vector(unsigned(payload_reg_506) + unsigned(tmp1_fu_370_p2));
    tmp1_fu_370_p2 <= std_logic_vector(unsigned(p_neg_fu_364_p2) + unsigned(ap_const_lv8_FC));
    tmp_10_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_539),64));
    tmp_11_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(payload_1_reg_516),32));
    tmp_12_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_249),64));
    tmp_14_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SlotSize_assign_fu_112),32));
    tmp_1_cast_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(noofcumasksread_fu_348_p2),4));
    tmp_1_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_522),64));
    tmp_2_fu_273_p2 <= "1" when (unsigned(i_reg_215) < unsigned(NoOfSlots_assign_fu_116)) else "0";
    tmp_3_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_215),128));
    tmp_4_fu_289_p2 <= std_logic_vector(shift_right(unsigned(CuDmaQueue_assign_fu_108),to_integer(unsigned('0' & tmp_3_fu_285_p1(31-1 downto 0)))));
    tmp_5_fu_410_p2 <= std_logic_vector(unsigned(reg_249) + unsigned(ap_const_lv32_4));
    tmp_6_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SlotBaseAddr_reg_494),64));
    tmp_7_fu_381_p2 <= std_logic_vector(unsigned(tmp_1_cast_fu_354_p1) + unsigned(ap_const_lv4_5));
    tmp_8_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_381_p2),32));
    tmp_9_fu_391_p2 <= std_logic_vector(unsigned(SlotBaseAddr_reg_494) + unsigned(tmp_8_fu_387_p1));
    tmp_s_fu_335_p4 <= reg_249(17 downto 10);
end behav;

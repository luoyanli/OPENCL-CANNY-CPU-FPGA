// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// (c) Copyright 1986-2017, 2019 Xilinx, Inc. All rights reserved.
//
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
//
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
//
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
//
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.
////////////////////////////////////////////////////////////
// 
// ===========================================================

#ifndef _cuisr_HH_
#define _cuisr_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "cuisr_a_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_A_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_A_ID_WIDTH = 1,
         unsigned int C_M_AXI_A_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_A_DATA_WIDTH = 32,
         unsigned int C_M_AXI_A_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_A_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_A_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_A_BUSER_WIDTH = 1>
struct cuisr : public sc_module {
    // Port declarations 52
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_a_AWVALID;
    sc_in< sc_logic > m_axi_a_AWREADY;
    sc_out< sc_uint<C_M_AXI_A_ADDR_WIDTH> > m_axi_a_AWADDR;
    sc_out< sc_uint<C_M_AXI_A_ID_WIDTH> > m_axi_a_AWID;
    sc_out< sc_lv<8> > m_axi_a_AWLEN;
    sc_out< sc_lv<3> > m_axi_a_AWSIZE;
    sc_out< sc_lv<2> > m_axi_a_AWBURST;
    sc_out< sc_lv<2> > m_axi_a_AWLOCK;
    sc_out< sc_lv<4> > m_axi_a_AWCACHE;
    sc_out< sc_lv<3> > m_axi_a_AWPROT;
    sc_out< sc_lv<4> > m_axi_a_AWQOS;
    sc_out< sc_lv<4> > m_axi_a_AWREGION;
    sc_out< sc_uint<C_M_AXI_A_AWUSER_WIDTH> > m_axi_a_AWUSER;
    sc_out< sc_logic > m_axi_a_WVALID;
    sc_in< sc_logic > m_axi_a_WREADY;
    sc_out< sc_uint<C_M_AXI_A_DATA_WIDTH> > m_axi_a_WDATA;
    sc_out< sc_uint<C_M_AXI_A_DATA_WIDTH/8> > m_axi_a_WSTRB;
    sc_out< sc_logic > m_axi_a_WLAST;
    sc_out< sc_uint<C_M_AXI_A_ID_WIDTH> > m_axi_a_WID;
    sc_out< sc_uint<C_M_AXI_A_WUSER_WIDTH> > m_axi_a_WUSER;
    sc_out< sc_logic > m_axi_a_ARVALID;
    sc_in< sc_logic > m_axi_a_ARREADY;
    sc_out< sc_uint<C_M_AXI_A_ADDR_WIDTH> > m_axi_a_ARADDR;
    sc_out< sc_uint<C_M_AXI_A_ID_WIDTH> > m_axi_a_ARID;
    sc_out< sc_lv<8> > m_axi_a_ARLEN;
    sc_out< sc_lv<3> > m_axi_a_ARSIZE;
    sc_out< sc_lv<2> > m_axi_a_ARBURST;
    sc_out< sc_lv<2> > m_axi_a_ARLOCK;
    sc_out< sc_lv<4> > m_axi_a_ARCACHE;
    sc_out< sc_lv<3> > m_axi_a_ARPROT;
    sc_out< sc_lv<4> > m_axi_a_ARQOS;
    sc_out< sc_lv<4> > m_axi_a_ARREGION;
    sc_out< sc_uint<C_M_AXI_A_ARUSER_WIDTH> > m_axi_a_ARUSER;
    sc_in< sc_logic > m_axi_a_RVALID;
    sc_out< sc_logic > m_axi_a_RREADY;
    sc_in< sc_uint<C_M_AXI_A_DATA_WIDTH> > m_axi_a_RDATA;
    sc_in< sc_logic > m_axi_a_RLAST;
    sc_in< sc_uint<C_M_AXI_A_ID_WIDTH> > m_axi_a_RID;
    sc_in< sc_uint<C_M_AXI_A_RUSER_WIDTH> > m_axi_a_RUSER;
    sc_in< sc_lv<2> > m_axi_a_RRESP;
    sc_in< sc_logic > m_axi_a_BVALID;
    sc_out< sc_logic > m_axi_a_BREADY;
    sc_in< sc_lv<2> > m_axi_a_BRESP;
    sc_in< sc_uint<C_M_AXI_A_ID_WIDTH> > m_axi_a_BID;
    sc_in< sc_uint<C_M_AXI_A_BUSER_WIDTH> > m_axi_a_BUSER;
    sc_in< sc_lv<32> > Offset;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const6;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<3> > ap_var_for_const3;
    sc_signal< sc_lv<2> > ap_var_for_const4;
    sc_signal< sc_lv<4> > ap_var_for_const5;
    sc_signal< sc_lv<4> > ap_var_for_const7;


    // Module declarations
    cuisr(sc_module_name name);
    SC_HAS_PROCESS(cuisr);

    ~cuisr();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    cuisr_a_m_axi<32,32,5,16,16,16,16,C_M_AXI_A_ID_WIDTH,C_M_AXI_A_ADDR_WIDTH,C_M_AXI_A_DATA_WIDTH,C_M_AXI_A_AWUSER_WIDTH,C_M_AXI_A_ARUSER_WIDTH,C_M_AXI_A_WUSER_WIDTH,C_M_AXI_A_RUSER_WIDTH,C_M_AXI_A_BUSER_WIDTH,C_M_AXI_A_TARGET_ADDR,C_M_AXI_A_USER_VALUE,C_M_AXI_A_PROT_VALUE,C_M_AXI_A_CACHE_VALUE>* cuisr_a_m_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<15> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > a_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > a_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > a_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > a_blk_n_W;
    sc_signal< sc_logic > a_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_logic > a_AWVALID;
    sc_signal< sc_logic > a_AWREADY;
    sc_signal< sc_lv<32> > a_AWADDR;
    sc_signal< sc_logic > a_WVALID;
    sc_signal< sc_logic > a_WREADY;
    sc_signal< sc_logic > a_ARVALID;
    sc_signal< sc_logic > a_ARREADY;
    sc_signal< sc_lv<32> > a_ARADDR;
    sc_signal< sc_logic > a_RVALID;
    sc_signal< sc_logic > a_RREADY;
    sc_signal< sc_lv<32> > a_RDATA;
    sc_signal< sc_logic > a_RLAST;
    sc_signal< sc_lv<1> > a_RID;
    sc_signal< sc_lv<1> > a_RUSER;
    sc_signal< sc_lv<2> > a_RRESP;
    sc_signal< sc_logic > a_BVALID;
    sc_signal< sc_logic > a_BREADY;
    sc_signal< sc_lv<2> > a_BRESP;
    sc_signal< sc_lv<1> > a_BID;
    sc_signal< sc_lv<1> > a_BUSER;
    sc_signal< sc_logic > ap_sig_ioackin_a_ARREADY;
    sc_signal< sc_lv<32> > tmp_1_fu_100_p2;
    sc_signal< sc_lv<32> > tmp_1_reg_128;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > ap_sig_ioackin_a_AWREADY;
    sc_signal< sc_lv<64> > tmp_fu_89_p1;
    sc_signal< sc_lv<64> > tmp_2_fu_106_p1;
    sc_signal< sc_logic > ap_reg_ioackin_a_ARREADY;
    sc_signal< sc_logic > ap_reg_ioackin_a_AWREADY;
    sc_signal< sc_logic > ap_sig_ioackin_a_WREADY;
    sc_signal< sc_logic > ap_reg_ioackin_a_WREADY;
    sc_signal< sc_lv<32> > Offset_assign_fu_42;
    sc_signal< sc_lv<15> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<15> ap_ST_fsm_state1;
    static const sc_lv<15> ap_ST_fsm_state2;
    static const sc_lv<15> ap_ST_fsm_state3;
    static const sc_lv<15> ap_ST_fsm_state4;
    static const sc_lv<15> ap_ST_fsm_state5;
    static const sc_lv<15> ap_ST_fsm_state6;
    static const sc_lv<15> ap_ST_fsm_state7;
    static const sc_lv<15> ap_ST_fsm_state8;
    static const sc_lv<15> ap_ST_fsm_state9;
    static const sc_lv<15> ap_ST_fsm_state10;
    static const sc_lv<15> ap_ST_fsm_state11;
    static const sc_lv<15> ap_ST_fsm_state12;
    static const sc_lv<15> ap_ST_fsm_state13;
    static const sc_lv<15> ap_ST_fsm_state14;
    static const sc_lv<15> ap_ST_fsm_state15;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_E;
    static const int C_M_AXI_A_TARGET_ADDR;
    static const int C_M_AXI_A_USER_VALUE;
    static const int C_M_AXI_A_PROT_VALUE;
    static const int C_M_AXI_A_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const7();
    void thread_ap_clk_no_reset_();
    void thread_a_ARADDR();
    void thread_a_ARVALID();
    void thread_a_AWADDR();
    void thread_a_AWVALID();
    void thread_a_BREADY();
    void thread_a_RREADY();
    void thread_a_WVALID();
    void thread_a_blk_n_AR();
    void thread_a_blk_n_AW();
    void thread_a_blk_n_B();
    void thread_a_blk_n_R();
    void thread_a_blk_n_W();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_ioackin_a_ARREADY();
    void thread_ap_sig_ioackin_a_AWREADY();
    void thread_ap_sig_ioackin_a_WREADY();
    void thread_tmp_1_fu_100_p2();
    void thread_tmp_2_fu_106_p1();
    void thread_tmp_fu_89_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// (c) Copyright 1986-2017, 2019 Xilinx, Inc. All rights reserved.
//
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
//
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
//
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
//
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.
////////////////////////////////////////////////////////////
// 
// ===========================================================

#include "cuisr.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic cuisr::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic cuisr::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<15> cuisr::ap_ST_fsm_state1 = "1";
const sc_lv<15> cuisr::ap_ST_fsm_state2 = "10";
const sc_lv<15> cuisr::ap_ST_fsm_state3 = "100";
const sc_lv<15> cuisr::ap_ST_fsm_state4 = "1000";
const sc_lv<15> cuisr::ap_ST_fsm_state5 = "10000";
const sc_lv<15> cuisr::ap_ST_fsm_state6 = "100000";
const sc_lv<15> cuisr::ap_ST_fsm_state7 = "1000000";
const sc_lv<15> cuisr::ap_ST_fsm_state8 = "10000000";
const sc_lv<15> cuisr::ap_ST_fsm_state9 = "100000000";
const sc_lv<15> cuisr::ap_ST_fsm_state10 = "1000000000";
const sc_lv<15> cuisr::ap_ST_fsm_state11 = "10000000000";
const sc_lv<15> cuisr::ap_ST_fsm_state12 = "100000000000";
const sc_lv<15> cuisr::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<15> cuisr::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<15> cuisr::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<32> cuisr::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> cuisr::ap_const_lv32_2 = "10";
const sc_lv<32> cuisr::ap_const_lv32_9 = "1001";
const sc_lv<32> cuisr::ap_const_lv32_8 = "1000";
const sc_lv<32> cuisr::ap_const_lv32_E = "1110";
const int cuisr::C_M_AXI_A_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int cuisr::C_M_AXI_A_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int cuisr::C_M_AXI_A_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int cuisr::C_M_AXI_A_CACHE_VALUE = "11";
const int cuisr::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> cuisr::ap_const_lv32_7 = "111";
const sc_lv<32> cuisr::ap_const_lv32_1 = "1";
const sc_lv<1> cuisr::ap_const_lv1_0 = "0";
const sc_lv<3> cuisr::ap_const_lv3_0 = "000";
const sc_lv<2> cuisr::ap_const_lv2_0 = "00";
const sc_lv<4> cuisr::ap_const_lv4_0 = "0000";
const sc_lv<4> cuisr::ap_const_lv4_F = "1111";
const sc_lv<32> cuisr::ap_const_lv32_3 = "11";
const bool cuisr::ap_const_boolean_1 = true;

cuisr::cuisr(sc_module_name name) : sc_module(name), mVcdFile(0) {
    cuisr_a_m_axi_U = new cuisr_a_m_axi<32,32,5,16,16,16,16,C_M_AXI_A_ID_WIDTH,C_M_AXI_A_ADDR_WIDTH,C_M_AXI_A_DATA_WIDTH,C_M_AXI_A_AWUSER_WIDTH,C_M_AXI_A_ARUSER_WIDTH,C_M_AXI_A_WUSER_WIDTH,C_M_AXI_A_RUSER_WIDTH,C_M_AXI_A_BUSER_WIDTH,C_M_AXI_A_TARGET_ADDR,C_M_AXI_A_USER_VALUE,C_M_AXI_A_PROT_VALUE,C_M_AXI_A_CACHE_VALUE>("cuisr_a_m_axi_U");
    cuisr_a_m_axi_U->AWVALID(m_axi_a_AWVALID);
    cuisr_a_m_axi_U->AWREADY(m_axi_a_AWREADY);
    cuisr_a_m_axi_U->AWADDR(m_axi_a_AWADDR);
    cuisr_a_m_axi_U->AWID(m_axi_a_AWID);
    cuisr_a_m_axi_U->AWLEN(m_axi_a_AWLEN);
    cuisr_a_m_axi_U->AWSIZE(m_axi_a_AWSIZE);
    cuisr_a_m_axi_U->AWBURST(m_axi_a_AWBURST);
    cuisr_a_m_axi_U->AWLOCK(m_axi_a_AWLOCK);
    cuisr_a_m_axi_U->AWCACHE(m_axi_a_AWCACHE);
    cuisr_a_m_axi_U->AWPROT(m_axi_a_AWPROT);
    cuisr_a_m_axi_U->AWQOS(m_axi_a_AWQOS);
    cuisr_a_m_axi_U->AWREGION(m_axi_a_AWREGION);
    cuisr_a_m_axi_U->AWUSER(m_axi_a_AWUSER);
    cuisr_a_m_axi_U->WVALID(m_axi_a_WVALID);
    cuisr_a_m_axi_U->WREADY(m_axi_a_WREADY);
    cuisr_a_m_axi_U->WDATA(m_axi_a_WDATA);
    cuisr_a_m_axi_U->WSTRB(m_axi_a_WSTRB);
    cuisr_a_m_axi_U->WLAST(m_axi_a_WLAST);
    cuisr_a_m_axi_U->WID(m_axi_a_WID);
    cuisr_a_m_axi_U->WUSER(m_axi_a_WUSER);
    cuisr_a_m_axi_U->ARVALID(m_axi_a_ARVALID);
    cuisr_a_m_axi_U->ARREADY(m_axi_a_ARREADY);
    cuisr_a_m_axi_U->ARADDR(m_axi_a_ARADDR);
    cuisr_a_m_axi_U->ARID(m_axi_a_ARID);
    cuisr_a_m_axi_U->ARLEN(m_axi_a_ARLEN);
    cuisr_a_m_axi_U->ARSIZE(m_axi_a_ARSIZE);
    cuisr_a_m_axi_U->ARBURST(m_axi_a_ARBURST);
    cuisr_a_m_axi_U->ARLOCK(m_axi_a_ARLOCK);
    cuisr_a_m_axi_U->ARCACHE(m_axi_a_ARCACHE);
    cuisr_a_m_axi_U->ARPROT(m_axi_a_ARPROT);
    cuisr_a_m_axi_U->ARQOS(m_axi_a_ARQOS);
    cuisr_a_m_axi_U->ARREGION(m_axi_a_ARREGION);
    cuisr_a_m_axi_U->ARUSER(m_axi_a_ARUSER);
    cuisr_a_m_axi_U->RVALID(m_axi_a_RVALID);
    cuisr_a_m_axi_U->RREADY(m_axi_a_RREADY);
    cuisr_a_m_axi_U->RDATA(m_axi_a_RDATA);
    cuisr_a_m_axi_U->RLAST(m_axi_a_RLAST);
    cuisr_a_m_axi_U->RID(m_axi_a_RID);
    cuisr_a_m_axi_U->RUSER(m_axi_a_RUSER);
    cuisr_a_m_axi_U->RRESP(m_axi_a_RRESP);
    cuisr_a_m_axi_U->BVALID(m_axi_a_BVALID);
    cuisr_a_m_axi_U->BREADY(m_axi_a_BREADY);
    cuisr_a_m_axi_U->BRESP(m_axi_a_BRESP);
    cuisr_a_m_axi_U->BID(m_axi_a_BID);
    cuisr_a_m_axi_U->BUSER(m_axi_a_BUSER);
    cuisr_a_m_axi_U->ACLK(ap_clk);
    cuisr_a_m_axi_U->ARESET(ap_rst_n_inv);
    cuisr_a_m_axi_U->ACLK_EN(ap_var_for_const0);
    cuisr_a_m_axi_U->I_ARVALID(a_ARVALID);
    cuisr_a_m_axi_U->I_ARREADY(a_ARREADY);
    cuisr_a_m_axi_U->I_ARADDR(a_ARADDR);
    cuisr_a_m_axi_U->I_ARID(ap_var_for_const1);
    cuisr_a_m_axi_U->I_ARLEN(ap_var_for_const2);
    cuisr_a_m_axi_U->I_ARSIZE(ap_var_for_const3);
    cuisr_a_m_axi_U->I_ARLOCK(ap_var_for_const4);
    cuisr_a_m_axi_U->I_ARCACHE(ap_var_for_const5);
    cuisr_a_m_axi_U->I_ARQOS(ap_var_for_const5);
    cuisr_a_m_axi_U->I_ARPROT(ap_var_for_const3);
    cuisr_a_m_axi_U->I_ARUSER(ap_var_for_const1);
    cuisr_a_m_axi_U->I_ARBURST(ap_var_for_const4);
    cuisr_a_m_axi_U->I_ARREGION(ap_var_for_const5);
    cuisr_a_m_axi_U->I_RVALID(a_RVALID);
    cuisr_a_m_axi_U->I_RREADY(a_RREADY);
    cuisr_a_m_axi_U->I_RDATA(a_RDATA);
    cuisr_a_m_axi_U->I_RID(a_RID);
    cuisr_a_m_axi_U->I_RUSER(a_RUSER);
    cuisr_a_m_axi_U->I_RRESP(a_RRESP);
    cuisr_a_m_axi_U->I_RLAST(a_RLAST);
    cuisr_a_m_axi_U->I_AWVALID(a_AWVALID);
    cuisr_a_m_axi_U->I_AWREADY(a_AWREADY);
    cuisr_a_m_axi_U->I_AWADDR(a_AWADDR);
    cuisr_a_m_axi_U->I_AWID(ap_var_for_const1);
    cuisr_a_m_axi_U->I_AWLEN(ap_var_for_const2);
    cuisr_a_m_axi_U->I_AWSIZE(ap_var_for_const3);
    cuisr_a_m_axi_U->I_AWLOCK(ap_var_for_const4);
    cuisr_a_m_axi_U->I_AWCACHE(ap_var_for_const5);
    cuisr_a_m_axi_U->I_AWQOS(ap_var_for_const5);
    cuisr_a_m_axi_U->I_AWPROT(ap_var_for_const3);
    cuisr_a_m_axi_U->I_AWUSER(ap_var_for_const1);
    cuisr_a_m_axi_U->I_AWBURST(ap_var_for_const4);
    cuisr_a_m_axi_U->I_AWREGION(ap_var_for_const5);
    cuisr_a_m_axi_U->I_WVALID(a_WVALID);
    cuisr_a_m_axi_U->I_WREADY(a_WREADY);
    cuisr_a_m_axi_U->I_WDATA(ap_var_for_const2);
    cuisr_a_m_axi_U->I_WID(ap_var_for_const1);
    cuisr_a_m_axi_U->I_WUSER(ap_var_for_const1);
    cuisr_a_m_axi_U->I_WLAST(ap_var_for_const6);
    cuisr_a_m_axi_U->I_WSTRB(ap_var_for_const7);
    cuisr_a_m_axi_U->I_BVALID(a_BVALID);
    cuisr_a_m_axi_U->I_BREADY(a_BREADY);
    cuisr_a_m_axi_U->I_BRESP(a_BRESP);
    cuisr_a_m_axi_U->I_BID(a_BID);
    cuisr_a_m_axi_U->I_BUSER(a_BUSER);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_ARADDR);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_89_p1 );
    sensitive << ( ap_reg_ioackin_a_ARREADY );

    SC_METHOD(thread_a_ARVALID);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_reg_ioackin_a_ARREADY );

    SC_METHOD(thread_a_AWADDR);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_2_fu_106_p1 );
    sensitive << ( ap_reg_ioackin_a_AWREADY );

    SC_METHOD(thread_a_AWVALID);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_reg_ioackin_a_AWREADY );

    SC_METHOD(thread_a_BREADY);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( a_BVALID );

    SC_METHOD(thread_a_RREADY);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( a_RVALID );
    sensitive << ( ap_sig_ioackin_a_WREADY );

    SC_METHOD(thread_a_WVALID);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( a_RVALID );
    sensitive << ( ap_reg_ioackin_a_WREADY );

    SC_METHOD(thread_a_blk_n_AR);
    sensitive << ( m_axi_a_ARREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_a_blk_n_AW);
    sensitive << ( m_axi_a_AWREADY );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_a_blk_n_B);
    sensitive << ( m_axi_a_BVALID );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_a_blk_n_R);
    sensitive << ( m_axi_a_RVALID );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_a_blk_n_W);
    sensitive << ( m_axi_a_WREADY );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( a_BVALID );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( a_BVALID );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_a_ARREADY);
    sensitive << ( a_ARREADY );
    sensitive << ( ap_reg_ioackin_a_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_a_AWREADY);
    sensitive << ( a_AWREADY );
    sensitive << ( ap_reg_ioackin_a_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_a_WREADY);
    sensitive << ( a_WREADY );
    sensitive << ( ap_reg_ioackin_a_WREADY );

    SC_METHOD(thread_tmp_1_fu_100_p2);
    sensitive << ( Offset_assign_fu_42 );

    SC_METHOD(thread_tmp_2_fu_106_p1);
    sensitive << ( tmp_1_reg_128 );

    SC_METHOD(thread_tmp_fu_89_p1);
    sensitive << ( Offset_assign_fu_42 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( a_RVALID );
    sensitive << ( a_BVALID );
    sensitive << ( ap_sig_ioackin_a_ARREADY );
    sensitive << ( ap_sig_ioackin_a_AWREADY );
    sensitive << ( ap_sig_ioackin_a_WREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const7);

    ap_CS_fsm = "000000000000001";
    ap_reg_ioackin_a_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_a_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_a_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "cuisr_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_a_AWVALID, "(port)m_axi_a_AWVALID");
    sc_trace(mVcdFile, m_axi_a_AWREADY, "(port)m_axi_a_AWREADY");
    sc_trace(mVcdFile, m_axi_a_AWADDR, "(port)m_axi_a_AWADDR");
    sc_trace(mVcdFile, m_axi_a_AWID, "(port)m_axi_a_AWID");
    sc_trace(mVcdFile, m_axi_a_AWLEN, "(port)m_axi_a_AWLEN");
    sc_trace(mVcdFile, m_axi_a_AWSIZE, "(port)m_axi_a_AWSIZE");
    sc_trace(mVcdFile, m_axi_a_AWBURST, "(port)m_axi_a_AWBURST");
    sc_trace(mVcdFile, m_axi_a_AWLOCK, "(port)m_axi_a_AWLOCK");
    sc_trace(mVcdFile, m_axi_a_AWCACHE, "(port)m_axi_a_AWCACHE");
    sc_trace(mVcdFile, m_axi_a_AWPROT, "(port)m_axi_a_AWPROT");
    sc_trace(mVcdFile, m_axi_a_AWQOS, "(port)m_axi_a_AWQOS");
    sc_trace(mVcdFile, m_axi_a_AWREGION, "(port)m_axi_a_AWREGION");
    sc_trace(mVcdFile, m_axi_a_AWUSER, "(port)m_axi_a_AWUSER");
    sc_trace(mVcdFile, m_axi_a_WVALID, "(port)m_axi_a_WVALID");
    sc_trace(mVcdFile, m_axi_a_WREADY, "(port)m_axi_a_WREADY");
    sc_trace(mVcdFile, m_axi_a_WDATA, "(port)m_axi_a_WDATA");
    sc_trace(mVcdFile, m_axi_a_WSTRB, "(port)m_axi_a_WSTRB");
    sc_trace(mVcdFile, m_axi_a_WLAST, "(port)m_axi_a_WLAST");
    sc_trace(mVcdFile, m_axi_a_WID, "(port)m_axi_a_WID");
    sc_trace(mVcdFile, m_axi_a_WUSER, "(port)m_axi_a_WUSER");
    sc_trace(mVcdFile, m_axi_a_ARVALID, "(port)m_axi_a_ARVALID");
    sc_trace(mVcdFile, m_axi_a_ARREADY, "(port)m_axi_a_ARREADY");
    sc_trace(mVcdFile, m_axi_a_ARADDR, "(port)m_axi_a_ARADDR");
    sc_trace(mVcdFile, m_axi_a_ARID, "(port)m_axi_a_ARID");
    sc_trace(mVcdFile, m_axi_a_ARLEN, "(port)m_axi_a_ARLEN");
    sc_trace(mVcdFile, m_axi_a_ARSIZE, "(port)m_axi_a_ARSIZE");
    sc_trace(mVcdFile, m_axi_a_ARBURST, "(port)m_axi_a_ARBURST");
    sc_trace(mVcdFile, m_axi_a_ARLOCK, "(port)m_axi_a_ARLOCK");
    sc_trace(mVcdFile, m_axi_a_ARCACHE, "(port)m_axi_a_ARCACHE");
    sc_trace(mVcdFile, m_axi_a_ARPROT, "(port)m_axi_a_ARPROT");
    sc_trace(mVcdFile, m_axi_a_ARQOS, "(port)m_axi_a_ARQOS");
    sc_trace(mVcdFile, m_axi_a_ARREGION, "(port)m_axi_a_ARREGION");
    sc_trace(mVcdFile, m_axi_a_ARUSER, "(port)m_axi_a_ARUSER");
    sc_trace(mVcdFile, m_axi_a_RVALID, "(port)m_axi_a_RVALID");
    sc_trace(mVcdFile, m_axi_a_RREADY, "(port)m_axi_a_RREADY");
    sc_trace(mVcdFile, m_axi_a_RDATA, "(port)m_axi_a_RDATA");
    sc_trace(mVcdFile, m_axi_a_RLAST, "(port)m_axi_a_RLAST");
    sc_trace(mVcdFile, m_axi_a_RID, "(port)m_axi_a_RID");
    sc_trace(mVcdFile, m_axi_a_RUSER, "(port)m_axi_a_RUSER");
    sc_trace(mVcdFile, m_axi_a_RRESP, "(port)m_axi_a_RRESP");
    sc_trace(mVcdFile, m_axi_a_BVALID, "(port)m_axi_a_BVALID");
    sc_trace(mVcdFile, m_axi_a_BREADY, "(port)m_axi_a_BREADY");
    sc_trace(mVcdFile, m_axi_a_BRESP, "(port)m_axi_a_BRESP");
    sc_trace(mVcdFile, m_axi_a_BID, "(port)m_axi_a_BID");
    sc_trace(mVcdFile, m_axi_a_BUSER, "(port)m_axi_a_BUSER");
    sc_trace(mVcdFile, Offset, "(port)Offset");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, a_blk_n_AR, "a_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, a_blk_n_R, "a_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, a_blk_n_AW, "a_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, a_blk_n_W, "a_blk_n_W");
    sc_trace(mVcdFile, a_blk_n_B, "a_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, a_AWVALID, "a_AWVALID");
    sc_trace(mVcdFile, a_AWREADY, "a_AWREADY");
    sc_trace(mVcdFile, a_AWADDR, "a_AWADDR");
    sc_trace(mVcdFile, a_WVALID, "a_WVALID");
    sc_trace(mVcdFile, a_WREADY, "a_WREADY");
    sc_trace(mVcdFile, a_ARVALID, "a_ARVALID");
    sc_trace(mVcdFile, a_ARREADY, "a_ARREADY");
    sc_trace(mVcdFile, a_ARADDR, "a_ARADDR");
    sc_trace(mVcdFile, a_RVALID, "a_RVALID");
    sc_trace(mVcdFile, a_RREADY, "a_RREADY");
    sc_trace(mVcdFile, a_RDATA, "a_RDATA");
    sc_trace(mVcdFile, a_RLAST, "a_RLAST");
    sc_trace(mVcdFile, a_RID, "a_RID");
    sc_trace(mVcdFile, a_RUSER, "a_RUSER");
    sc_trace(mVcdFile, a_RRESP, "a_RRESP");
    sc_trace(mVcdFile, a_BVALID, "a_BVALID");
    sc_trace(mVcdFile, a_BREADY, "a_BREADY");
    sc_trace(mVcdFile, a_BRESP, "a_BRESP");
    sc_trace(mVcdFile, a_BID, "a_BID");
    sc_trace(mVcdFile, a_BUSER, "a_BUSER");
    sc_trace(mVcdFile, ap_sig_ioackin_a_ARREADY, "ap_sig_ioackin_a_ARREADY");
    sc_trace(mVcdFile, tmp_1_fu_100_p2, "tmp_1_fu_100_p2");
    sc_trace(mVcdFile, tmp_1_reg_128, "tmp_1_reg_128");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_sig_ioackin_a_AWREADY, "ap_sig_ioackin_a_AWREADY");
    sc_trace(mVcdFile, tmp_fu_89_p1, "tmp_fu_89_p1");
    sc_trace(mVcdFile, tmp_2_fu_106_p1, "tmp_2_fu_106_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_a_ARREADY, "ap_reg_ioackin_a_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_a_AWREADY, "ap_reg_ioackin_a_AWREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_a_WREADY, "ap_sig_ioackin_a_WREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_a_WREADY, "ap_reg_ioackin_a_WREADY");
    sc_trace(mVcdFile, Offset_assign_fu_42, "Offset_assign_fu_42");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("cuisr.hdltvin.dat");
    mHdltvoutHandle.open("cuisr.hdltvout.dat");
}

cuisr::~cuisr() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete cuisr_a_m_axi_U;
}

void cuisr::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void cuisr::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void cuisr::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_1;
}

void cuisr::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void cuisr::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void cuisr::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void cuisr::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void cuisr::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv4_F;
}

void cuisr::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_a_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_a_ARREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_a_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, a_ARREADY.read())) {
                ap_reg_ioackin_a_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_a_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_a_AWREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_a_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, a_AWREADY.read())) {
                ap_reg_ioackin_a_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_a_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, a_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_WREADY.read()))) {
                ap_reg_ioackin_a_WREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, a_WREADY.read()) && 
                        esl_seteq<1,1,1>(a_RVALID.read(), ap_const_logic_1))) {
                ap_reg_ioackin_a_WREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        Offset_assign_fu_42 = Offset.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tmp_1_reg_128 = tmp_1_fu_100_p2.read();
    }
}

void cuisr::thread_a_ARADDR() {
    a_ARADDR =  (sc_lv<32>) (tmp_fu_89_p1.read());
}

void cuisr::thread_a_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_a_ARREADY.read()))) {
        a_ARVALID = ap_const_logic_1;
    } else {
        a_ARVALID = ap_const_logic_0;
    }
}

void cuisr::thread_a_AWADDR() {
    a_AWADDR =  (sc_lv<32>) (tmp_2_fu_106_p1.read());
}

void cuisr::thread_a_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_a_AWREADY.read()))) {
        a_AWVALID = ap_const_logic_1;
    } else {
        a_AWVALID = ap_const_logic_0;
    }
}

void cuisr::thread_a_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(a_BVALID.read(), ap_const_logic_1))) {
        a_BREADY = ap_const_logic_1;
    } else {
        a_BREADY = ap_const_logic_0;
    }
}

void cuisr::thread_a_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, a_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_WREADY.read())))) {
        a_RREADY = ap_const_logic_1;
    } else {
        a_RREADY = ap_const_logic_0;
    }
}

void cuisr::thread_a_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(a_RVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_a_WREADY.read()))) {
        a_WVALID = ap_const_logic_1;
    } else {
        a_WVALID = ap_const_logic_0;
    }
}

void cuisr::thread_a_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        a_blk_n_AR = m_axi_a_ARREADY.read();
    } else {
        a_blk_n_AR = ap_const_logic_1;
    }
}

void cuisr::thread_a_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        a_blk_n_AW = m_axi_a_AWREADY.read();
    } else {
        a_blk_n_AW = ap_const_logic_1;
    }
}

void cuisr::thread_a_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        a_blk_n_B = m_axi_a_BVALID.read();
    } else {
        a_blk_n_B = ap_const_logic_1;
    }
}

void cuisr::thread_a_blk_n_R() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        a_blk_n_R = m_axi_a_RVALID.read();
    } else {
        a_blk_n_R = ap_const_logic_1;
    }
}

void cuisr::thread_a_blk_n_W() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        a_blk_n_W = m_axi_a_WREADY.read();
    } else {
        a_blk_n_W = ap_const_logic_1;
    }
}

void cuisr::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void cuisr::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void cuisr::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void cuisr::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void cuisr::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void cuisr::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void cuisr::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(a_BVALID.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void cuisr::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void cuisr::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(a_BVALID.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void cuisr::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void cuisr::thread_ap_sig_ioackin_a_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_a_ARREADY.read())) {
        ap_sig_ioackin_a_ARREADY = a_ARREADY.read();
    } else {
        ap_sig_ioackin_a_ARREADY = ap_const_logic_1;
    }
}

void cuisr::thread_ap_sig_ioackin_a_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_a_AWREADY.read())) {
        ap_sig_ioackin_a_AWREADY = a_AWREADY.read();
    } else {
        ap_sig_ioackin_a_AWREADY = ap_const_logic_1;
    }
}

void cuisr::thread_ap_sig_ioackin_a_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_a_WREADY.read())) {
        ap_sig_ioackin_a_WREADY = a_WREADY.read();
    } else {
        ap_sig_ioackin_a_WREADY = ap_const_logic_1;
    }
}

void cuisr::thread_tmp_1_fu_100_p2() {
    tmp_1_fu_100_p2 = (!Offset_assign_fu_42.read().is_01() || !ap_const_lv32_3.is_01())? sc_lv<32>(): (sc_biguint<32>(Offset_assign_fu_42.read()) + sc_biguint<32>(ap_const_lv32_3));
}

void cuisr::thread_tmp_2_fu_106_p1() {
    tmp_2_fu_106_p1 = esl_sext<64,32>(tmp_1_reg_128.read());
}

void cuisr::thread_tmp_fu_89_p1() {
    tmp_fu_89_p1 = esl_sext<64,32>(Offset_assign_fu_42.read());
}

void cuisr::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_a_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_a_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, a_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_a_WREADY.read())))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(a_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXX";
            break;
    }
}

void cuisr::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWVALID\" :  \"" << m_axi_a_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_AWREADY\" :  \"" << m_axi_a_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWADDR\" :  \"" << m_axi_a_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWID\" :  \"" << m_axi_a_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWLEN\" :  \"" << m_axi_a_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWSIZE\" :  \"" << m_axi_a_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWBURST\" :  \"" << m_axi_a_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWLOCK\" :  \"" << m_axi_a_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWCACHE\" :  \"" << m_axi_a_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWPROT\" :  \"" << m_axi_a_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWQOS\" :  \"" << m_axi_a_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWREGION\" :  \"" << m_axi_a_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_AWUSER\" :  \"" << m_axi_a_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_WVALID\" :  \"" << m_axi_a_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_WREADY\" :  \"" << m_axi_a_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_WDATA\" :  \"" << m_axi_a_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_WSTRB\" :  \"" << m_axi_a_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_WLAST\" :  \"" << m_axi_a_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_WID\" :  \"" << m_axi_a_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_WUSER\" :  \"" << m_axi_a_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARVALID\" :  \"" << m_axi_a_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_ARREADY\" :  \"" << m_axi_a_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARADDR\" :  \"" << m_axi_a_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARID\" :  \"" << m_axi_a_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARLEN\" :  \"" << m_axi_a_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARSIZE\" :  \"" << m_axi_a_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARBURST\" :  \"" << m_axi_a_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARLOCK\" :  \"" << m_axi_a_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARCACHE\" :  \"" << m_axi_a_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARPROT\" :  \"" << m_axi_a_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARQOS\" :  \"" << m_axi_a_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARREGION\" :  \"" << m_axi_a_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_ARUSER\" :  \"" << m_axi_a_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_RVALID\" :  \"" << m_axi_a_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_RREADY\" :  \"" << m_axi_a_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_RDATA\" :  \"" << m_axi_a_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_RLAST\" :  \"" << m_axi_a_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_RID\" :  \"" << m_axi_a_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_RUSER\" :  \"" << m_axi_a_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_RRESP\" :  \"" << m_axi_a_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_BVALID\" :  \"" << m_axi_a_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_a_BREADY\" :  \"" << m_axi_a_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_BRESP\" :  \"" << m_axi_a_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_BID\" :  \"" << m_axi_a_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_a_BUSER\" :  \"" << m_axi_a_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Offset\" :  \"" << Offset.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}


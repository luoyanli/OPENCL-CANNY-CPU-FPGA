// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2.0
// (c) Copyright 1986-2019 Xilinx, Inc. All rights reserved.
//
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
//
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
//
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
//
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.
////////////////////////////////////////////////////////////
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="copy_kernel_copy_kernel,hls_ip_2018_2_0,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-fsgd2104-2L-e,HLS_INPUT_CLOCK=3.333330,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.433331,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=2727,HLS_SYN_LUT=3472}" *)

module copy_kernel_copy_kernel (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 268'd1;
parameter    ap_ST_fsm_state2 = 268'd2;
parameter    ap_ST_fsm_state3 = 268'd4;
parameter    ap_ST_fsm_state4 = 268'd8;
parameter    ap_ST_fsm_state5 = 268'd16;
parameter    ap_ST_fsm_state6 = 268'd32;
parameter    ap_ST_fsm_state7 = 268'd64;
parameter    ap_ST_fsm_state8 = 268'd128;
parameter    ap_ST_fsm_state9 = 268'd256;
parameter    ap_ST_fsm_state10 = 268'd512;
parameter    ap_ST_fsm_state11 = 268'd1024;
parameter    ap_ST_fsm_state12 = 268'd2048;
parameter    ap_ST_fsm_state13 = 268'd4096;
parameter    ap_ST_fsm_state14 = 268'd8192;
parameter    ap_ST_fsm_state15 = 268'd16384;
parameter    ap_ST_fsm_state16 = 268'd32768;
parameter    ap_ST_fsm_state17 = 268'd65536;
parameter    ap_ST_fsm_state18 = 268'd131072;
parameter    ap_ST_fsm_state19 = 268'd262144;
parameter    ap_ST_fsm_state20 = 268'd524288;
parameter    ap_ST_fsm_state21 = 268'd1048576;
parameter    ap_ST_fsm_state22 = 268'd2097152;
parameter    ap_ST_fsm_state23 = 268'd4194304;
parameter    ap_ST_fsm_state24 = 268'd8388608;
parameter    ap_ST_fsm_state25 = 268'd16777216;
parameter    ap_ST_fsm_state26 = 268'd33554432;
parameter    ap_ST_fsm_state27 = 268'd67108864;
parameter    ap_ST_fsm_state28 = 268'd134217728;
parameter    ap_ST_fsm_state29 = 268'd268435456;
parameter    ap_ST_fsm_state30 = 268'd536870912;
parameter    ap_ST_fsm_state31 = 268'd1073741824;
parameter    ap_ST_fsm_state32 = 268'd2147483648;
parameter    ap_ST_fsm_state33 = 268'd4294967296;
parameter    ap_ST_fsm_state34 = 268'd8589934592;
parameter    ap_ST_fsm_state35 = 268'd17179869184;
parameter    ap_ST_fsm_state36 = 268'd34359738368;
parameter    ap_ST_fsm_state37 = 268'd68719476736;
parameter    ap_ST_fsm_state38 = 268'd137438953472;
parameter    ap_ST_fsm_state39 = 268'd274877906944;
parameter    ap_ST_fsm_state40 = 268'd549755813888;
parameter    ap_ST_fsm_state41 = 268'd1099511627776;
parameter    ap_ST_fsm_state42 = 268'd2199023255552;
parameter    ap_ST_fsm_state43 = 268'd4398046511104;
parameter    ap_ST_fsm_state44 = 268'd8796093022208;
parameter    ap_ST_fsm_state45 = 268'd17592186044416;
parameter    ap_ST_fsm_state46 = 268'd35184372088832;
parameter    ap_ST_fsm_state47 = 268'd70368744177664;
parameter    ap_ST_fsm_state48 = 268'd140737488355328;
parameter    ap_ST_fsm_state49 = 268'd281474976710656;
parameter    ap_ST_fsm_state50 = 268'd562949953421312;
parameter    ap_ST_fsm_state51 = 268'd1125899906842624;
parameter    ap_ST_fsm_state52 = 268'd2251799813685248;
parameter    ap_ST_fsm_state53 = 268'd4503599627370496;
parameter    ap_ST_fsm_state54 = 268'd9007199254740992;
parameter    ap_ST_fsm_state55 = 268'd18014398509481984;
parameter    ap_ST_fsm_state56 = 268'd36028797018963968;
parameter    ap_ST_fsm_state57 = 268'd72057594037927936;
parameter    ap_ST_fsm_state58 = 268'd144115188075855872;
parameter    ap_ST_fsm_state59 = 268'd288230376151711744;
parameter    ap_ST_fsm_state60 = 268'd576460752303423488;
parameter    ap_ST_fsm_state61 = 268'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 268'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 268'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 268'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 268'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 268'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 268'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 268'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 268'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 268'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 268'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 268'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 268'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 268'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 268'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 268'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 268'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 268'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 268'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 268'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 268'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 268'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 268'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 268'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 268'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 268'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 268'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 268'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 268'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 268'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 268'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 268'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 268'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 268'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 268'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 268'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 268'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 268'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 268'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 268'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 268'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 268'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 268'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 268'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 268'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 268'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 268'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 268'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 268'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 268'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 268'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 268'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 268'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 268'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 268'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 268'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 268'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 268'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 268'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 268'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 268'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 268'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 268'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 268'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 268'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 268'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 268'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 268'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 268'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 268'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 268'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 268'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 268'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 268'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 268'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_pp0_stage0 = 268'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state139 = 268'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state140 = 268'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state141 = 268'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state142 = 268'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state143 = 268'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state144 = 268'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state145 = 268'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state146 = 268'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state147 = 268'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state148 = 268'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state149 = 268'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state150 = 268'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state151 = 268'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state152 = 268'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state153 = 268'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state154 = 268'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state155 = 268'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state156 = 268'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state157 = 268'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state158 = 268'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state159 = 268'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state160 = 268'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state161 = 268'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state162 = 268'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state163 = 268'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state164 = 268'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state165 = 268'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state166 = 268'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state167 = 268'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state168 = 268'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state169 = 268'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state170 = 268'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state171 = 268'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state172 = 268'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state173 = 268'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state174 = 268'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state175 = 268'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state176 = 268'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state177 = 268'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state178 = 268'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state179 = 268'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state180 = 268'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state181 = 268'd383123885216472214589586756787577295904684780545900544;
parameter    ap_ST_fsm_state182 = 268'd766247770432944429179173513575154591809369561091801088;
parameter    ap_ST_fsm_state183 = 268'd1532495540865888858358347027150309183618739122183602176;
parameter    ap_ST_fsm_state184 = 268'd3064991081731777716716694054300618367237478244367204352;
parameter    ap_ST_fsm_state185 = 268'd6129982163463555433433388108601236734474956488734408704;
parameter    ap_ST_fsm_state186 = 268'd12259964326927110866866776217202473468949912977468817408;
parameter    ap_ST_fsm_state187 = 268'd24519928653854221733733552434404946937899825954937634816;
parameter    ap_ST_fsm_state188 = 268'd49039857307708443467467104868809893875799651909875269632;
parameter    ap_ST_fsm_state189 = 268'd98079714615416886934934209737619787751599303819750539264;
parameter    ap_ST_fsm_state190 = 268'd196159429230833773869868419475239575503198607639501078528;
parameter    ap_ST_fsm_state191 = 268'd392318858461667547739736838950479151006397215279002157056;
parameter    ap_ST_fsm_state192 = 268'd784637716923335095479473677900958302012794430558004314112;
parameter    ap_ST_fsm_state193 = 268'd1569275433846670190958947355801916604025588861116008628224;
parameter    ap_ST_fsm_state194 = 268'd3138550867693340381917894711603833208051177722232017256448;
parameter    ap_ST_fsm_state195 = 268'd6277101735386680763835789423207666416102355444464034512896;
parameter    ap_ST_fsm_state196 = 268'd12554203470773361527671578846415332832204710888928069025792;
parameter    ap_ST_fsm_state197 = 268'd25108406941546723055343157692830665664409421777856138051584;
parameter    ap_ST_fsm_state198 = 268'd50216813883093446110686315385661331328818843555712276103168;
parameter    ap_ST_fsm_state199 = 268'd100433627766186892221372630771322662657637687111424552206336;
parameter    ap_ST_fsm_state200 = 268'd200867255532373784442745261542645325315275374222849104412672;
parameter    ap_ST_fsm_state201 = 268'd401734511064747568885490523085290650630550748445698208825344;
parameter    ap_ST_fsm_state202 = 268'd803469022129495137770981046170581301261101496891396417650688;
parameter    ap_ST_fsm_state203 = 268'd1606938044258990275541962092341162602522202993782792835301376;
parameter    ap_ST_fsm_state204 = 268'd3213876088517980551083924184682325205044405987565585670602752;
parameter    ap_ST_fsm_state205 = 268'd6427752177035961102167848369364650410088811975131171341205504;
parameter    ap_ST_fsm_state206 = 268'd12855504354071922204335696738729300820177623950262342682411008;
parameter    ap_ST_fsm_state207 = 268'd25711008708143844408671393477458601640355247900524685364822016;
parameter    ap_ST_fsm_state208 = 268'd51422017416287688817342786954917203280710495801049370729644032;
parameter    ap_ST_fsm_state209 = 268'd102844034832575377634685573909834406561420991602098741459288064;
parameter    ap_ST_fsm_state210 = 268'd205688069665150755269371147819668813122841983204197482918576128;
parameter    ap_ST_fsm_state211 = 268'd411376139330301510538742295639337626245683966408394965837152256;
parameter    ap_ST_fsm_state212 = 268'd822752278660603021077484591278675252491367932816789931674304512;
parameter    ap_ST_fsm_state213 = 268'd1645504557321206042154969182557350504982735865633579863348609024;
parameter    ap_ST_fsm_state214 = 268'd3291009114642412084309938365114701009965471731267159726697218048;
parameter    ap_ST_fsm_state215 = 268'd6582018229284824168619876730229402019930943462534319453394436096;
parameter    ap_ST_fsm_state216 = 268'd13164036458569648337239753460458804039861886925068638906788872192;
parameter    ap_ST_fsm_state217 = 268'd26328072917139296674479506920917608079723773850137277813577744384;
parameter    ap_ST_fsm_state218 = 268'd52656145834278593348959013841835216159447547700274555627155488768;
parameter    ap_ST_fsm_state219 = 268'd105312291668557186697918027683670432318895095400549111254310977536;
parameter    ap_ST_fsm_state220 = 268'd210624583337114373395836055367340864637790190801098222508621955072;
parameter    ap_ST_fsm_state221 = 268'd421249166674228746791672110734681729275580381602196445017243910144;
parameter    ap_ST_fsm_state222 = 268'd842498333348457493583344221469363458551160763204392890034487820288;
parameter    ap_ST_fsm_state223 = 268'd1684996666696914987166688442938726917102321526408785780068975640576;
parameter    ap_ST_fsm_state224 = 268'd3369993333393829974333376885877453834204643052817571560137951281152;
parameter    ap_ST_fsm_state225 = 268'd6739986666787659948666753771754907668409286105635143120275902562304;
parameter    ap_ST_fsm_state226 = 268'd13479973333575319897333507543509815336818572211270286240551805124608;
parameter    ap_ST_fsm_state227 = 268'd26959946667150639794667015087019630673637144422540572481103610249216;
parameter    ap_ST_fsm_state228 = 268'd53919893334301279589334030174039261347274288845081144962207220498432;
parameter    ap_ST_fsm_state229 = 268'd107839786668602559178668060348078522694548577690162289924414440996864;
parameter    ap_ST_fsm_state230 = 268'd215679573337205118357336120696157045389097155380324579848828881993728;
parameter    ap_ST_fsm_state231 = 268'd431359146674410236714672241392314090778194310760649159697657763987456;
parameter    ap_ST_fsm_state232 = 268'd862718293348820473429344482784628181556388621521298319395315527974912;
parameter    ap_ST_fsm_state233 = 268'd1725436586697640946858688965569256363112777243042596638790631055949824;
parameter    ap_ST_fsm_state234 = 268'd3450873173395281893717377931138512726225554486085193277581262111899648;
parameter    ap_ST_fsm_state235 = 268'd6901746346790563787434755862277025452451108972170386555162524223799296;
parameter    ap_ST_fsm_state236 = 268'd13803492693581127574869511724554050904902217944340773110325048447598592;
parameter    ap_ST_fsm_state237 = 268'd27606985387162255149739023449108101809804435888681546220650096895197184;
parameter    ap_ST_fsm_state238 = 268'd55213970774324510299478046898216203619608871777363092441300193790394368;
parameter    ap_ST_fsm_state239 = 268'd110427941548649020598956093796432407239217743554726184882600387580788736;
parameter    ap_ST_fsm_state240 = 268'd220855883097298041197912187592864814478435487109452369765200775161577472;
parameter    ap_ST_fsm_state241 = 268'd441711766194596082395824375185729628956870974218904739530401550323154944;
parameter    ap_ST_fsm_state242 = 268'd883423532389192164791648750371459257913741948437809479060803100646309888;
parameter    ap_ST_fsm_state243 = 268'd1766847064778384329583297500742918515827483896875618958121606201292619776;
parameter    ap_ST_fsm_state244 = 268'd3533694129556768659166595001485837031654967793751237916243212402585239552;
parameter    ap_ST_fsm_state245 = 268'd7067388259113537318333190002971674063309935587502475832486424805170479104;
parameter    ap_ST_fsm_state246 = 268'd14134776518227074636666380005943348126619871175004951664972849610340958208;
parameter    ap_ST_fsm_state247 = 268'd28269553036454149273332760011886696253239742350009903329945699220681916416;
parameter    ap_ST_fsm_state248 = 268'd56539106072908298546665520023773392506479484700019806659891398441363832832;
parameter    ap_ST_fsm_state249 = 268'd113078212145816597093331040047546785012958969400039613319782796882727665664;
parameter    ap_ST_fsm_state250 = 268'd226156424291633194186662080095093570025917938800079226639565593765455331328;
parameter    ap_ST_fsm_state251 = 268'd452312848583266388373324160190187140051835877600158453279131187530910662656;
parameter    ap_ST_fsm_state252 = 268'd904625697166532776746648320380374280103671755200316906558262375061821325312;
parameter    ap_ST_fsm_state253 = 268'd1809251394333065553493296640760748560207343510400633813116524750123642650624;
parameter    ap_ST_fsm_state254 = 268'd3618502788666131106986593281521497120414687020801267626233049500247285301248;
parameter    ap_ST_fsm_state255 = 268'd7237005577332262213973186563042994240829374041602535252466099000494570602496;
parameter    ap_ST_fsm_state256 = 268'd14474011154664524427946373126085988481658748083205070504932198000989141204992;
parameter    ap_ST_fsm_state257 = 268'd28948022309329048855892746252171976963317496166410141009864396001978282409984;
parameter    ap_ST_fsm_state258 = 268'd57896044618658097711785492504343953926634992332820282019728792003956564819968;
parameter    ap_ST_fsm_state259 = 268'd115792089237316195423570985008687907853269984665640564039457584007913129639936;
parameter    ap_ST_fsm_state260 = 268'd231584178474632390847141970017375815706539969331281128078915168015826259279872;
parameter    ap_ST_fsm_state261 = 268'd463168356949264781694283940034751631413079938662562256157830336031652518559744;
parameter    ap_ST_fsm_state262 = 268'd926336713898529563388567880069503262826159877325124512315660672063305037119488;
parameter    ap_ST_fsm_state263 = 268'd1852673427797059126777135760139006525652319754650249024631321344126610074238976;
parameter    ap_ST_fsm_state264 = 268'd3705346855594118253554271520278013051304639509300498049262642688253220148477952;
parameter    ap_ST_fsm_state265 = 268'd7410693711188236507108543040556026102609279018600996098525285376506440296955904;
parameter    ap_ST_fsm_state266 = 268'd14821387422376473014217086081112052205218558037201992197050570753012880593911808;
parameter    ap_ST_fsm_state267 = 268'd29642774844752946028434172162224104410437116074403984394101141506025761187823616;
parameter    ap_ST_fsm_state268 = 268'd59285549689505892056868344324448208820874232148807968788202283012051522375647232;
parameter    ap_ST_fsm_state269 = 268'd118571099379011784113736688648896417641748464297615937576404566024103044751294464;
parameter    ap_ST_fsm_state270 = 268'd237142198758023568227473377297792835283496928595231875152809132048206089502588928;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 512;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_TARGET_ADDR = 0;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (512 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [267:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] input0;
wire   [63:0] output0;
wire   [63:0] num_blocks;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond2_reg_214;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state135;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond2_reg_214_pp0_iter1_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state270;
reg   [0:0] cmp1_reg_182;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
wire   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [511:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [63:0] blockindex_reg_104;
reg   [63:0] num_blocks_read_reg_176;
wire   [0:0] cmp1_fu_115_p2;
reg   [57:0] tmp_4_reg_186;
reg   [57:0] tmp_6_reg_191;
reg    ap_sig_ioackin_gmem_ARREADY;
wire   [31:0] tmp_1_fu_151_p1;
reg   [31:0] tmp_1_reg_202;
reg    ap_sig_ioackin_gmem_AWREADY;
wire   [0:0] exitcond2_fu_165_p2;
wire    ap_block_state136_pp0_stage0_iter0;
reg    ap_block_state137_pp0_stage0_iter1;
wire    ap_block_state138_pp0_stage0_iter2;
reg    ap_sig_ioackin_gmem_WREADY;
reg    ap_block_state138_io;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] blockindex_1_fu_170_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [511:0] temp0_reg_223;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state136;
wire   [63:0] tmp_fu_141_p1;
wire   [63:0] tmp_2_fu_155_p1;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_block_state270;
reg    ap_reg_ioackin_gmem_WREADY;
reg    ap_block_pp0_stage0_01001;
reg   [267:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_rst_n_inv = 1'b1;
#0 ap_CS_fsm = 268'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

copy_kernel_copy_kernel_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
copy_kernel_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input0(input0),
    .output0(output0),
    .num_blocks(num_blocks)
);

copy_kernel_copy_kernel_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 512 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 133 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_GMEM_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
copy_kernel_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(tmp_fu_141_p1),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(tmp_2_fu_155_p1),
    .I_AWID(1'd0),
    .I_AWLEN(tmp_1_reg_202),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(temp0_reg_223),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(64'd18446744073709551615),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state136) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state135))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state136)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state136);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state135))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((ap_sig_ioackin_gmem_ARREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_ARREADY <= 1'b0;
            end else if ((gmem_ARREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state135)) begin
            if ((ap_sig_ioackin_gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if ((gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if (((exitcond2_reg_214_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (gmem_WREADY == 1'b1))) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond2_fu_165_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        blockindex_reg_104 <= blockindex_1_fu_170_p2;
    end else if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state135))) begin
        blockindex_reg_104 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cmp1_reg_182 <= cmp1_fu_115_p2;
        num_blocks_read_reg_176 <= num_blocks;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond2_reg_214 <= exitcond2_fu_165_p2;
        exitcond2_reg_214_pp0_iter1_reg <= exitcond2_reg_214;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond2_reg_214 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp0_reg_223 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_1_reg_202 <= tmp_1_fu_151_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp1_fu_115_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_4_reg_186 <= {{input0[63:6]}};
        tmp_6_reg_191 <= {{output0[63:6]}};
    end
end

always @ (*) begin
    if ((exitcond2_fu_165_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state136 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state136 = 1'b0;
    end
end

always @ (*) begin
    if ((~((cmp1_reg_182 == 1'd0) & (gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state270))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((cmp1_reg_182 == 1'd0) & (gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state270))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state135))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((cmp1_reg_182 == 1'd0) & (gmem_BVALID == 1'b0)) & (cmp1_reg_182 == 1'd0) & (1'b1 == ap_CS_fsm_state270))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond2_reg_214 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (exitcond2_reg_214_pp0_iter1_reg == 1'd0) & (ap_reg_ioackin_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state135)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((cmp1_reg_182 == 1'd0) & (1'b1 == ap_CS_fsm_state270))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond2_reg_214 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond2_reg_214_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((cmp1_fu_115_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state270;
            end else if (((cmp1_fu_115_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state135))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state135;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond2_fu_165_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond2_fu_165_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state139;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state169;
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state177;
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state180;
        end
        ap_ST_fsm_state180 : begin
            ap_NS_fsm = ap_ST_fsm_state181;
        end
        ap_ST_fsm_state181 : begin
            ap_NS_fsm = ap_ST_fsm_state182;
        end
        ap_ST_fsm_state182 : begin
            ap_NS_fsm = ap_ST_fsm_state183;
        end
        ap_ST_fsm_state183 : begin
            ap_NS_fsm = ap_ST_fsm_state184;
        end
        ap_ST_fsm_state184 : begin
            ap_NS_fsm = ap_ST_fsm_state185;
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state189;
        end
        ap_ST_fsm_state189 : begin
            ap_NS_fsm = ap_ST_fsm_state190;
        end
        ap_ST_fsm_state190 : begin
            ap_NS_fsm = ap_ST_fsm_state191;
        end
        ap_ST_fsm_state191 : begin
            ap_NS_fsm = ap_ST_fsm_state192;
        end
        ap_ST_fsm_state192 : begin
            ap_NS_fsm = ap_ST_fsm_state193;
        end
        ap_ST_fsm_state193 : begin
            ap_NS_fsm = ap_ST_fsm_state194;
        end
        ap_ST_fsm_state194 : begin
            ap_NS_fsm = ap_ST_fsm_state195;
        end
        ap_ST_fsm_state195 : begin
            ap_NS_fsm = ap_ST_fsm_state196;
        end
        ap_ST_fsm_state196 : begin
            ap_NS_fsm = ap_ST_fsm_state197;
        end
        ap_ST_fsm_state197 : begin
            ap_NS_fsm = ap_ST_fsm_state198;
        end
        ap_ST_fsm_state198 : begin
            ap_NS_fsm = ap_ST_fsm_state199;
        end
        ap_ST_fsm_state199 : begin
            ap_NS_fsm = ap_ST_fsm_state200;
        end
        ap_ST_fsm_state200 : begin
            ap_NS_fsm = ap_ST_fsm_state201;
        end
        ap_ST_fsm_state201 : begin
            ap_NS_fsm = ap_ST_fsm_state202;
        end
        ap_ST_fsm_state202 : begin
            ap_NS_fsm = ap_ST_fsm_state203;
        end
        ap_ST_fsm_state203 : begin
            ap_NS_fsm = ap_ST_fsm_state204;
        end
        ap_ST_fsm_state204 : begin
            ap_NS_fsm = ap_ST_fsm_state205;
        end
        ap_ST_fsm_state205 : begin
            ap_NS_fsm = ap_ST_fsm_state206;
        end
        ap_ST_fsm_state206 : begin
            ap_NS_fsm = ap_ST_fsm_state207;
        end
        ap_ST_fsm_state207 : begin
            ap_NS_fsm = ap_ST_fsm_state208;
        end
        ap_ST_fsm_state208 : begin
            ap_NS_fsm = ap_ST_fsm_state209;
        end
        ap_ST_fsm_state209 : begin
            ap_NS_fsm = ap_ST_fsm_state210;
        end
        ap_ST_fsm_state210 : begin
            ap_NS_fsm = ap_ST_fsm_state211;
        end
        ap_ST_fsm_state211 : begin
            ap_NS_fsm = ap_ST_fsm_state212;
        end
        ap_ST_fsm_state212 : begin
            ap_NS_fsm = ap_ST_fsm_state213;
        end
        ap_ST_fsm_state213 : begin
            ap_NS_fsm = ap_ST_fsm_state214;
        end
        ap_ST_fsm_state214 : begin
            ap_NS_fsm = ap_ST_fsm_state215;
        end
        ap_ST_fsm_state215 : begin
            ap_NS_fsm = ap_ST_fsm_state216;
        end
        ap_ST_fsm_state216 : begin
            ap_NS_fsm = ap_ST_fsm_state217;
        end
        ap_ST_fsm_state217 : begin
            ap_NS_fsm = ap_ST_fsm_state218;
        end
        ap_ST_fsm_state218 : begin
            ap_NS_fsm = ap_ST_fsm_state219;
        end
        ap_ST_fsm_state219 : begin
            ap_NS_fsm = ap_ST_fsm_state220;
        end
        ap_ST_fsm_state220 : begin
            ap_NS_fsm = ap_ST_fsm_state221;
        end
        ap_ST_fsm_state221 : begin
            ap_NS_fsm = ap_ST_fsm_state222;
        end
        ap_ST_fsm_state222 : begin
            ap_NS_fsm = ap_ST_fsm_state223;
        end
        ap_ST_fsm_state223 : begin
            ap_NS_fsm = ap_ST_fsm_state224;
        end
        ap_ST_fsm_state224 : begin
            ap_NS_fsm = ap_ST_fsm_state225;
        end
        ap_ST_fsm_state225 : begin
            ap_NS_fsm = ap_ST_fsm_state226;
        end
        ap_ST_fsm_state226 : begin
            ap_NS_fsm = ap_ST_fsm_state227;
        end
        ap_ST_fsm_state227 : begin
            ap_NS_fsm = ap_ST_fsm_state228;
        end
        ap_ST_fsm_state228 : begin
            ap_NS_fsm = ap_ST_fsm_state229;
        end
        ap_ST_fsm_state229 : begin
            ap_NS_fsm = ap_ST_fsm_state230;
        end
        ap_ST_fsm_state230 : begin
            ap_NS_fsm = ap_ST_fsm_state231;
        end
        ap_ST_fsm_state231 : begin
            ap_NS_fsm = ap_ST_fsm_state232;
        end
        ap_ST_fsm_state232 : begin
            ap_NS_fsm = ap_ST_fsm_state233;
        end
        ap_ST_fsm_state233 : begin
            ap_NS_fsm = ap_ST_fsm_state234;
        end
        ap_ST_fsm_state234 : begin
            ap_NS_fsm = ap_ST_fsm_state235;
        end
        ap_ST_fsm_state235 : begin
            ap_NS_fsm = ap_ST_fsm_state236;
        end
        ap_ST_fsm_state236 : begin
            ap_NS_fsm = ap_ST_fsm_state237;
        end
        ap_ST_fsm_state237 : begin
            ap_NS_fsm = ap_ST_fsm_state238;
        end
        ap_ST_fsm_state238 : begin
            ap_NS_fsm = ap_ST_fsm_state239;
        end
        ap_ST_fsm_state239 : begin
            ap_NS_fsm = ap_ST_fsm_state240;
        end
        ap_ST_fsm_state240 : begin
            ap_NS_fsm = ap_ST_fsm_state241;
        end
        ap_ST_fsm_state241 : begin
            ap_NS_fsm = ap_ST_fsm_state242;
        end
        ap_ST_fsm_state242 : begin
            ap_NS_fsm = ap_ST_fsm_state243;
        end
        ap_ST_fsm_state243 : begin
            ap_NS_fsm = ap_ST_fsm_state244;
        end
        ap_ST_fsm_state244 : begin
            ap_NS_fsm = ap_ST_fsm_state245;
        end
        ap_ST_fsm_state245 : begin
            ap_NS_fsm = ap_ST_fsm_state246;
        end
        ap_ST_fsm_state246 : begin
            ap_NS_fsm = ap_ST_fsm_state247;
        end
        ap_ST_fsm_state247 : begin
            ap_NS_fsm = ap_ST_fsm_state248;
        end
        ap_ST_fsm_state248 : begin
            ap_NS_fsm = ap_ST_fsm_state249;
        end
        ap_ST_fsm_state249 : begin
            ap_NS_fsm = ap_ST_fsm_state250;
        end
        ap_ST_fsm_state250 : begin
            ap_NS_fsm = ap_ST_fsm_state251;
        end
        ap_ST_fsm_state251 : begin
            ap_NS_fsm = ap_ST_fsm_state252;
        end
        ap_ST_fsm_state252 : begin
            ap_NS_fsm = ap_ST_fsm_state253;
        end
        ap_ST_fsm_state253 : begin
            ap_NS_fsm = ap_ST_fsm_state254;
        end
        ap_ST_fsm_state254 : begin
            ap_NS_fsm = ap_ST_fsm_state255;
        end
        ap_ST_fsm_state255 : begin
            ap_NS_fsm = ap_ST_fsm_state256;
        end
        ap_ST_fsm_state256 : begin
            ap_NS_fsm = ap_ST_fsm_state257;
        end
        ap_ST_fsm_state257 : begin
            ap_NS_fsm = ap_ST_fsm_state258;
        end
        ap_ST_fsm_state258 : begin
            ap_NS_fsm = ap_ST_fsm_state259;
        end
        ap_ST_fsm_state259 : begin
            ap_NS_fsm = ap_ST_fsm_state260;
        end
        ap_ST_fsm_state260 : begin
            ap_NS_fsm = ap_ST_fsm_state261;
        end
        ap_ST_fsm_state261 : begin
            ap_NS_fsm = ap_ST_fsm_state262;
        end
        ap_ST_fsm_state262 : begin
            ap_NS_fsm = ap_ST_fsm_state263;
        end
        ap_ST_fsm_state263 : begin
            ap_NS_fsm = ap_ST_fsm_state264;
        end
        ap_ST_fsm_state264 : begin
            ap_NS_fsm = ap_ST_fsm_state265;
        end
        ap_ST_fsm_state265 : begin
            ap_NS_fsm = ap_ST_fsm_state266;
        end
        ap_ST_fsm_state266 : begin
            ap_NS_fsm = ap_ST_fsm_state267;
        end
        ap_ST_fsm_state267 : begin
            ap_NS_fsm = ap_ST_fsm_state268;
        end
        ap_ST_fsm_state268 : begin
            ap_NS_fsm = ap_ST_fsm_state269;
        end
        ap_ST_fsm_state269 : begin
            ap_NS_fsm = ap_ST_fsm_state270;
        end
        ap_ST_fsm_state270 : begin
            if ((~((cmp1_reg_182 == 1'd0) & (gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state270))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state270;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd135];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state135 = ap_CS_fsm[32'd134];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state270 = ap_CS_fsm[32'd267];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond2_reg_214 == 1'd0) & (gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state138_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((exitcond2_reg_214 == 1'd0) & (gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state138_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((exitcond2_reg_214 == 1'd0) & (gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state136_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state137_pp0_stage0_iter1 = ((exitcond2_reg_214 == 1'd0) & (gmem_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state138_io = ((exitcond2_reg_214_pp0_iter1_reg == 1'd0) & (ap_sig_ioackin_gmem_WREADY == 1'b0));
end

assign ap_block_state138_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state270 = ((cmp1_reg_182 == 1'd0) & (gmem_BVALID == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign blockindex_1_fu_170_p2 = (blockindex_reg_104 + 64'd1);

assign cmp1_fu_115_p2 = ((num_blocks == 64'd0) ? 1'b1 : 1'b0);

assign exitcond2_fu_165_p2 = ((blockindex_reg_104 == num_blocks_read_reg_176) ? 1'b1 : 1'b0);

assign gmem_ARLEN = num_blocks_read_reg_176[31:0];

assign tmp_1_fu_151_p1 = num_blocks_read_reg_176[31:0];

assign tmp_2_fu_155_p1 = $signed(tmp_6_reg_191);

assign tmp_fu_141_p1 = $signed(tmp_4_reg_186);

endmodule //copy_kernel_copy_kernel

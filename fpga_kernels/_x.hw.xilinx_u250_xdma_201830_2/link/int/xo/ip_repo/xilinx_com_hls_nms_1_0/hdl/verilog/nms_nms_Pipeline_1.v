// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.1 (64-bit)
// Version: 2020.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nms_nms_Pipeline_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        line_buf_value_address0,
        line_buf_value_ce0,
        line_buf_value_we0,
        line_buf_value_d0,
        line_buf_grad_address0,
        line_buf_grad_ce0,
        line_buf_grad_we0,
        line_buf_grad_d0
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] line_buf_value_address0;
output   line_buf_value_ce0;
output  [2:0] line_buf_value_we0;
output  [23:0] line_buf_value_d0;
output  [8:0] line_buf_grad_address0;
output   line_buf_grad_ce0;
output  [2:0] line_buf_grad_we0;
output  [23:0] line_buf_grad_d0;

reg ap_idle;
reg line_buf_value_ce0;
reg[2:0] line_buf_value_we0;
reg line_buf_grad_ce0;
reg[2:0] line_buf_grad_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] exitcond1278_fu_76_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] p_cast15_fu_92_p1;
reg   [10:0] empty_fu_40;
wire   [10:0] empty_31_fu_82_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_p_load;
wire   [2:0] mask_fu_112_p2;
wire   [8:0] empty_32_fu_88_p1;
wire   [1:0] tmp_8_fu_98_p4;
wire   [2:0] empty_33_fu_108_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

nms_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((exitcond1278_fu_76_p2 == 1'd0)) begin
            empty_fu_40 <= empty_31_fu_82_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            empty_fu_40 <= 11'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1278_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_p_load = 11'd0;
    end else begin
        ap_sig_allocacmp_p_load = empty_fu_40;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        line_buf_grad_ce0 = 1'b1;
    end else begin
        line_buf_grad_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1278_fu_76_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        line_buf_grad_we0 = mask_fu_112_p2;
    end else begin
        line_buf_grad_we0 = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        line_buf_value_ce0 = 1'b1;
    end else begin
        line_buf_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1278_fu_76_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        line_buf_value_we0 = mask_fu_112_p2;
    end else begin
        line_buf_value_we0 = 3'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_31_fu_82_p2 = (ap_sig_allocacmp_p_load + 11'd1);

assign empty_32_fu_88_p1 = ap_sig_allocacmp_p_load[8:0];

assign empty_33_fu_108_p1 = tmp_8_fu_98_p4;

assign exitcond1278_fu_76_p2 = ((ap_sig_allocacmp_p_load == 11'd1536) ? 1'b1 : 1'b0);

assign line_buf_grad_address0 = p_cast15_fu_92_p1;

assign line_buf_grad_d0 = 24'd0;

assign line_buf_value_address0 = p_cast15_fu_92_p1;

assign line_buf_value_d0 = 24'd0;

assign mask_fu_112_p2 = 3'd1 << empty_33_fu_108_p1;

assign p_cast15_fu_92_p1 = empty_32_fu_88_p1;

assign tmp_8_fu_98_p4 = {{ap_sig_allocacmp_p_load[10:9]}};

endmodule //nms_nms_Pipeline_1

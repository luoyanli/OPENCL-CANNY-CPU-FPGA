// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.1 (64-bit)
// Version: 2020.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nms_nms_Pipeline_VITIS_LOOP_31_1_VITIS_LOOP_32_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RFIFONUM,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RFIFONUM,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        sext_ln31,
        out_r,
        line_buf_value_address0,
        line_buf_value_ce0,
        line_buf_value_we0,
        line_buf_value_d0,
        line_buf_value_address1,
        line_buf_value_ce1,
        line_buf_value_q1,
        line_buf_grad_address0,
        line_buf_grad_ce0,
        line_buf_grad_we0,
        line_buf_grad_d0,
        line_buf_grad_address1,
        line_buf_grad_ce1,
        line_buf_grad_q1
);

parameter    ap_ST_fsm_state1 = 70'd1;
parameter    ap_ST_fsm_pp0_stage0 = 70'd2;
parameter    ap_ST_fsm_state7 = 70'd4;
parameter    ap_ST_fsm_state8 = 70'd8;
parameter    ap_ST_fsm_state9 = 70'd16;
parameter    ap_ST_fsm_state10 = 70'd32;
parameter    ap_ST_fsm_state11 = 70'd64;
parameter    ap_ST_fsm_state12 = 70'd128;
parameter    ap_ST_fsm_state13 = 70'd256;
parameter    ap_ST_fsm_state14 = 70'd512;
parameter    ap_ST_fsm_state15 = 70'd1024;
parameter    ap_ST_fsm_state16 = 70'd2048;
parameter    ap_ST_fsm_state17 = 70'd4096;
parameter    ap_ST_fsm_state18 = 70'd8192;
parameter    ap_ST_fsm_state19 = 70'd16384;
parameter    ap_ST_fsm_state20 = 70'd32768;
parameter    ap_ST_fsm_state21 = 70'd65536;
parameter    ap_ST_fsm_state22 = 70'd131072;
parameter    ap_ST_fsm_state23 = 70'd262144;
parameter    ap_ST_fsm_state24 = 70'd524288;
parameter    ap_ST_fsm_state25 = 70'd1048576;
parameter    ap_ST_fsm_state26 = 70'd2097152;
parameter    ap_ST_fsm_state27 = 70'd4194304;
parameter    ap_ST_fsm_state28 = 70'd8388608;
parameter    ap_ST_fsm_state29 = 70'd16777216;
parameter    ap_ST_fsm_state30 = 70'd33554432;
parameter    ap_ST_fsm_state31 = 70'd67108864;
parameter    ap_ST_fsm_state32 = 70'd134217728;
parameter    ap_ST_fsm_state33 = 70'd268435456;
parameter    ap_ST_fsm_state34 = 70'd536870912;
parameter    ap_ST_fsm_state35 = 70'd1073741824;
parameter    ap_ST_fsm_state36 = 70'd2147483648;
parameter    ap_ST_fsm_state37 = 70'd4294967296;
parameter    ap_ST_fsm_state38 = 70'd8589934592;
parameter    ap_ST_fsm_state39 = 70'd17179869184;
parameter    ap_ST_fsm_state40 = 70'd34359738368;
parameter    ap_ST_fsm_state41 = 70'd68719476736;
parameter    ap_ST_fsm_state42 = 70'd137438953472;
parameter    ap_ST_fsm_state43 = 70'd274877906944;
parameter    ap_ST_fsm_state44 = 70'd549755813888;
parameter    ap_ST_fsm_state45 = 70'd1099511627776;
parameter    ap_ST_fsm_state46 = 70'd2199023255552;
parameter    ap_ST_fsm_state47 = 70'd4398046511104;
parameter    ap_ST_fsm_state48 = 70'd8796093022208;
parameter    ap_ST_fsm_state49 = 70'd17592186044416;
parameter    ap_ST_fsm_state50 = 70'd35184372088832;
parameter    ap_ST_fsm_state51 = 70'd70368744177664;
parameter    ap_ST_fsm_state52 = 70'd140737488355328;
parameter    ap_ST_fsm_state53 = 70'd281474976710656;
parameter    ap_ST_fsm_state54 = 70'd562949953421312;
parameter    ap_ST_fsm_state55 = 70'd1125899906842624;
parameter    ap_ST_fsm_state56 = 70'd2251799813685248;
parameter    ap_ST_fsm_state57 = 70'd4503599627370496;
parameter    ap_ST_fsm_state58 = 70'd9007199254740992;
parameter    ap_ST_fsm_state59 = 70'd18014398509481984;
parameter    ap_ST_fsm_state60 = 70'd36028797018963968;
parameter    ap_ST_fsm_state61 = 70'd72057594037927936;
parameter    ap_ST_fsm_state62 = 70'd144115188075855872;
parameter    ap_ST_fsm_state63 = 70'd288230376151711744;
parameter    ap_ST_fsm_state64 = 70'd576460752303423488;
parameter    ap_ST_fsm_state65 = 70'd1152921504606846976;
parameter    ap_ST_fsm_state66 = 70'd2305843009213693952;
parameter    ap_ST_fsm_state67 = 70'd4611686018427387904;
parameter    ap_ST_fsm_state68 = 70'd9223372036854775808;
parameter    ap_ST_fsm_state69 = 70'd18446744073709551616;
parameter    ap_ST_fsm_state70 = 70'd36893488147419103232;
parameter    ap_ST_fsm_state71 = 70'd73786976294838206464;
parameter    ap_ST_fsm_state72 = 70'd147573952589676412928;
parameter    ap_ST_fsm_state73 = 70'd295147905179352825856;
parameter    ap_ST_fsm_state74 = 70'd590295810358705651712;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [63:0] m_axi_gmem1_AWADDR;
output  [0:0] m_axi_gmem1_AWID;
output  [31:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [0:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [7:0] m_axi_gmem1_WDATA;
output  [0:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [0:0] m_axi_gmem1_WID;
output  [0:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [63:0] m_axi_gmem1_ARADDR;
output  [0:0] m_axi_gmem1_ARID;
output  [31:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [0:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [7:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [0:0] m_axi_gmem1_RID;
input  [10:0] m_axi_gmem1_RFIFONUM;
input  [0:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [0:0] m_axi_gmem1_BID;
input  [0:0] m_axi_gmem1_BUSER;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [63:0] m_axi_gmem0_AWADDR;
output  [0:0] m_axi_gmem0_AWID;
output  [31:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [0:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [511:0] m_axi_gmem0_WDATA;
output  [63:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [0:0] m_axi_gmem0_WID;
output  [0:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [63:0] m_axi_gmem0_ARADDR;
output  [0:0] m_axi_gmem0_ARID;
output  [31:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [0:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [511:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [0:0] m_axi_gmem0_RID;
input  [8:0] m_axi_gmem0_RFIFONUM;
input  [0:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [0:0] m_axi_gmem0_BID;
input  [0:0] m_axi_gmem0_BUSER;
input  [57:0] sext_ln31;
input  [63:0] out_r;
output  [8:0] line_buf_value_address0;
output   line_buf_value_ce0;
output  [2:0] line_buf_value_we0;
output  [23:0] line_buf_value_d0;
output  [8:0] line_buf_value_address1;
output   line_buf_value_ce1;
input  [23:0] line_buf_value_q1;
output  [8:0] line_buf_grad_address0;
output   line_buf_grad_ce0;
output  [2:0] line_buf_grad_we0;
output  [23:0] line_buf_grad_d0;
output  [8:0] line_buf_grad_address1;
output   line_buf_grad_ce1;
input  [23:0] line_buf_grad_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem1_AWVALID;
reg m_axi_gmem1_WVALID;
reg m_axi_gmem1_BREADY;
reg m_axi_gmem0_RREADY;
reg line_buf_value_ce0;
reg[2:0] line_buf_value_we0;
reg line_buf_value_ce1;
reg line_buf_grad_ce0;
reg[2:0] line_buf_grad_we0;
reg line_buf_grad_ce1;

(* fsm_encoding = "none" *) reg   [69:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem1_blk_n_AW;
reg    gmem1_blk_n_B;
wire    ap_CS_fsm_state74;
reg    gmem1_blk_n_W;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage0;
reg    gmem0_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln31_reg_888;
reg   [0:0] icmp_ln45_reg_905;
wire   [0:0] icmp_ln31_fu_315_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op125_read_state3;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln31_reg_888_pp0_iter1_reg;
wire   [0:0] icmp_ln32_fu_330_p2;
reg   [0:0] icmp_ln32_reg_892;
reg   [0:0] icmp_ln32_reg_892_pp0_iter1_reg;
wire   [9:0] select_ln31_fu_336_p3;
reg   [9:0] select_ln31_reg_899;
wire   [0:0] icmp_ln45_fu_348_p2;
reg   [0:0] icmp_ln45_reg_905_pp0_iter1_reg;
reg   [8:0] line_buf_value_addr_reg_909;
reg   [8:0] line_buf_grad_addr_reg_915;
reg   [511:0] gmem0_addr_read_reg_921;
wire   [0:0] icmp_ln90_fu_394_p2;
reg   [0:0] icmp_ln90_reg_926;
reg   [0:0] icmp_ln90_reg_926_pp0_iter2_reg;
reg   [7:0] value_nms_4_reg_931;
wire   [0:0] select_ln31_3_fu_491_p3;
reg   [0:0] select_ln31_3_reg_942;
wire   [0:0] icmp_ln63_fu_604_p2;
reg   [0:0] icmp_ln63_reg_947;
wire   [0:0] icmp_ln69_fu_610_p2;
reg   [0:0] icmp_ln69_reg_952;
wire   [0:0] icmp_ln70_fu_616_p2;
reg   [0:0] icmp_ln70_reg_957;
wire   [0:0] icmp_ln76_fu_622_p2;
reg   [0:0] icmp_ln76_reg_962;
wire   [0:0] icmp_ln77_fu_628_p2;
reg   [0:0] icmp_ln77_reg_968;
wire   [0:0] icmp_ln83_fu_634_p2;
reg   [0:0] icmp_ln83_reg_973;
wire   [0:0] icmp_ln61_fu_640_p2;
reg   [0:0] icmp_ln61_reg_978;
wire   [0:0] icmp_ln61_1_fu_646_p2;
reg   [0:0] icmp_ln61_1_reg_983;
wire   [0:0] icmp_ln61_2_fu_652_p2;
reg   [0:0] icmp_ln61_2_reg_988;
wire   [0:0] icmp_ln61_3_fu_658_p2;
reg   [0:0] icmp_ln61_3_reg_993;
wire   [7:0] value_nms_6_fu_788_p3;
reg   [7:0] value_nms_6_reg_998;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_condition_pp0_exit_iter2_state4;
reg   [511:0] ap_phi_mux_empty_phi_fu_240_p4;
wire   [511:0] ap_phi_reg_pp0_iter2_empty_reg_237;
wire   [511:0] zext_ln32_fu_498_p1;
wire   [63:0] zext_ln32_1_fu_376_p1;
reg    ap_block_pp0_stage0_01001;
reg   [495:0] shiftreg_fu_126;
reg   [7:0] p_03077_fu_130;
reg   [7:0] value_nms_3_fu_134;
reg   [7:0] grad_nms_fu_138;
reg   [7:0] p_030_285_fu_142;
reg   [9:0] xi_fu_146;
wire   [9:0] add_ln32_fu_354_p2;
reg   [9:0] yi_fu_150;
wire   [9:0] select_ln31_2_fu_456_p3;
reg   [18:0] indvar_flatten_fu_154;
wire   [18:0] add_ln31_fu_321_p2;
reg   [7:0] p_030_17379_fu_158;
wire   [7:0] tmp_2_fu_503_p4;
reg   [7:0] value_nms_fu_162;
wire   [7:0] tmp_6_fu_513_p4;
reg   [7:0] p_030_2_187_fu_166;
wire   [7:0] trunc_ln45_fu_552_p1;
wire   [4:0] trunc_ln32_fu_344_p1;
wire   [8:0] trunc_ln90_fu_381_p1;
wire   [9:0] zext_ln90_fu_384_p1;
wire   [9:0] add_ln90_fu_388_p2;
wire   [7:0] tmp_fu_412_p4;
wire   [0:0] icmp_fu_422_p2;
wire   [0:0] cmp142_not_fu_428_p2;
wire   [9:0] add_ln31_1_fu_450_p2;
wire   [7:0] tmp_1_fu_463_p4;
wire   [0:0] icmp6_fu_473_p2;
wire   [0:0] cmp142_not_mid1_fu_479_p2;
wire   [0:0] or_ln90_2_fu_485_p2;
wire   [0:0] or_ln90_fu_434_p2;
wire   [495:0] select_ln31_1_fu_443_p3;
wire   [15:0] tmp_3_fu_566_p4;
wire   [7:0] trunc_ln45_2_fu_556_p4;
wire   [15:0] tmp_4_fu_585_p4;
wire   [0:0] icmp_ln62_fu_707_p2;
wire   [0:0] or_ln62_fu_712_p2;
wire   [0:0] or_ln69_fu_724_p2;
wire   [0:0] or_ln76_fu_735_p2;
wire   [0:0] or_ln83_fu_746_p2;
wire   [7:0] select_ln62_fu_717_p3;
wire   [7:0] select_ln69_fu_728_p3;
wire   [7:0] select_ln61_fu_757_p3;
wire   [7:0] select_ln76_fu_739_p3;
wire   [7:0] select_ln61_1_fu_763_p3;
wire   [7:0] select_ln83_fu_750_p3;
wire   [7:0] select_ln61_2_fu_770_p3;
wire   [0:0] or_ln90_1_fu_784_p2;
wire   [7:0] value_nms_5_fu_777_p3;
reg   [69:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
reg    ap_ST_fsm_state74_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 70'd1;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((m_axi_gmem1_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter2_state4)) begin
                ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((m_axi_gmem1_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_gmem1_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        grad_nms_fu_138 <= 8'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln31_reg_888_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grad_nms_fu_138 <= {{line_buf_grad_q1[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_gmem1_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_fu_154 <= 19'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln31_fu_315_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_fu_154 <= add_ln31_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_gmem1_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_03077_fu_130 <= 8'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln31_reg_888_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_03077_fu_130 <= p_030_17379_fu_158;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_gmem1_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_030_17379_fu_158 <= 8'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln31_reg_888_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_030_17379_fu_158 <= {{line_buf_value_q1[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_gmem1_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_030_285_fu_142 <= 8'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln31_reg_888_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_030_285_fu_142 <= p_030_2_187_fu_166;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_gmem1_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_030_2_187_fu_166 <= 8'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln31_reg_888_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_030_2_187_fu_166 <= trunc_ln45_fu_552_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_gmem1_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        shiftreg_fu_126 <= 496'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln31_reg_888_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        shiftreg_fu_126 <= {{ap_phi_mux_empty_phi_fu_240_p4[511:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_gmem1_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        value_nms_3_fu_134 <= 8'd0;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        value_nms_3_fu_134 <= value_nms_4_reg_931;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_gmem1_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        value_nms_fu_162 <= 8'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln31_reg_888_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        value_nms_fu_162 <= {{line_buf_value_q1[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_gmem1_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        xi_fu_146 <= 10'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln31_fu_315_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xi_fu_146 <= add_ln32_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_gmem1_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        yi_fu_150 <= 10'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln31_reg_888_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        yi_fu_150 <= select_ln31_2_fu_456_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op125_read_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem0_addr_read_reg_921 <= m_axi_gmem0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln31_reg_888 <= icmp_ln31_fu_315_p2;
        icmp_ln31_reg_888_pp0_iter1_reg <= icmp_ln31_reg_888;
        icmp_ln32_reg_892_pp0_iter1_reg <= icmp_ln32_reg_892;
        icmp_ln45_reg_905_pp0_iter1_reg <= icmp_ln45_reg_905;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_315_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln32_reg_892 <= icmp_ln32_fu_330_p2;
        icmp_ln45_reg_905 <= icmp_ln45_fu_348_p2;
        select_ln31_reg_899 <= select_ln31_fu_336_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_888_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln61_1_reg_983 <= icmp_ln61_1_fu_646_p2;
        icmp_ln61_2_reg_988 <= icmp_ln61_2_fu_652_p2;
        icmp_ln61_3_reg_993 <= icmp_ln61_3_fu_658_p2;
        icmp_ln61_reg_978 <= icmp_ln61_fu_640_p2;
        icmp_ln63_reg_947 <= icmp_ln63_fu_604_p2;
        icmp_ln69_reg_952 <= icmp_ln69_fu_610_p2;
        icmp_ln70_reg_957 <= icmp_ln70_fu_616_p2;
        icmp_ln76_reg_962 <= icmp_ln76_fu_622_p2;
        icmp_ln77_reg_968 <= icmp_ln77_fu_628_p2;
        icmp_ln83_reg_973 <= icmp_ln83_fu_634_p2;
        select_ln31_3_reg_942 <= select_ln31_3_fu_491_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_888 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln90_reg_926 <= icmp_ln90_fu_394_p2;
        line_buf_grad_addr_reg_915 <= zext_ln32_1_fu_376_p1;
        line_buf_value_addr_reg_909 <= zext_ln32_1_fu_376_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln90_reg_926_pp0_iter2_reg <= icmp_ln90_reg_926;
        value_nms_4_reg_931 <= value_nms_fu_162;
        value_nms_6_reg_998 <= value_nms_6_fu_788_p3;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if (((m_axi_gmem1_AWREADY == 1'b0) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem1_BVALID == 1'b0)) begin
        ap_ST_fsm_state74_blk = 1'b1;
    end else begin
        ap_ST_fsm_state74_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_315_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state74) & (m_axi_gmem1_BVALID == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln31_reg_888_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln45_reg_905_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_empty_phi_fu_240_p4 = zext_ln32_fu_498_p1;
        end else if ((icmp_ln45_reg_905_pp0_iter1_reg == 1'd1)) begin
            ap_phi_mux_empty_phi_fu_240_p4 = gmem0_addr_read_reg_921;
        end else begin
            ap_phi_mux_empty_phi_fu_240_p4 = ap_phi_reg_pp0_iter2_empty_reg_237;
        end
    end else begin
        ap_phi_mux_empty_phi_fu_240_p4 = ap_phi_reg_pp0_iter2_empty_reg_237;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) & (m_axi_gmem1_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_905 == 1'd1) & (icmp_ln31_reg_888 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem0_blk_n_R = m_axi_gmem0_RVALID;
    end else begin
        gmem0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        gmem1_blk_n_AW = m_axi_gmem1_AWREADY;
    end else begin
        gmem1_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        gmem1_blk_n_B = m_axi_gmem1_BVALID;
    end else begin
        gmem1_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        gmem1_blk_n_W = m_axi_gmem1_WREADY;
    end else begin
        gmem1_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buf_grad_ce0 = 1'b1;
    end else begin
        line_buf_grad_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buf_grad_ce1 = 1'b1;
    end else begin
        line_buf_grad_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln31_reg_888_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buf_grad_we0 = 3'd7;
    end else begin
        line_buf_grad_we0 = 3'd0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buf_value_ce0 = 1'b1;
    end else begin
        line_buf_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buf_value_ce1 = 1'b1;
    end else begin
        line_buf_value_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln31_reg_888_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buf_value_we0 = 3'd7;
    end else begin
        line_buf_value_we0 = 3'd0;
    end
end

always @ (*) begin
    if (((ap_predicate_op125_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_gmem0_RREADY = 1'b1;
    end else begin
        m_axi_gmem0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem1_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_gmem1_AWVALID = 1'b1;
    end else begin
        m_axi_gmem1_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) & (m_axi_gmem1_BVALID == 1'b1))) begin
        m_axi_gmem1_BREADY = 1'b1;
    end else begin
        m_axi_gmem1_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        m_axi_gmem1_WVALID = 1'b1;
    end else begin
        m_axi_gmem1_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((m_axi_gmem1_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            if (((1'b1 == ap_CS_fsm_state74) & (m_axi_gmem1_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln31_1_fu_450_p2 = (yi_fu_150 + 10'd1);

assign add_ln31_fu_321_p2 = (indvar_flatten_fu_154 + 19'd1);

assign add_ln32_fu_354_p2 = (select_ln31_fu_336_p3 + 10'd1);

assign add_ln90_fu_388_p2 = ($signed(zext_ln90_fu_384_p1) + $signed(10'd1020));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd69];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_predicate_op125_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_predicate_op125_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (m_axi_gmem1_WREADY == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_predicate_op125_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (m_axi_gmem1_WREADY == 1'b0)));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((ap_predicate_op125_read_state3 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter2_empty_reg_237 = 'bx;

always @ (*) begin
    ap_predicate_op125_read_state3 = ((icmp_ln45_reg_905 == 1'd1) & (icmp_ln31_reg_888 == 1'd0));
end

assign cmp142_not_fu_428_p2 = ((yi_fu_150 > 10'd508) ? 1'b1 : 1'b0);

assign cmp142_not_mid1_fu_479_p2 = ((add_ln31_1_fu_450_p2 > 10'd508) ? 1'b1 : 1'b0);

assign icmp6_fu_473_p2 = ((tmp_1_fu_463_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_fu_422_p2 = ((tmp_fu_412_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_315_p2 = ((indvar_flatten_fu_154 == 19'd262144) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_330_p2 = ((xi_fu_146 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_348_p2 = ((trunc_ln32_fu_344_p1 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln61_1_fu_646_p2 = ((grad_nms_fu_138 == 8'd45) ? 1'b1 : 1'b0);

assign icmp_ln61_2_fu_652_p2 = ((grad_nms_fu_138 == 8'd90) ? 1'b1 : 1'b0);

assign icmp_ln61_3_fu_658_p2 = ((grad_nms_fu_138 == 8'd135) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_640_p2 = ((grad_nms_fu_138 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_707_p2 = ((value_nms_3_fu_134 > value_nms_4_reg_931) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_604_p2 = ((value_nms_fu_162 < tmp_6_fu_513_p4) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_610_p2 = ((p_03077_fu_130 > value_nms_fu_162) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_616_p2 = ((value_nms_fu_162 < trunc_ln45_fu_552_p1) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_622_p2 = ((tmp_2_fu_503_p4 > value_nms_fu_162) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_628_p2 = ((value_nms_fu_162 < p_030_2_187_fu_166) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_634_p2 = ((p_030_285_fu_142 > value_nms_fu_162) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_394_p2 = ((add_ln90_fu_388_p2 > 10'd504) ? 1'b1 : 1'b0);

assign line_buf_grad_address0 = line_buf_grad_addr_reg_915;

assign line_buf_grad_address1 = zext_ln32_1_fu_376_p1;

assign line_buf_grad_d0 = {{trunc_ln45_2_fu_556_p4}, {tmp_4_fu_585_p4}};

assign line_buf_value_address0 = line_buf_value_addr_reg_909;

assign line_buf_value_address1 = zext_ln32_1_fu_376_p1;

assign line_buf_value_d0 = {{trunc_ln45_fu_552_p1}, {tmp_3_fu_566_p4}};

assign m_axi_gmem0_ARADDR = 64'd0;

assign m_axi_gmem0_ARBURST = 2'd0;

assign m_axi_gmem0_ARCACHE = 4'd0;

assign m_axi_gmem0_ARID = 1'd0;

assign m_axi_gmem0_ARLEN = 32'd0;

assign m_axi_gmem0_ARLOCK = 2'd0;

assign m_axi_gmem0_ARPROT = 3'd0;

assign m_axi_gmem0_ARQOS = 4'd0;

assign m_axi_gmem0_ARREGION = 4'd0;

assign m_axi_gmem0_ARSIZE = 3'd0;

assign m_axi_gmem0_ARUSER = 1'd0;

assign m_axi_gmem0_ARVALID = 1'b0;

assign m_axi_gmem0_AWADDR = 64'd0;

assign m_axi_gmem0_AWBURST = 2'd0;

assign m_axi_gmem0_AWCACHE = 4'd0;

assign m_axi_gmem0_AWID = 1'd0;

assign m_axi_gmem0_AWLEN = 32'd0;

assign m_axi_gmem0_AWLOCK = 2'd0;

assign m_axi_gmem0_AWPROT = 3'd0;

assign m_axi_gmem0_AWQOS = 4'd0;

assign m_axi_gmem0_AWREGION = 4'd0;

assign m_axi_gmem0_AWSIZE = 3'd0;

assign m_axi_gmem0_AWUSER = 1'd0;

assign m_axi_gmem0_AWVALID = 1'b0;

assign m_axi_gmem0_BREADY = 1'b0;

assign m_axi_gmem0_WDATA = 512'd0;

assign m_axi_gmem0_WID = 1'd0;

assign m_axi_gmem0_WLAST = 1'b0;

assign m_axi_gmem0_WSTRB = 64'd0;

assign m_axi_gmem0_WUSER = 1'd0;

assign m_axi_gmem0_WVALID = 1'b0;

assign m_axi_gmem1_ARADDR = 64'd0;

assign m_axi_gmem1_ARBURST = 2'd0;

assign m_axi_gmem1_ARCACHE = 4'd0;

assign m_axi_gmem1_ARID = 1'd0;

assign m_axi_gmem1_ARLEN = 32'd0;

assign m_axi_gmem1_ARLOCK = 2'd0;

assign m_axi_gmem1_ARPROT = 3'd0;

assign m_axi_gmem1_ARQOS = 4'd0;

assign m_axi_gmem1_ARREGION = 4'd0;

assign m_axi_gmem1_ARSIZE = 3'd0;

assign m_axi_gmem1_ARUSER = 1'd0;

assign m_axi_gmem1_ARVALID = 1'b0;

assign m_axi_gmem1_AWADDR = out_r;

assign m_axi_gmem1_AWBURST = 2'd0;

assign m_axi_gmem1_AWCACHE = 4'd0;

assign m_axi_gmem1_AWID = 1'd0;

assign m_axi_gmem1_AWLEN = 32'd262144;

assign m_axi_gmem1_AWLOCK = 2'd0;

assign m_axi_gmem1_AWPROT = 3'd0;

assign m_axi_gmem1_AWQOS = 4'd0;

assign m_axi_gmem1_AWREGION = 4'd0;

assign m_axi_gmem1_AWSIZE = 3'd0;

assign m_axi_gmem1_AWUSER = 1'd0;

assign m_axi_gmem1_RREADY = 1'b0;

assign m_axi_gmem1_WDATA = value_nms_6_reg_998;

assign m_axi_gmem1_WID = 1'd0;

assign m_axi_gmem1_WLAST = 1'b0;

assign m_axi_gmem1_WSTRB = 1'd1;

assign m_axi_gmem1_WUSER = 1'd0;

assign or_ln62_fu_712_p2 = (icmp_ln63_reg_947 | icmp_ln62_fu_707_p2);

assign or_ln69_fu_724_p2 = (icmp_ln70_reg_957 | icmp_ln69_reg_952);

assign or_ln76_fu_735_p2 = (icmp_ln77_reg_968 | icmp_ln76_reg_962);

assign or_ln83_fu_746_p2 = (icmp_ln83_reg_973 | icmp_ln76_reg_962);

assign or_ln90_1_fu_784_p2 = (select_ln31_3_reg_942 | icmp_ln90_reg_926_pp0_iter2_reg);

assign or_ln90_2_fu_485_p2 = (icmp6_fu_473_p2 | cmp142_not_mid1_fu_479_p2);

assign or_ln90_fu_434_p2 = (icmp_fu_422_p2 | cmp142_not_fu_428_p2);

assign select_ln31_1_fu_443_p3 = ((icmp_ln32_reg_892_pp0_iter1_reg[0:0] == 1'b1) ? 496'd0 : shiftreg_fu_126);

assign select_ln31_2_fu_456_p3 = ((icmp_ln32_reg_892_pp0_iter1_reg[0:0] == 1'b1) ? add_ln31_1_fu_450_p2 : yi_fu_150);

assign select_ln31_3_fu_491_p3 = ((icmp_ln32_reg_892_pp0_iter1_reg[0:0] == 1'b1) ? or_ln90_2_fu_485_p2 : or_ln90_fu_434_p2);

assign select_ln31_fu_336_p3 = ((icmp_ln32_fu_330_p2[0:0] == 1'b1) ? 10'd0 : xi_fu_146);

assign select_ln61_1_fu_763_p3 = ((icmp_ln61_1_reg_983[0:0] == 1'b1) ? select_ln69_fu_728_p3 : select_ln61_fu_757_p3);

assign select_ln61_2_fu_770_p3 = ((icmp_ln61_2_reg_988[0:0] == 1'b1) ? select_ln76_fu_739_p3 : select_ln61_1_fu_763_p3);

assign select_ln61_fu_757_p3 = ((icmp_ln61_reg_978[0:0] == 1'b1) ? select_ln62_fu_717_p3 : value_nms_4_reg_931);

assign select_ln62_fu_717_p3 = ((or_ln62_fu_712_p2[0:0] == 1'b1) ? 8'd0 : value_nms_4_reg_931);

assign select_ln69_fu_728_p3 = ((or_ln69_fu_724_p2[0:0] == 1'b1) ? 8'd0 : value_nms_4_reg_931);

assign select_ln76_fu_739_p3 = ((or_ln76_fu_735_p2[0:0] == 1'b1) ? 8'd0 : value_nms_4_reg_931);

assign select_ln83_fu_750_p3 = ((or_ln83_fu_746_p2[0:0] == 1'b1) ? 8'd0 : value_nms_4_reg_931);

assign tmp_1_fu_463_p4 = {{add_ln31_1_fu_450_p2[9:2]}};

assign tmp_2_fu_503_p4 = {{line_buf_value_q1[15:8]}};

assign tmp_3_fu_566_p4 = {{line_buf_value_q1[23:8]}};

assign tmp_4_fu_585_p4 = {{line_buf_grad_q1[23:8]}};

assign tmp_6_fu_513_p4 = {{line_buf_value_q1[23:16]}};

assign tmp_fu_412_p4 = {{yi_fu_150[9:2]}};

assign trunc_ln32_fu_344_p1 = select_ln31_fu_336_p3[4:0];

assign trunc_ln45_2_fu_556_p4 = {{ap_phi_mux_empty_phi_fu_240_p4[15:8]}};

assign trunc_ln45_fu_552_p1 = ap_phi_mux_empty_phi_fu_240_p4[7:0];

assign trunc_ln90_fu_381_p1 = select_ln31_reg_899[8:0];

assign value_nms_5_fu_777_p3 = ((icmp_ln61_3_reg_993[0:0] == 1'b1) ? select_ln83_fu_750_p3 : select_ln61_2_fu_770_p3);

assign value_nms_6_fu_788_p3 = ((or_ln90_1_fu_784_p2[0:0] == 1'b1) ? 8'd0 : value_nms_5_fu_777_p3);

assign zext_ln32_1_fu_376_p1 = select_ln31_reg_899;

assign zext_ln32_fu_498_p1 = select_ln31_1_fu_443_p3;

assign zext_ln90_fu_384_p1 = trunc_ln90_fu_381_p1;

endmodule //nms_nms_Pipeline_VITIS_LOOP_31_1_VITIS_LOOP_32_2

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.1 (64-bit)
-- Version: 2020.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nms_nms_Pipeline_VITIS_LOOP_31_1_VITIS_LOOP_32_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln31 : IN STD_LOGIC_VECTOR (57 downto 0);
    out_r : IN STD_LOGIC_VECTOR (63 downto 0);
    line_buf_value_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    line_buf_value_ce0 : OUT STD_LOGIC;
    line_buf_value_we0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    line_buf_value_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    line_buf_value_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    line_buf_value_ce1 : OUT STD_LOGIC;
    line_buf_value_q1 : IN STD_LOGIC_VECTOR (23 downto 0);
    line_buf_grad_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    line_buf_grad_ce0 : OUT STD_LOGIC;
    line_buf_grad_we0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    line_buf_grad_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    line_buf_grad_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    line_buf_grad_ce1 : OUT STD_LOGIC;
    line_buf_grad_q1 : IN STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of nms_nms_Pipeline_VITIS_LOOP_31_1_VITIS_LOOP_32_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (69 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (69 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (69 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (69 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (69 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (69 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (69 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (69 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (69 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (69 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_40000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_const_lv496_lc_1 : STD_LOGIC_VECTOR (495 downto
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_3FC : STD_LOGIC_VECTOR (9 downto 0) := "1111111100";
    constant ap_const_lv10_1F8 : STD_LOGIC_VECTOR (9 downto 0) := "0111111000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_1FC : STD_LOGIC_VECTOR (9 downto 0) := "0111111100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv8_2D : STD_LOGIC_VECTOR (7 downto 0) := "00101101";
    constant ap_const_lv8_5A : STD_LOGIC_VECTOR (7 downto 0) := "01011010";
    constant ap_const_lv8_87 : STD_LOGIC_VECTOR (7 downto 0) := "10000111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem1_blk_n_AW : STD_LOGIC;
    signal gmem1_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal gmem1_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem0_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln31_reg_888 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_905 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op125_read_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln31_reg_888_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_892 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_892_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_fu_336_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln31_reg_899 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln45_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_905_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal line_buf_value_addr_reg_909 : STD_LOGIC_VECTOR (8 downto 0);
    signal line_buf_grad_addr_reg_915 : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem0_addr_read_reg_921 : STD_LOGIC_VECTOR (511 downto 0);
    signal icmp_ln90_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_926 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_926_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal value_nms_4_reg_931 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln31_3_fu_491_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_3_reg_942 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_947 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_952 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_957 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_962 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_968 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_973 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_1_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_1_reg_983 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_2_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_2_reg_988 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_3_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_3_reg_993 : STD_LOGIC_VECTOR (0 downto 0);
    signal value_nms_6_fu_788_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal value_nms_6_reg_998 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter2_state4 : STD_LOGIC;
    signal ap_phi_mux_empty_phi_fu_240_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_reg_237 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln32_fu_498_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln32_1_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shiftreg_fu_126 : STD_LOGIC_VECTOR (495 downto 0);
    signal p_03077_fu_130 : STD_LOGIC_VECTOR (7 downto 0);
    signal value_nms_3_fu_134 : STD_LOGIC_VECTOR (7 downto 0);
    signal grad_nms_fu_138 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_030_285_fu_142 : STD_LOGIC_VECTOR (7 downto 0);
    signal xi_fu_146 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln32_fu_354_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal yi_fu_150 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln31_2_fu_456_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_fu_154 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln31_fu_321_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_030_17379_fu_158 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_503_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal value_nms_fu_162 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_513_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_030_2_187_fu_166 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_fu_552_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_fu_344_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln90_fu_381_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln90_fu_384_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln90_fu_388_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_412_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp142_not_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln31_1_fu_450_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_463_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp6_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp142_not_mid1_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln90_2_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln90_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_1_fu_443_p3 : STD_LOGIC_VECTOR (495 downto 0);
    signal tmp_3_fu_566_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln45_2_fu_556_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_585_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln62_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln62_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln69_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln76_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln62_fu_717_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln69_fu_728_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln61_fu_757_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln76_fu_739_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln61_1_fu_763_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln83_fu_750_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln61_2_fu_770_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln90_1_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal value_nms_5_fu_777_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (69 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((m_axi_gmem1_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter2_state4)) then 
                        ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((not(((m_axi_gmem1_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grad_nms_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem1_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                grad_nms_fu_138 <= ap_const_lv8_0;
            elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln31_reg_888_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                grad_nms_fu_138 <= line_buf_grad_q1(23 downto 16);
            end if; 
        end if;
    end process;

    indvar_flatten_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem1_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_fu_154 <= ap_const_lv19_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln31_fu_315_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_fu_154 <= add_ln31_fu_321_p2;
            end if; 
        end if;
    end process;

    p_03077_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem1_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_03077_fu_130 <= ap_const_lv8_0;
            elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln31_reg_888_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_03077_fu_130 <= p_030_17379_fu_158;
            end if; 
        end if;
    end process;

    p_030_17379_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem1_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_030_17379_fu_158 <= ap_const_lv8_0;
            elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln31_reg_888_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_030_17379_fu_158 <= line_buf_value_q1(15 downto 8);
            end if; 
        end if;
    end process;

    p_030_285_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem1_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_030_285_fu_142 <= ap_const_lv8_0;
            elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln31_reg_888_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_030_285_fu_142 <= p_030_2_187_fu_166;
            end if; 
        end if;
    end process;

    p_030_2_187_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem1_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_030_2_187_fu_166 <= ap_const_lv8_0;
            elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln31_reg_888_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_030_2_187_fu_166 <= trunc_ln45_fu_552_p1;
            end if; 
        end if;
    end process;

    shiftreg_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem1_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                shiftreg_fu_126 <= ap_const_lv496_lc_1;
            elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln31_reg_888_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                shiftreg_fu_126 <= ap_phi_mux_empty_phi_fu_240_p4(511 downto 16);
            end if; 
        end if;
    end process;

    value_nms_3_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem1_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                value_nms_3_fu_134 <= ap_const_lv8_0;
            elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                value_nms_3_fu_134 <= value_nms_4_reg_931;
            end if; 
        end if;
    end process;

    value_nms_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem1_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                value_nms_fu_162 <= ap_const_lv8_0;
            elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln31_reg_888_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                value_nms_fu_162 <= line_buf_value_q1(23 downto 16);
            end if; 
        end if;
    end process;

    xi_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem1_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                xi_fu_146 <= ap_const_lv10_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln31_fu_315_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                xi_fu_146 <= add_ln32_fu_354_p2;
            end if; 
        end if;
    end process;

    yi_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem1_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                yi_fu_150 <= ap_const_lv10_0;
            elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln31_reg_888_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                yi_fu_150 <= select_ln31_2_fu_456_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op125_read_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                gmem0_addr_read_reg_921 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln31_reg_888 <= icmp_ln31_fu_315_p2;
                icmp_ln31_reg_888_pp0_iter1_reg <= icmp_ln31_reg_888;
                icmp_ln32_reg_892_pp0_iter1_reg <= icmp_ln32_reg_892;
                icmp_ln45_reg_905_pp0_iter1_reg <= icmp_ln45_reg_905;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_315_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln32_reg_892 <= icmp_ln32_fu_330_p2;
                icmp_ln45_reg_905 <= icmp_ln45_fu_348_p2;
                select_ln31_reg_899 <= select_ln31_fu_336_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_888_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln61_1_reg_983 <= icmp_ln61_1_fu_646_p2;
                icmp_ln61_2_reg_988 <= icmp_ln61_2_fu_652_p2;
                icmp_ln61_3_reg_993 <= icmp_ln61_3_fu_658_p2;
                icmp_ln61_reg_978 <= icmp_ln61_fu_640_p2;
                icmp_ln63_reg_947 <= icmp_ln63_fu_604_p2;
                icmp_ln69_reg_952 <= icmp_ln69_fu_610_p2;
                icmp_ln70_reg_957 <= icmp_ln70_fu_616_p2;
                icmp_ln76_reg_962 <= icmp_ln76_fu_622_p2;
                icmp_ln77_reg_968 <= icmp_ln77_fu_628_p2;
                icmp_ln83_reg_973 <= icmp_ln83_fu_634_p2;
                select_ln31_3_reg_942 <= select_ln31_3_fu_491_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_888 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln90_reg_926 <= icmp_ln90_fu_394_p2;
                line_buf_grad_addr_reg_915 <= zext_ln32_1_fu_376_p1(9 - 1 downto 0);
                line_buf_value_addr_reg_909 <= zext_ln32_1_fu_376_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln90_reg_926_pp0_iter2_reg <= icmp_ln90_reg_926;
                value_nms_4_reg_931 <= value_nms_fu_162;
                value_nms_6_reg_998 <= value_nms_6_fu_788_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem1_AWREADY, m_axi_gmem1_BVALID, ap_CS_fsm_state74, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((m_axi_gmem1_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state74) and (m_axi_gmem1_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln31_1_fu_450_p2 <= std_logic_vector(unsigned(yi_fu_150) + unsigned(ap_const_lv10_1));
    add_ln31_fu_321_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_154) + unsigned(ap_const_lv19_1));
    add_ln32_fu_354_p2 <= std_logic_vector(unsigned(select_ln31_fu_336_p3) + unsigned(ap_const_lv10_1));
    add_ln90_fu_388_p2 <= std_logic_vector(unsigned(zext_ln90_fu_384_p1) + unsigned(ap_const_lv10_3FC));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state74 <= ap_CS_fsm(69);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, m_axi_gmem1_AWREADY)
    begin
        if (((m_axi_gmem1_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;

    ap_ST_fsm_state74_blk_assign_proc : process(m_axi_gmem1_BVALID)
    begin
        if ((m_axi_gmem1_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state74_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state74_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_gmem0_RVALID, ap_enable_reg_pp0_iter1, ap_predicate_op125_read_state3)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_predicate_op125_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmem0_RVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_gmem1_WREADY, m_axi_gmem0_RVALID, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_predicate_op125_read_state3)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_predicate_op125_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmem0_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (m_axi_gmem1_WREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_gmem1_WREADY, m_axi_gmem0_RVALID, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_predicate_op125_read_state3)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_predicate_op125_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmem0_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (m_axi_gmem1_WREADY = ap_const_logic_0)));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(m_axi_gmem0_RVALID, ap_predicate_op125_read_state3)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((ap_predicate_op125_read_state3 = ap_const_boolean_1) and (m_axi_gmem0_RVALID = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter2_state4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter2_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter2_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln31_fu_315_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln31_fu_315_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_gmem1_BVALID, ap_CS_fsm_state74)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state74) and (m_axi_gmem1_BVALID = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_empty_phi_fu_240_p4_assign_proc : process(icmp_ln31_reg_888_pp0_iter1_reg, icmp_ln45_reg_905_pp0_iter1_reg, gmem0_addr_read_reg_921, ap_phi_reg_pp0_iter2_empty_reg_237, zext_ln32_fu_498_p1)
    begin
        if ((icmp_ln31_reg_888_pp0_iter1_reg = ap_const_lv1_0)) then
            if ((icmp_ln45_reg_905_pp0_iter1_reg = ap_const_lv1_0)) then 
                ap_phi_mux_empty_phi_fu_240_p4 <= zext_ln32_fu_498_p1;
            elsif ((icmp_ln45_reg_905_pp0_iter1_reg = ap_const_lv1_1)) then 
                ap_phi_mux_empty_phi_fu_240_p4 <= gmem0_addr_read_reg_921;
            else 
                ap_phi_mux_empty_phi_fu_240_p4 <= ap_phi_reg_pp0_iter2_empty_reg_237;
            end if;
        else 
            ap_phi_mux_empty_phi_fu_240_p4 <= ap_phi_reg_pp0_iter2_empty_reg_237;
        end if; 
    end process;

    ap_phi_reg_pp0_iter2_empty_reg_237 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op125_read_state3_assign_proc : process(icmp_ln31_reg_888, icmp_ln45_reg_905)
    begin
                ap_predicate_op125_read_state3 <= ((icmp_ln45_reg_905 = ap_const_lv1_1) and (icmp_ln31_reg_888 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(m_axi_gmem1_BVALID, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) and (m_axi_gmem1_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cmp142_not_fu_428_p2 <= "1" when (unsigned(yi_fu_150) > unsigned(ap_const_lv10_1FC)) else "0";
    cmp142_not_mid1_fu_479_p2 <= "1" when (unsigned(add_ln31_1_fu_450_p2) > unsigned(ap_const_lv10_1FC)) else "0";

    gmem0_blk_n_R_assign_proc : process(m_axi_gmem0_RVALID, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln31_reg_888, icmp_ln45_reg_905)
    begin
        if (((icmp_ln45_reg_905 = ap_const_lv1_1) and (icmp_ln31_reg_888 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gmem0_blk_n_R <= m_axi_gmem0_RVALID;
        else 
            gmem0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_AW_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_gmem1_AWREADY)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem1_blk_n_AW <= m_axi_gmem1_AWREADY;
        else 
            gmem1_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_B_assign_proc : process(m_axi_gmem1_BVALID, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            gmem1_blk_n_B <= m_axi_gmem1_BVALID;
        else 
            gmem1_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_W_assign_proc : process(m_axi_gmem1_WREADY, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            gmem1_blk_n_W <= m_axi_gmem1_WREADY;
        else 
            gmem1_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp6_fu_473_p2 <= "1" when (tmp_1_fu_463_p4 = ap_const_lv8_0) else "0";
    icmp_fu_422_p2 <= "1" when (tmp_fu_412_p4 = ap_const_lv8_0) else "0";
    icmp_ln31_fu_315_p2 <= "1" when (indvar_flatten_fu_154 = ap_const_lv19_40000) else "0";
    icmp_ln32_fu_330_p2 <= "1" when (xi_fu_146 = ap_const_lv10_200) else "0";
    icmp_ln45_fu_348_p2 <= "1" when (trunc_ln32_fu_344_p1 = ap_const_lv5_0) else "0";
    icmp_ln61_1_fu_646_p2 <= "1" when (grad_nms_fu_138 = ap_const_lv8_2D) else "0";
    icmp_ln61_2_fu_652_p2 <= "1" when (grad_nms_fu_138 = ap_const_lv8_5A) else "0";
    icmp_ln61_3_fu_658_p2 <= "1" when (grad_nms_fu_138 = ap_const_lv8_87) else "0";
    icmp_ln61_fu_640_p2 <= "1" when (grad_nms_fu_138 = ap_const_lv8_0) else "0";
    icmp_ln62_fu_707_p2 <= "1" when (unsigned(value_nms_3_fu_134) > unsigned(value_nms_4_reg_931)) else "0";
    icmp_ln63_fu_604_p2 <= "1" when (unsigned(value_nms_fu_162) < unsigned(tmp_6_fu_513_p4)) else "0";
    icmp_ln69_fu_610_p2 <= "1" when (unsigned(p_03077_fu_130) > unsigned(value_nms_fu_162)) else "0";
    icmp_ln70_fu_616_p2 <= "1" when (unsigned(value_nms_fu_162) < unsigned(trunc_ln45_fu_552_p1)) else "0";
    icmp_ln76_fu_622_p2 <= "1" when (unsigned(tmp_2_fu_503_p4) > unsigned(value_nms_fu_162)) else "0";
    icmp_ln77_fu_628_p2 <= "1" when (unsigned(value_nms_fu_162) < unsigned(p_030_2_187_fu_166)) else "0";
    icmp_ln83_fu_634_p2 <= "1" when (unsigned(p_030_285_fu_142) > unsigned(value_nms_fu_162)) else "0";
    icmp_ln90_fu_394_p2 <= "1" when (unsigned(add_ln90_fu_388_p2) > unsigned(ap_const_lv10_1F8)) else "0";
    line_buf_grad_address0 <= line_buf_grad_addr_reg_915;
    line_buf_grad_address1 <= zext_ln32_1_fu_376_p1(9 - 1 downto 0);

    line_buf_grad_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buf_grad_ce0 <= ap_const_logic_1;
        else 
            line_buf_grad_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_grad_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buf_grad_ce1 <= ap_const_logic_1;
        else 
            line_buf_grad_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buf_grad_d0 <= (trunc_ln45_2_fu_556_p4 & tmp_4_fu_585_p4);

    line_buf_grad_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln31_reg_888_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln31_reg_888_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buf_grad_we0 <= ap_const_lv3_7;
        else 
            line_buf_grad_we0 <= ap_const_lv3_0;
        end if; 
    end process;

    line_buf_value_address0 <= line_buf_value_addr_reg_909;
    line_buf_value_address1 <= zext_ln32_1_fu_376_p1(9 - 1 downto 0);

    line_buf_value_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buf_value_ce0 <= ap_const_logic_1;
        else 
            line_buf_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_value_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buf_value_ce1 <= ap_const_logic_1;
        else 
            line_buf_value_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buf_value_d0 <= (trunc_ln45_fu_552_p1 & tmp_3_fu_566_p4);

    line_buf_value_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln31_reg_888_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln31_reg_888_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buf_value_we0 <= ap_const_lv3_7;
        else 
            line_buf_value_we0 <= ap_const_lv3_0;
        end if; 
    end process;

    m_axi_gmem0_ARADDR <= ap_const_lv64_0;
    m_axi_gmem0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem0_ARID <= ap_const_lv1_0;
    m_axi_gmem0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem0_ARVALID <= ap_const_logic_0;
    m_axi_gmem0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_BREADY <= ap_const_logic_0;

    m_axi_gmem0_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op125_read_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op125_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_gmem0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_WDATA <= ap_const_lv512_lc_1;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv64_0;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_WVALID <= ap_const_logic_0;
    m_axi_gmem1_ARADDR <= ap_const_lv64_0;
    m_axi_gmem1_ARBURST <= ap_const_lv2_0;
    m_axi_gmem1_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem1_ARID <= ap_const_lv1_0;
    m_axi_gmem1_ARLEN <= ap_const_lv32_0;
    m_axi_gmem1_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem1_ARPROT <= ap_const_lv3_0;
    m_axi_gmem1_ARQOS <= ap_const_lv4_0;
    m_axi_gmem1_ARREGION <= ap_const_lv4_0;
    m_axi_gmem1_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem1_ARUSER <= ap_const_lv1_0;
    m_axi_gmem1_ARVALID <= ap_const_logic_0;
    m_axi_gmem1_AWADDR <= out_r;
    m_axi_gmem1_AWBURST <= ap_const_lv2_0;
    m_axi_gmem1_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem1_AWID <= ap_const_lv1_0;
    m_axi_gmem1_AWLEN <= ap_const_lv32_40000;
    m_axi_gmem1_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem1_AWPROT <= ap_const_lv3_0;
    m_axi_gmem1_AWQOS <= ap_const_lv4_0;
    m_axi_gmem1_AWREGION <= ap_const_lv4_0;
    m_axi_gmem1_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem1_AWUSER <= ap_const_lv1_0;

    m_axi_gmem1_AWVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_gmem1_AWREADY)
    begin
        if ((not(((m_axi_gmem1_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem1_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem1_BREADY_assign_proc : process(m_axi_gmem1_BVALID, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) and (m_axi_gmem1_BVALID = ap_const_logic_1))) then 
            m_axi_gmem1_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem1_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem1_RREADY <= ap_const_logic_0;
    m_axi_gmem1_WDATA <= value_nms_6_reg_998;
    m_axi_gmem1_WID <= ap_const_lv1_0;
    m_axi_gmem1_WLAST <= ap_const_logic_0;
    m_axi_gmem1_WSTRB <= ap_const_lv1_1;
    m_axi_gmem1_WUSER <= ap_const_lv1_0;

    m_axi_gmem1_WVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            m_axi_gmem1_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem1_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln62_fu_712_p2 <= (icmp_ln63_reg_947 or icmp_ln62_fu_707_p2);
    or_ln69_fu_724_p2 <= (icmp_ln70_reg_957 or icmp_ln69_reg_952);
    or_ln76_fu_735_p2 <= (icmp_ln77_reg_968 or icmp_ln76_reg_962);
    or_ln83_fu_746_p2 <= (icmp_ln83_reg_973 or icmp_ln76_reg_962);
    or_ln90_1_fu_784_p2 <= (select_ln31_3_reg_942 or icmp_ln90_reg_926_pp0_iter2_reg);
    or_ln90_2_fu_485_p2 <= (icmp6_fu_473_p2 or cmp142_not_mid1_fu_479_p2);
    or_ln90_fu_434_p2 <= (icmp_fu_422_p2 or cmp142_not_fu_428_p2);
    select_ln31_1_fu_443_p3 <= 
        ap_const_lv496_lc_1 when (icmp_ln32_reg_892_pp0_iter1_reg(0) = '1') else 
        shiftreg_fu_126;
    select_ln31_2_fu_456_p3 <= 
        add_ln31_1_fu_450_p2 when (icmp_ln32_reg_892_pp0_iter1_reg(0) = '1') else 
        yi_fu_150;
    select_ln31_3_fu_491_p3 <= 
        or_ln90_2_fu_485_p2 when (icmp_ln32_reg_892_pp0_iter1_reg(0) = '1') else 
        or_ln90_fu_434_p2;
    select_ln31_fu_336_p3 <= 
        ap_const_lv10_0 when (icmp_ln32_fu_330_p2(0) = '1') else 
        xi_fu_146;
    select_ln61_1_fu_763_p3 <= 
        select_ln69_fu_728_p3 when (icmp_ln61_1_reg_983(0) = '1') else 
        select_ln61_fu_757_p3;
    select_ln61_2_fu_770_p3 <= 
        select_ln76_fu_739_p3 when (icmp_ln61_2_reg_988(0) = '1') else 
        select_ln61_1_fu_763_p3;
    select_ln61_fu_757_p3 <= 
        select_ln62_fu_717_p3 when (icmp_ln61_reg_978(0) = '1') else 
        value_nms_4_reg_931;
    select_ln62_fu_717_p3 <= 
        ap_const_lv8_0 when (or_ln62_fu_712_p2(0) = '1') else 
        value_nms_4_reg_931;
    select_ln69_fu_728_p3 <= 
        ap_const_lv8_0 when (or_ln69_fu_724_p2(0) = '1') else 
        value_nms_4_reg_931;
    select_ln76_fu_739_p3 <= 
        ap_const_lv8_0 when (or_ln76_fu_735_p2(0) = '1') else 
        value_nms_4_reg_931;
    select_ln83_fu_750_p3 <= 
        ap_const_lv8_0 when (or_ln83_fu_746_p2(0) = '1') else 
        value_nms_4_reg_931;
    tmp_1_fu_463_p4 <= add_ln31_1_fu_450_p2(9 downto 2);
    tmp_2_fu_503_p4 <= line_buf_value_q1(15 downto 8);
    tmp_3_fu_566_p4 <= line_buf_value_q1(23 downto 8);
    tmp_4_fu_585_p4 <= line_buf_grad_q1(23 downto 8);
    tmp_6_fu_513_p4 <= line_buf_value_q1(23 downto 16);
    tmp_fu_412_p4 <= yi_fu_150(9 downto 2);
    trunc_ln32_fu_344_p1 <= select_ln31_fu_336_p3(5 - 1 downto 0);
    trunc_ln45_2_fu_556_p4 <= ap_phi_mux_empty_phi_fu_240_p4(15 downto 8);
    trunc_ln45_fu_552_p1 <= ap_phi_mux_empty_phi_fu_240_p4(8 - 1 downto 0);
    trunc_ln90_fu_381_p1 <= select_ln31_reg_899(9 - 1 downto 0);
    value_nms_5_fu_777_p3 <= 
        select_ln83_fu_750_p3 when (icmp_ln61_3_reg_993(0) = '1') else 
        select_ln61_2_fu_770_p3;
    value_nms_6_fu_788_p3 <= 
        ap_const_lv8_0 when (or_ln90_1_fu_784_p2(0) = '1') else 
        value_nms_5_fu_777_p3;
    zext_ln32_1_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_reg_899),64));
    zext_ln32_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_1_fu_443_p3),512));
    zext_ln90_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln90_fu_381_p1),10));
end behav;

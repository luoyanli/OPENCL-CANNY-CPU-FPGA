-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gau is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of gau is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "gau_gau,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.750000,HLS_SYN_LAT=68110,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=463,HLS_SYN_LUT=877,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_16 : STD_LOGIC_VECTOR (7 downto 0) := "00010110";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal empty_reg_229 : STD_LOGIC_VECTOR (9 downto 0);
    signal xi_reg_284 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond4613_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4613_reg_825 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal empty_19_fu_301_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal empty_20_fu_307_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_20_reg_834 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_311_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_reg_839 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_321_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_reg_844 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_21_fu_329_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_21_reg_849 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_22_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_22_reg_854 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_25_fu_349_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_25_reg_860 : STD_LOGIC_VECTOR (4 downto 0);
    signal window_buf_0_1_0_load_reg_901 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal window_buf_0_2_0_load_reg_906 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_1_0_load_reg_911 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_2_0_load_reg_916 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_1_0_load_reg_921 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_2_0_load_reg_926 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_35_fu_437_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal next_mul_fu_443_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond4512_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_urem_fu_505_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln31_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln31_fu_543_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln31_reg_1001 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_fu_553_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_reg_1006 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln32_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1011 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state8_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state12_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state13_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln32_reg_1011_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1011_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1011_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1011_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln32_fu_576_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal line_buf_addr_1_reg_1020 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buf_addr_1_reg_1020_pp2_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buf_addr_1_reg_1020_pp2_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln44_fu_582_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln44_reg_1026 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln44_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_reg_1031 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_reg_1031_pp2_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_reg_1031_pp2_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_reg_1031_pp2_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buf_0_2_reg_1041 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_2_reg_1047 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_2_reg_1047_pp2_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_2_reg_1053 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1060 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_buf_0_1_2_reg_1065 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln62_3_fu_666_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_3_reg_1070 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_5_fu_682_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_5_reg_1075 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln_reg_1080 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_condition_pp2_exit_iter4_state12 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal line_buf_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buf_ce0 : STD_LOGIC;
    signal line_buf_we0 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buf_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal line_buf_ce1 : STD_LOGIC;
    signal line_buf_q1 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_33_reg_240 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal phi_mul_reg_251 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_urem_reg_262 : STD_LOGIC_VECTOR (3 downto 0);
    signal yi_reg_273 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_cast11_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln32_fu_561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal window_buf_0_1_fu_158 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_0_1_1_fu_162 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_1_fu_166 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_1_1_fu_170 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_1_fu_174 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_1_1_fu_178 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_31_fu_396_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mask_fu_406_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_633_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_23_fu_341_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_24_fu_359_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_26_fu_364_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_27_fu_368_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_29_fu_378_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_30_fu_384_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_28_fu_371_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_demorgan_fu_390_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_32_fu_403_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal next_urem_fu_493_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_37_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_fu_549_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln32_1_fu_566_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln62_4_fu_651_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln62_fu_640_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln62_7_fu_659_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln62_8_fu_663_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln62_6_fu_647_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln62_4_fu_672_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln62_2_fu_644_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln62_12_fu_678_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_fu_712_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln62_1_fu_723_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln62_2_fu_735_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln62_3_fu_747_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln62_3_fu_731_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln62_1_fu_719_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_fu_758_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln62_5_fu_754_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln62_4_fu_743_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln62_1_fu_768_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln62_9_fu_764_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln62_10_fu_774_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln62_11_fu_784_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln62_13_fu_787_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln62_6_fu_790_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln62_2_fu_778_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln62_14_fu_796_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln62_7_fu_800_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component gau_line_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (2 downto 0);
        d0 : IN STD_LOGIC_VECTOR (23 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;



begin
    line_buf_U : component gau_line_buf
    generic map (
        DataWidth => 24,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buf_address0,
        ce0 => line_buf_ce0,
        we0 => line_buf_we0,
        d0 => line_buf_d0,
        address1 => line_buf_addr_1_reg_1020,
        ce1 => line_buf_ce1,
        q1 => line_buf_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp2_flush_enable)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln31_fu_537_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter4_state12)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln31_fu_537_p2 = ap_const_lv1_0)))) then 
                    ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter4_state12))) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter3;
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln31_fu_537_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_33_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                empty_33_reg_240 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond4512_fu_431_p2 = ap_const_lv1_0))) then 
                empty_33_reg_240 <= empty_35_fu_437_p2;
            end if; 
        end if;
    end process;

    empty_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond4613_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                empty_reg_229 <= empty_19_fu_301_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                empty_reg_229 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                phi_mul_reg_251 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond4512_fu_431_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_251 <= next_mul_fu_443_p2;
            end if; 
        end if;
    end process;

    phi_urem_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                phi_urem_reg_262 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond4512_fu_431_p2 = ap_const_lv1_0))) then 
                phi_urem_reg_262 <= idx_urem_fu_505_p3;
            end if; 
        end if;
    end process;

    window_buf_0_1_1_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln32_reg_1011_pp2_iter2_reg = ap_const_lv1_0))) then 
                window_buf_0_1_1_fu_162 <= window_buf_0_2_reg_1041;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                window_buf_0_1_1_fu_162 <= window_buf_0_2_0_load_reg_906;
            end if; 
        end if;
    end process;

    window_buf_0_1_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln32_reg_1011_pp2_iter2_reg = ap_const_lv1_0))) then 
                window_buf_0_1_fu_158 <= window_buf_0_1_1_fu_162;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                window_buf_0_1_fu_158 <= window_buf_0_1_0_load_reg_901;
            end if; 
        end if;
    end process;

    window_buf_1_1_1_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (icmp_ln32_reg_1011_pp2_iter3_reg = ap_const_lv1_0))) then 
                window_buf_1_1_1_fu_170 <= window_buf_1_2_reg_1047_pp2_iter3_reg;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                window_buf_1_1_1_fu_170 <= window_buf_1_2_0_load_reg_916;
            end if; 
        end if;
    end process;

    window_buf_1_1_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (icmp_ln32_reg_1011_pp2_iter3_reg = ap_const_lv1_0))) then 
                window_buf_1_1_fu_166 <= window_buf_1_1_1_fu_170;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                window_buf_1_1_fu_166 <= window_buf_1_1_0_load_reg_911;
            end if; 
        end if;
    end process;

    window_buf_2_1_1_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln32_reg_1011_pp2_iter2_reg = ap_const_lv1_0))) then 
                window_buf_2_1_1_fu_178 <= window_buf_2_2_reg_1053;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                window_buf_2_1_1_fu_178 <= window_buf_2_2_0_load_reg_926;
            end if; 
        end if;
    end process;

    window_buf_2_1_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln32_reg_1011_pp2_iter2_reg = ap_const_lv1_0))) then 
                window_buf_2_1_fu_174 <= window_buf_2_1_1_fu_178;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                window_buf_2_1_fu_174 <= window_buf_2_1_0_load_reg_921;
            end if; 
        end if;
    end process;

    xi_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln32_fu_570_p2 = ap_const_lv1_0))) then 
                xi_reg_284 <= add_ln32_fu_576_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln31_fu_537_p2 = ap_const_lv1_0))) then 
                xi_reg_284 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    yi_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                yi_reg_273 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                yi_reg_273 <= add_ln31_reg_1001;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln31_reg_1001 <= add_ln31_fu_543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln32_fu_570_p2 = ap_const_lv1_0))) then
                add_ln44_reg_1026 <= add_ln44_fu_582_p2;
                line_buf_addr_1_reg_1020 <= zext_ln32_fu_561_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln32_reg_1011_pp2_iter2_reg = ap_const_lv1_0))) then
                add_ln62_3_reg_1070 <= add_ln62_3_fu_666_p2;
                add_ln62_5_reg_1075 <= add_ln62_5_fu_682_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond4613_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_20_reg_834 <= empty_20_fu_307_p1;
                    empty_21_reg_849(4 downto 3) <= empty_21_fu_329_p2(4 downto 3);
                empty_22_reg_854 <= empty_22_fu_335_p2;
                empty_25_reg_860 <= empty_25_fu_349_p2;
                tmp_2_reg_839 <= empty_reg_229(9 downto 8);
                    tmp_3_reg_844(4 downto 3) <= tmp_3_fu_321_p3(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond4613_reg_825 <= exitcond4613_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln32_reg_1011 <= icmp_ln32_fu_570_p2;
                icmp_ln32_reg_1011_pp2_iter1_reg <= icmp_ln32_reg_1011;
                line_buf_addr_1_reg_1020_pp2_iter1_reg <= line_buf_addr_1_reg_1020;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln32_reg_1011_pp2_iter2_reg <= icmp_ln32_reg_1011_pp2_iter1_reg;
                icmp_ln32_reg_1011_pp2_iter3_reg <= icmp_ln32_reg_1011_pp2_iter2_reg;
                icmp_ln32_reg_1011_pp2_iter4_reg <= icmp_ln32_reg_1011_pp2_iter3_reg;
                line_buf_addr_1_reg_1020_pp2_iter2_reg <= line_buf_addr_1_reg_1020_pp2_iter1_reg;
                window_buf_0_1_2_reg_1065 <= window_buf_0_1_1_fu_162;
                window_buf_1_2_reg_1047_pp2_iter3_reg <= window_buf_1_2_reg_1047;
                    zext_ln44_reg_1031_pp2_iter2_reg(15 downto 0) <= zext_ln44_reg_1031(15 downto 0);
                    zext_ln44_reg_1031_pp2_iter3_reg(15 downto 0) <= zext_ln44_reg_1031_pp2_iter2_reg(15 downto 0);
                    zext_ln44_reg_1031_pp2_iter4_reg(15 downto 0) <= zext_ln44_reg_1031_pp2_iter3_reg(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln32_reg_1011_pp2_iter1_reg = ap_const_lv1_0))) then
                tmp_1_reg_1060 <= line_buf_q1(23 downto 8);
                window_buf_0_2_reg_1041 <= line_buf_q1(15 downto 8);
                window_buf_1_2_reg_1047 <= line_buf_q1(23 downto 16);
                window_buf_2_2_reg_1053 <= data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln31_fu_537_p2 = ap_const_lv1_0))) then
                    tmp_6_reg_1006(15 downto 8) <= tmp_6_fu_553_p3(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln32_reg_1011_pp2_iter3_reg = ap_const_lv1_0))) then
                trunc_ln_reg_1080 <= add_ln62_7_fu_800_p2(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln32_reg_1011 = ap_const_lv1_0))) then
                    zext_ln44_reg_1031(15 downto 0) <= zext_ln44_fu_587_p1(15 downto 0);
            end if;
        end if;
    end process;
    tmp_3_reg_844(2 downto 0) <= "000";
    empty_21_reg_849(2 downto 0) <= "111";
    tmp_6_reg_1006(7 downto 0) <= "00000000";
    zext_ln44_reg_1031(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln44_reg_1031_pp2_iter2_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln44_reg_1031_pp2_iter3_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln44_reg_1031_pp2_iter4_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond4613_fu_295_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state5, exitcond4512_fu_431_p2, icmp_ln31_fu_537_p2, ap_CS_fsm_state7, ap_block_pp0_stage0_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond4613_fu_295_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond4613_fu_295_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond4512_fu_431_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln31_fu_537_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln31_fu_543_p2 <= std_logic_vector(unsigned(yi_reg_273) + unsigned(ap_const_lv9_1));
    add_ln32_fu_576_p2 <= std_logic_vector(unsigned(xi_reg_284) + unsigned(ap_const_lv9_1));
    add_ln44_fu_582_p2 <= std_logic_vector(unsigned(tmp_6_reg_1006) + unsigned(zext_ln32_1_fu_566_p1));
    add_ln62_1_fu_768_p2 <= std_logic_vector(unsigned(zext_ln62_5_fu_754_p1) + unsigned(zext_ln62_4_fu_743_p1));
    add_ln62_2_fu_778_p2 <= std_logic_vector(unsigned(zext_ln62_9_fu_764_p1) + unsigned(zext_ln62_10_fu_774_p1));
    add_ln62_3_fu_666_p2 <= std_logic_vector(unsigned(zext_ln62_fu_640_p1) + unsigned(zext_ln62_7_fu_659_p1));
    add_ln62_4_fu_672_p2 <= std_logic_vector(unsigned(zext_ln62_8_fu_663_p1) + unsigned(zext_ln62_6_fu_647_p1));
    add_ln62_5_fu_682_p2 <= std_logic_vector(unsigned(zext_ln62_2_fu_644_p1) + unsigned(zext_ln62_12_fu_678_p1));
    add_ln62_6_fu_790_p2 <= std_logic_vector(unsigned(zext_ln62_11_fu_784_p1) + unsigned(zext_ln62_13_fu_787_p1));
    add_ln62_7_fu_800_p2 <= std_logic_vector(unsigned(add_ln62_2_fu_778_p2) + unsigned(zext_ln62_14_fu_796_p1));
    add_ln62_fu_758_p2 <= std_logic_vector(unsigned(zext_ln62_3_fu_731_p1) + unsigned(zext_ln62_1_fu_719_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(7);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond4613_fu_295_p2)
    begin
        if ((exitcond4613_fu_295_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter4_state12_assign_proc : process(ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0))) then 
            ap_condition_pp2_exit_iter4_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter4_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_flush_enable_assign_proc : process(icmp_ln32_fu_570_p2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln32_fu_570_p2 = ap_const_lv1_1))) then 
            ap_condition_pp2_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp2_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln31_fu_537_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln31_fu_537_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5)
    begin
        if (((ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln31_fu_537_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln31_fu_537_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data_address0 <= zext_ln44_fu_587_p1(16 - 1 downto 0);

    data_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_19_fu_301_p2 <= std_logic_vector(unsigned(empty_reg_229) + unsigned(ap_const_lv10_1));
    empty_20_fu_307_p1 <= empty_reg_229(8 - 1 downto 0);
    empty_21_fu_329_p2 <= (tmp_3_fu_321_p3 or ap_const_lv5_7);
    empty_22_fu_335_p2 <= "1" when (unsigned(tmp_3_fu_321_p3) > unsigned(empty_21_fu_329_p2)) else "0";
    empty_23_fu_341_p3 <= 
        tmp_3_fu_321_p3 when (empty_22_fu_335_p2(0) = '1') else 
        empty_21_fu_329_p2;
    empty_24_fu_359_p3 <= 
        empty_21_reg_849 when (empty_22_reg_854(0) = '1') else 
        tmp_3_reg_844;
    empty_25_fu_349_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(empty_23_fu_341_p3));
    empty_26_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_24_fu_359_p3),24));
    empty_27_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_25_reg_860),24));
    empty_28_fu_371_p3 <= 
        ap_const_lv24_0 when (empty_22_reg_854(0) = '1') else 
        ap_const_lv24_0;
    empty_29_fu_378_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & empty_26_fu_364_p1(24-1 downto 0)))));
    empty_30_fu_384_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & empty_27_fu_368_p1(24-1 downto 0)))));
    empty_31_fu_396_p2 <= (p_demorgan_fu_390_p2 and empty_28_fu_371_p3);
    empty_32_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_839),3));
    empty_35_fu_437_p2 <= std_logic_vector(unsigned(empty_33_reg_240) + unsigned(ap_const_lv4_1));
    empty_37_fu_499_p2 <= "1" when (unsigned(next_urem_fu_493_p2) < unsigned(ap_const_lv4_3)) else "0";
    empty_39_fu_549_p1 <= yi_reg_273(8 - 1 downto 0);
    exitcond4512_fu_431_p2 <= "1" when (empty_33_reg_240 = ap_const_lv4_9) else "0";
    exitcond4613_fu_295_p2 <= "1" when (empty_reg_229 = ap_const_lv10_300) else "0";
    icmp_ln31_fu_537_p2 <= "1" when (yi_reg_273 = ap_const_lv9_100) else "0";
    icmp_ln32_fu_570_p2 <= "1" when (xi_reg_284 = ap_const_lv9_100) else "0";
    idx_urem_fu_505_p3 <= 
        next_urem_fu_493_p2 when (empty_37_fu_499_p2(0) = '1') else 
        ap_const_lv4_0;

    line_buf_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, line_buf_addr_1_reg_1020_pp2_iter2_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter3, p_cast11_fu_355_p1, ap_block_pp0_stage0, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            line_buf_address0 <= line_buf_addr_1_reg_1020_pp2_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buf_address0 <= p_cast11_fu_355_p1(8 - 1 downto 0);
        else 
            line_buf_address0 <= "XXXXXXXX";
        end if; 
    end process;


    line_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1)))) then 
            line_buf_ce0 <= ap_const_logic_1;
        else 
            line_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            line_buf_ce1 <= ap_const_logic_1;
        else 
            line_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter3, ap_block_pp0_stage0, ap_block_pp2_stage0, empty_31_fu_396_p2, tmp_5_fu_633_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            line_buf_d0 <= tmp_5_fu_633_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buf_d0 <= empty_31_fu_396_p2;
        else 
            line_buf_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    line_buf_we0_assign_proc : process(exitcond4613_reg_825, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp2_stage0_11001, icmp_ln32_reg_1011_pp2_iter2_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter3, mask_fu_406_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln32_reg_1011_pp2_iter2_reg = ap_const_lv1_0))) then 
            line_buf_we0 <= ap_const_lv3_7;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond4613_reg_825 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buf_we0 <= mask_fu_406_p2;
        else 
            line_buf_we0 <= ap_const_lv3_0;
        end if; 
    end process;

    mask_fu_406_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv3_1),to_integer(unsigned('0' & empty_32_fu_403_p1(3-1 downto 0)))));
    next_mul_fu_443_p2 <= std_logic_vector(unsigned(ap_const_lv8_16) + unsigned(phi_mul_reg_251));
    next_urem_fu_493_p2 <= std_logic_vector(unsigned(phi_urem_reg_262) + unsigned(ap_const_lv4_1));
    out_r_address0 <= zext_ln44_reg_1031_pp2_iter4_reg(16 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter5 = ap_const_logic_1))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= trunc_ln_reg_1080;

    out_r_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln32_reg_1011_pp2_iter4_reg, ap_enable_reg_pp2_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (icmp_ln32_reg_1011_pp2_iter4_reg = ap_const_lv1_0))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast11_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_20_reg_834),64));
    p_demorgan_fu_390_p2 <= (empty_30_fu_384_p2 and empty_29_fu_378_p2);
    shl_ln62_1_fu_723_p3 <= (window_buf_1_1_fu_166 & ap_const_lv1_0);
    shl_ln62_2_fu_735_p3 <= (window_buf_1_1_1_fu_170 & ap_const_lv2_0);
    shl_ln62_3_fu_747_p3 <= (window_buf_1_2_reg_1047_pp2_iter3_reg & ap_const_lv1_0);
    shl_ln62_4_fu_651_p3 <= (window_buf_2_1_1_fu_178 & ap_const_lv1_0);
    shl_ln_fu_712_p3 <= (window_buf_0_1_2_reg_1065 & ap_const_lv1_0);
    tmp_2_fu_311_p4 <= empty_reg_229(9 downto 8);
    tmp_3_fu_321_p3 <= (tmp_2_fu_311_p4 & ap_const_lv3_0);
    tmp_5_fu_633_p3 <= (window_buf_2_2_reg_1053 & tmp_1_reg_1060);
    tmp_6_fu_553_p3 <= (empty_39_fu_549_p1 & ap_const_lv8_0);
    window_buf_0_1_0_load_reg_901 <= ap_const_lv8_0;
    window_buf_0_2_0_load_reg_906 <= ap_const_lv8_0;
    window_buf_1_1_0_load_reg_911 <= ap_const_lv8_0;
    window_buf_1_2_0_load_reg_916 <= ap_const_lv8_0;
    window_buf_2_1_0_load_reg_921 <= ap_const_lv8_0;
    window_buf_2_2_0_load_reg_926 <= ap_const_lv8_0;
    zext_ln32_1_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xi_reg_284),16));
    zext_ln32_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xi_reg_284),64));
    zext_ln44_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln44_reg_1026),64));
    zext_ln62_10_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_1_fu_768_p2),12));
    zext_ln62_11_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_3_reg_1070),11));
    zext_ln62_12_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_4_fu_672_p2),10));
    zext_ln62_13_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_5_reg_1075),11));
    zext_ln62_14_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_6_fu_790_p2),12));
    zext_ln62_1_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_712_p3),10));
    zext_ln62_2_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_buf_0_2_reg_1041),10));
    zext_ln62_3_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln62_1_fu_723_p3),10));
    zext_ln62_4_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln62_2_fu_735_p3),11));
    zext_ln62_5_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln62_3_fu_747_p3),11));
    zext_ln62_6_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_buf_2_1_fu_174),9));
    zext_ln62_7_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln62_4_fu_651_p3),10));
    zext_ln62_8_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_buf_2_2_reg_1053),9));
    zext_ln62_9_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_fu_758_p2),12));
    zext_ln62_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_buf_0_1_fu_158),10));
end behav;

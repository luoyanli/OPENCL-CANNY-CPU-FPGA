// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gsn_nms (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        data_0_address0,
        data_0_ce0,
        data_0_q0,
        data_1_address0,
        data_1_ce0,
        data_1_q0,
        out_r_dout,
        out_r_empty_n,
        out_r_read
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_pp0_stage0 = 12'd2;
parameter    ap_ST_fsm_state4 = 12'd4;
parameter    ap_ST_fsm_state5 = 12'd8;
parameter    ap_ST_fsm_state6 = 12'd16;
parameter    ap_ST_fsm_pp2_stage0 = 12'd32;
parameter    ap_ST_fsm_pp2_stage1 = 12'd64;
parameter    ap_ST_fsm_state17 = 12'd128;
parameter    ap_ST_fsm_state18 = 12'd256;
parameter    ap_ST_fsm_state19 = 12'd512;
parameter    ap_ST_fsm_state20 = 12'd1024;
parameter    ap_ST_fsm_state21 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [63:0] m_axi_gmem1_AWADDR;
output  [0:0] m_axi_gmem1_AWID;
output  [31:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [0:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [7:0] m_axi_gmem1_WDATA;
output  [0:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [0:0] m_axi_gmem1_WID;
output  [0:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [63:0] m_axi_gmem1_ARADDR;
output  [0:0] m_axi_gmem1_ARID;
output  [31:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [0:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [7:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [0:0] m_axi_gmem1_RID;
input  [0:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [0:0] m_axi_gmem1_BID;
input  [0:0] m_axi_gmem1_BUSER;
output  [17:0] data_0_address0;
output   data_0_ce0;
input  [7:0] data_0_q0;
output  [17:0] data_1_address0;
output   data_1_ce0;
input  [7:0] data_1_q0;
input  [63:0] out_r_dout;
input   out_r_empty_n;
output   out_r_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem1_AWVALID;
reg m_axi_gmem1_WVALID;
reg m_axi_gmem1_BREADY;
reg data_0_ce0;
reg data_1_ce0;
reg out_r_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem1_blk_n_AW;
wire    ap_CS_fsm_state6;
reg    gmem1_blk_n_W;
wire    ap_CS_fsm_pp2_stage1;
reg    ap_enable_reg_pp2_iter4;
wire    ap_block_pp2_stage1;
reg   [0:0] icmp_ln195_reg_1176;
reg   [0:0] icmp_ln195_reg_1176_pp2_iter4_reg;
reg    gmem1_blk_n_B;
wire    ap_CS_fsm_state21;
reg    out_r_blk_n;
reg   [10:0] empty_reg_278;
reg   [18:0] indvar_flatten_reg_311;
reg   [9:0] yi_reg_323;
reg   [7:0] window_buf_2_1_reg_334;
reg   [7:0] window_buf_1_1_3_reg_344;
reg   [7:0] window_buf_0_1_reg_354;
reg   [9:0] xi_reg_364;
reg   [7:0] window_buf_2_1_3_reg_375;
reg   [15:0] window_buf_1_1_reg_385;
reg   [7:0] window_buf_0_1_3_reg_394;
reg   [63:0] out_1_reg_1040;
reg    ap_block_state1;
wire   [0:0] exitcond5710_i_fu_423_p2;
reg   [0:0] exitcond5710_i_reg_1045;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [10:0] empty_61_fu_429_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [8:0] empty_62_fu_435_p1;
reg   [8:0] empty_62_reg_1054;
wire   [1:0] tmp_fu_439_p4;
reg   [1:0] tmp_reg_1059;
wire   [5:0] tmp_9_fu_449_p3;
reg   [5:0] tmp_9_reg_1064;
wire   [5:0] empty_63_fu_457_p2;
reg   [5:0] empty_63_reg_1069;
wire   [0:0] empty_64_fu_463_p2;
reg   [0:0] empty_64_reg_1074;
wire   [5:0] empty_67_fu_477_p2;
reg   [5:0] empty_67_reg_1080;
wire   [15:0] window_buf_1_2_0_load_reg_1121;
wire    ap_CS_fsm_state5;
wire   [7:0] empty_76_fu_567_p1;
reg   [7:0] empty_76_reg_1126;
wire   [7:0] empty_77_fu_571_p1;
reg   [7:0] empty_77_reg_1131;
wire   [7:0] empty_78_fu_575_p1;
reg   [7:0] empty_78_reg_1136;
wire   [7:0] empty_79_fu_579_p1;
reg   [7:0] empty_79_reg_1141;
wire   [7:0] empty_80_fu_583_p1;
reg   [7:0] empty_80_reg_1146;
wire   [3:0] empty_82_fu_593_p2;
wire   [3:0] idx_urem_fu_673_p3;
wire   [0:0] exitcond569_i_fu_587_p2;
wire   [0:0] icmp_ln195_fu_715_p2;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state7_pp2_stage0_iter0;
wire    ap_block_state9_pp2_stage0_iter1;
wire    ap_block_state11_pp2_stage0_iter2;
wire    ap_block_state13_pp2_stage0_iter3;
wire    ap_block_state15_pp2_stage0_iter4;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln195_reg_1176_pp2_iter1_reg;
reg   [0:0] icmp_ln195_reg_1176_pp2_iter2_reg;
reg   [0:0] icmp_ln195_reg_1176_pp2_iter3_reg;
wire   [9:0] select_ln195_fu_727_p3;
reg   [9:0] select_ln195_reg_1180;
wire   [9:0] select_ln195_1_fu_741_p3;
reg   [9:0] select_ln195_1_reg_1188;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] select_ln195_2_fu_789_p3;
reg   [0:0] select_ln195_2_reg_1193;
reg   [0:0] select_ln195_2_reg_1193_pp2_iter1_reg;
reg   [0:0] select_ln195_2_reg_1193_pp2_iter2_reg;
reg   [0:0] select_ln195_2_reg_1193_pp2_iter3_reg;
wire   [8:0] trunc_ln196_fu_797_p1;
reg   [8:0] trunc_ln196_reg_1198;
reg   [8:0] trunc_ln196_reg_1198_pp2_iter1_reg;
wire   [17:0] add_ln209_fu_805_p2;
reg   [17:0] add_ln209_reg_1203;
wire   [18:0] add_ln195_fu_811_p2;
reg   [18:0] add_ln195_reg_1208;
wire    ap_block_state8_pp2_stage1_iter0;
wire    ap_block_state10_pp2_stage1_iter1;
wire    ap_block_state12_pp2_stage1_iter2;
wire    ap_block_state14_pp2_stage1_iter3;
wire    ap_block_state16_pp2_stage1_iter4;
reg    ap_block_state16_io;
reg    ap_block_pp2_stage1_11001;
reg   [8:0] line_buf_addr_2_reg_1213;
reg   [8:0] line_buf_addr_2_reg_1213_pp2_iter1_reg;
reg   [8:0] line_buf_addr_2_reg_1213_pp2_iter2_reg;
wire   [0:0] icmp_ln254_fu_835_p2;
reg   [0:0] icmp_ln254_reg_1230;
reg   [0:0] icmp_ln254_reg_1230_pp2_iter1_reg;
reg   [0:0] icmp_ln254_reg_1230_pp2_iter2_reg;
reg   [0:0] icmp_ln254_reg_1230_pp2_iter3_reg;
wire   [0:0] icmp_ln254_1_fu_841_p2;
reg   [0:0] icmp_ln254_1_reg_1235;
reg   [0:0] icmp_ln254_1_reg_1235_pp2_iter1_reg;
reg   [0:0] icmp_ln254_1_reg_1235_pp2_iter2_reg;
reg   [0:0] icmp_ln254_1_reg_1235_pp2_iter3_reg;
wire   [9:0] add_ln196_fu_846_p2;
reg   [9:0] add_ln196_reg_1240;
reg   [31:0] tmp_19_reg_1245;
reg   [7:0] data_0_load_reg_1250;
reg   [7:0] data_1_load_reg_1255;
wire   [7:0] value_nms_fu_878_p1;
reg   [7:0] value_nms_reg_1260;
reg    ap_enable_reg_pp2_iter3;
wire   [7:0] grad_nms_fu_882_p4;
reg   [7:0] grad_nms_reg_1273;
wire   [0:0] icmp_ln247_fu_892_p2;
reg   [0:0] icmp_ln247_reg_1277;
wire   [0:0] icmp_ln241_fu_898_p2;
reg   [0:0] icmp_ln241_reg_1282;
wire   [0:0] icmp_ln233_fu_904_p2;
reg   [0:0] icmp_ln233_reg_1287;
wire   [0:0] icmp_ln226_fu_910_p2;
reg   [0:0] icmp_ln226_reg_1292;
wire   [7:0] trunc_ln219_1_fu_921_p1;
reg   [7:0] trunc_ln219_1_reg_1297;
reg   [15:0] window_buf_1_2_reg_1302;
reg   [7:0] window_buf_2_2_cast_reg_1307;
wire   [0:0] grp_fu_419_p2;
reg   [0:0] icmp_ln248_reg_1312;
reg   [0:0] icmp_ln240_reg_1317;
wire   [0:0] icmp_ln234_fu_965_p2;
reg   [0:0] icmp_ln234_reg_1322;
wire   [0:0] icmp_ln227_fu_970_p2;
reg   [0:0] icmp_ln227_reg_1327;
wire   [7:0] value_nms_2_fu_1032_p3;
reg   [7:0] value_nms_2_reg_1332;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp2_stage1_subdone;
reg    ap_condition_pp2_flush_enable;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg    ap_condition_pp2_exit_iter3_state13;
reg   [8:0] line_buf_address0;
reg    line_buf_ce0;
reg   [5:0] line_buf_we0;
reg   [47:0] line_buf_d0;
wire   [47:0] line_buf_q0;
reg   [8:0] line_buf_address1;
reg    line_buf_ce1;
reg   [5:0] line_buf_we1;
wire   [47:0] line_buf_d1;
wire   [47:0] line_buf_q1;
reg   [3:0] empty_75_reg_289;
wire    ap_CS_fsm_state4;
reg   [3:0] phi_urem_reg_300;
reg   [18:0] ap_phi_mux_indvar_flatten_phi_fu_315_p4;
wire    ap_block_pp2_stage0;
reg   [9:0] ap_phi_mux_yi_phi_fu_327_p4;
reg   [7:0] ap_phi_mux_window_buf_2_1_phi_fu_337_p4;
reg   [7:0] ap_phi_mux_window_buf_1_1_3_phi_fu_347_p4;
reg   [9:0] ap_phi_mux_xi_phi_fu_368_p4;
reg   [7:0] ap_phi_mux_window_buf_2_1_3_phi_fu_378_p4;
reg   [15:0] ap_phi_mux_window_buf_1_1_phi_fu_388_p4;
reg   [7:0] ap_phi_mux_window_buf_0_1_3_phi_fu_397_p4;
reg   [7:0] ap_phi_mux_value_nms_1_phi_fu_407_p10;
wire   [7:0] ap_phi_reg_pp2_iter0_value_nms_1_reg_404;
reg   [7:0] ap_phi_reg_pp2_iter1_value_nms_1_reg_404;
reg   [7:0] ap_phi_reg_pp2_iter2_value_nms_1_reg_404;
reg   [7:0] ap_phi_reg_pp2_iter3_value_nms_1_reg_404;
reg   [7:0] ap_phi_reg_pp2_iter4_value_nms_1_reg_404;
wire   [7:0] select_ln226_fu_1015_p3;
wire   [7:0] select_ln233_fu_1003_p3;
wire   [7:0] select_ln240_fu_991_p3;
wire   [7:0] select_ln247_fu_979_p3;
wire   [63:0] p_cast141_i_fu_483_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln196_fu_817_p1;
wire   [63:0] zext_ln209_fu_821_p1;
wire   [63:0] zext_ln209_1_fu_865_p1;
wire    ap_block_pp2_stage1_01001;
wire   [1:0] p_t_i_fu_617_p4;
wire   [1:0] empty_83_fu_627_p1;
wire   [15:0] window_buf_0_1_0_fu_182;
wire   [15:0] window_buf_0_2_0_fu_186;
wire   [15:0] window_buf_1_1_0_fu_190;
wire   [15:0] window_buf_2_1_0_fu_194;
wire   [15:0] window_buf_2_2_0_fu_198;
wire   [47:0] empty_73_fu_524_p2;
wire   [5:0] mask_fu_542_p2;
wire   [47:0] tmp_20_fu_869_p4;
wire   [7:0] trunc_ln219_fu_916_p1;
wire   [5:0] empty_65_fu_469_p3;
wire   [5:0] empty_66_fu_487_p3;
wire   [47:0] empty_68_fu_492_p1;
wire   [47:0] empty_69_fu_496_p1;
wire   [47:0] empty_71_fu_506_p2;
wire   [47:0] empty_72_fu_512_p2;
wire   [47:0] empty_70_fu_499_p3;
wire   [47:0] p_demorgan_fu_518_p2;
wire   [2:0] tmp_16_fu_531_p3;
wire   [5:0] empty_74_fu_538_p1;
wire   [4:0] tmp_s_fu_599_p3;
wire   [6:0] mul_fu_611_p0;
wire   [4:0] mul_fu_611_p1;
wire   [10:0] mul_fu_611_p2;
wire   [3:0] next_urem_fu_661_p2;
wire   [0:0] empty_84_fu_667_p2;
wire   [7:0] tmp_17_fu_687_p4;
wire   [0:0] icmp_fu_697_p2;
wire   [0:0] cmp100_not_i_fu_703_p2;
wire   [0:0] icmp_ln196_fu_721_p2;
wire   [9:0] add_ln195_1_fu_735_p2;
wire   [8:0] trunc_ln195_1_fu_749_p1;
wire   [7:0] tmp_18_fu_761_p4;
wire   [0:0] icmp59_fu_771_p2;
wire   [0:0] cmp100_not_i_mid1_fu_777_p2;
wire   [0:0] or_ln254_3_fu_783_p2;
wire   [0:0] or_ln254_1_fu_709_p2;
wire   [17:0] zext_ln196_1_fu_801_p1;
wire   [17:0] p_mid2_fu_753_p3;
wire   [7:0] tmp_21_fu_826_p4;
wire   [7:0] trunc_ln219_4_fu_945_p4;
wire   [7:0] trunc_ln219_2_fu_925_p4;
wire   [0:0] or_ln247_fu_975_p2;
wire   [0:0] or_ln240_fu_987_p2;
wire   [0:0] or_ln233_fu_999_p2;
wire   [0:0] or_ln226_fu_1011_p2;
wire   [0:0] or_ln254_fu_1023_p2;
wire   [0:0] or_ln254_2_fu_1027_p2;
reg   [11:0] ap_NS_fsm;
wire    ap_block_pp2_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [10:0] mul_fu_611_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
end

gsn_nms_line_buf #(
    .DataWidth( 48 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
line_buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buf_address0),
    .ce0(line_buf_ce0),
    .we0(line_buf_we0),
    .d0(line_buf_d0),
    .q0(line_buf_q0),
    .address1(line_buf_address1),
    .ce1(line_buf_ce1),
    .we1(line_buf_we1),
    .d1(line_buf_d1),
    .q1(line_buf_q1)
);

gsn_mul_7ns_5ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 11 ))
mul_7ns_5ns_11_1_1_U27(
    .din0(mul_fu_611_p0),
    .din1(mul_fu_611_p1),
    .dout(mul_fu_611_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((m_axi_gmem1_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out_r_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out_r_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp2_flush_enable)) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((m_axi_gmem1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
            if (((ap_enable_reg_pp2_iter2 == 1'b0) & (1'b1 == ap_condition_pp2_exit_iter3_state13))) begin
                ap_enable_reg_pp2_iter3 <= 1'b0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter3_state13) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter2;
        end else if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end else if (((m_axi_gmem1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp2_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~(grad_nms_fu_882_p4 == 8'd0) & ~(grad_nms_fu_882_p4 == 8'd45) & ~(grad_nms_fu_882_p4 == 8'd90) & ~(grad_nms_fu_882_p4 == 8'd135) & (ap_enable_reg_pp2_iter3 == 1'b1) & (icmp_ln195_reg_1176_pp2_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        ap_phi_reg_pp2_iter3_value_nms_1_reg_404 <= value_nms_fu_878_p1;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        ap_phi_reg_pp2_iter3_value_nms_1_reg_404 <= ap_phi_reg_pp2_iter2_value_nms_1_reg_404;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        empty_75_reg_289 <= 4'd0;
    end else if (((exitcond569_i_fu_587_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        empty_75_reg_289 <= empty_82_fu_593_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond5710_i_fu_423_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_reg_278 <= empty_61_fu_429_p2;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out_r_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_278 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln195_reg_1176 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        indvar_flatten_reg_311 <= add_ln195_reg_1208;
    end else if (((m_axi_gmem1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        indvar_flatten_reg_311 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        phi_urem_reg_300 <= 4'd0;
    end else if (((exitcond569_i_fu_587_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_urem_reg_300 <= idx_urem_fu_673_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln195_reg_1176_pp2_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        window_buf_0_1_3_reg_394 <= window_buf_0_1_reg_354;
    end else if (((m_axi_gmem1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        window_buf_0_1_3_reg_394 <= empty_76_reg_1126;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln195_reg_1176_pp2_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        window_buf_0_1_reg_354 <= trunc_ln219_1_reg_1297;
    end else if (((m_axi_gmem1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        window_buf_0_1_reg_354 <= empty_77_reg_1131;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln195_reg_1176_pp2_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        window_buf_1_1_3_reg_344 <= value_nms_reg_1260;
    end else if (((m_axi_gmem1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        window_buf_1_1_3_reg_344 <= empty_78_reg_1136;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln195_reg_1176_pp2_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        window_buf_1_1_reg_385 <= window_buf_1_2_reg_1302;
    end else if (((m_axi_gmem1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        window_buf_1_1_reg_385 <= window_buf_1_2_0_load_reg_1121;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln195_reg_1176_pp2_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        window_buf_2_1_3_reg_375 <= window_buf_2_1_reg_334;
    end else if (((m_axi_gmem1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        window_buf_2_1_3_reg_375 <= empty_79_reg_1141;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln195_reg_1176_pp2_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        window_buf_2_1_reg_334 <= window_buf_2_2_cast_reg_1307;
    end else if (((m_axi_gmem1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        window_buf_2_1_reg_334 <= empty_80_reg_1146;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln195_reg_1176 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        xi_reg_364 <= add_ln196_reg_1240;
    end else if (((m_axi_gmem1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        xi_reg_364 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln195_reg_1176 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        yi_reg_323 <= select_ln195_1_reg_1188;
    end else if (((m_axi_gmem1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        yi_reg_323 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        add_ln195_reg_1208 <= add_ln195_fu_811_p2;
        ap_phi_reg_pp2_iter1_value_nms_1_reg_404 <= ap_phi_reg_pp2_iter0_value_nms_1_reg_404;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln195_reg_1176 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        add_ln196_reg_1240 <= add_ln196_fu_846_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln195_fu_715_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        add_ln209_reg_1203 <= add_ln209_fu_805_p2;
        select_ln195_2_reg_1193 <= select_ln195_2_fu_789_p3;
        select_ln195_reg_1180 <= select_ln195_fu_727_p3;
        trunc_ln196_reg_1198 <= trunc_ln196_fu_797_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        ap_phi_reg_pp2_iter2_value_nms_1_reg_404 <= ap_phi_reg_pp2_iter1_value_nms_1_reg_404;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        ap_phi_reg_pp2_iter4_value_nms_1_reg_404 <= ap_phi_reg_pp2_iter3_value_nms_1_reg_404;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln195_reg_1176 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        data_0_load_reg_1250 <= data_0_q0;
        data_1_load_reg_1255 <= data_1_q0;
        tmp_19_reg_1245 <= {{line_buf_q0[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond5710_i_fu_423_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_62_reg_1054 <= empty_62_fu_435_p1;
        empty_63_reg_1069[5 : 4] <= empty_63_fu_457_p2[5 : 4];
        empty_64_reg_1074 <= empty_64_fu_463_p2;
        empty_67_reg_1080 <= empty_67_fu_477_p2;
        tmp_9_reg_1064[5 : 4] <= tmp_9_fu_449_p3[5 : 4];
        tmp_reg_1059 <= {{empty_reg_278[10:9]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond5710_i_reg_1045 <= exitcond5710_i_fu_423_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln195_reg_1176_pp2_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grad_nms_reg_1273 <= {{ap_phi_mux_window_buf_1_1_phi_fu_388_p4[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln195_reg_1176 <= icmp_ln195_fu_715_p2;
        icmp_ln195_reg_1176_pp2_iter1_reg <= icmp_ln195_reg_1176;
        icmp_ln195_reg_1176_pp2_iter2_reg <= icmp_ln195_reg_1176_pp2_iter1_reg;
        icmp_ln195_reg_1176_pp2_iter3_reg <= icmp_ln195_reg_1176_pp2_iter2_reg;
        icmp_ln195_reg_1176_pp2_iter4_reg <= icmp_ln195_reg_1176_pp2_iter3_reg;
        select_ln195_2_reg_1193_pp2_iter1_reg <= select_ln195_2_reg_1193;
        select_ln195_2_reg_1193_pp2_iter2_reg <= select_ln195_2_reg_1193_pp2_iter1_reg;
        select_ln195_2_reg_1193_pp2_iter3_reg <= select_ln195_2_reg_1193_pp2_iter2_reg;
        trunc_ln196_reg_1198_pp2_iter1_reg <= trunc_ln196_reg_1198;
    end
end

always @ (posedge ap_clk) begin
    if (((grad_nms_fu_882_p4 == 8'd0) & (icmp_ln195_reg_1176_pp2_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln226_reg_1292 <= icmp_ln226_fu_910_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grad_nms_reg_1273 == 8'd0) & (icmp_ln195_reg_1176_pp2_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        icmp_ln227_reg_1327 <= icmp_ln227_fu_970_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grad_nms_fu_882_p4 == 8'd45) & (icmp_ln195_reg_1176_pp2_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln233_reg_1287 <= icmp_ln233_fu_904_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grad_nms_reg_1273 == 8'd45) & (icmp_ln195_reg_1176_pp2_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        icmp_ln234_reg_1322 <= icmp_ln234_fu_965_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grad_nms_reg_1273 == 8'd90) & (ap_enable_reg_pp2_iter3 == 1'b1) & (icmp_ln195_reg_1176_pp2_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        icmp_ln240_reg_1317 <= grp_fu_419_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grad_nms_fu_882_p4 == 8'd90) & (icmp_ln195_reg_1176_pp2_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln241_reg_1282 <= icmp_ln241_fu_898_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grad_nms_fu_882_p4 == 8'd135) & (icmp_ln195_reg_1176_pp2_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln247_reg_1277 <= icmp_ln247_fu_892_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grad_nms_reg_1273 == 8'd135) & (ap_enable_reg_pp2_iter3 == 1'b1) & (icmp_ln195_reg_1176_pp2_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        icmp_ln248_reg_1312 <= grp_fu_419_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln195_reg_1176 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        icmp_ln254_1_reg_1235 <= icmp_ln254_1_fu_841_p2;
        icmp_ln254_reg_1230 <= icmp_ln254_fu_835_p2;
        line_buf_addr_2_reg_1213 <= zext_ln196_fu_817_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        icmp_ln254_1_reg_1235_pp2_iter1_reg <= icmp_ln254_1_reg_1235;
        icmp_ln254_1_reg_1235_pp2_iter2_reg <= icmp_ln254_1_reg_1235_pp2_iter1_reg;
        icmp_ln254_1_reg_1235_pp2_iter3_reg <= icmp_ln254_1_reg_1235_pp2_iter2_reg;
        icmp_ln254_reg_1230_pp2_iter1_reg <= icmp_ln254_reg_1230;
        icmp_ln254_reg_1230_pp2_iter2_reg <= icmp_ln254_reg_1230_pp2_iter1_reg;
        icmp_ln254_reg_1230_pp2_iter3_reg <= icmp_ln254_reg_1230_pp2_iter2_reg;
        line_buf_addr_2_reg_1213_pp2_iter1_reg <= line_buf_addr_2_reg_1213;
        line_buf_addr_2_reg_1213_pp2_iter2_reg <= line_buf_addr_2_reg_1213_pp2_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out_r_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_1_reg_1040 <= out_r_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln195_fu_715_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        select_ln195_1_reg_1188 <= select_ln195_1_fu_741_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b1) & (icmp_ln195_reg_1176_pp2_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        trunc_ln219_1_reg_1297 <= trunc_ln219_1_fu_921_p1;
        window_buf_1_2_reg_1302 <= {{line_buf_q1[31:16]}};
        window_buf_2_2_cast_reg_1307 <= {{line_buf_q1[39:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln195_reg_1176_pp2_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        value_nms_2_reg_1332 <= value_nms_2_fu_1032_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        value_nms_reg_1260 <= value_nms_fu_878_p1;
    end
end

always @ (*) begin
    if ((exitcond5710_i_fu_423_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        ap_condition_pp2_exit_iter3_state13 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter3_state13 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln195_reg_1176 == 1'd1) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
        ap_condition_pp2_flush_enable = 1'b1;
    end else begin
        ap_condition_pp2_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem1_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln195_reg_1176 == 1'd0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_315_p4 = add_ln195_reg_1208;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_315_p4 = indvar_flatten_reg_311;
    end
end

always @ (*) begin
    if ((icmp_ln195_reg_1176_pp2_iter3_reg == 1'd0)) begin
        if ((grad_nms_reg_1273 == 8'd135)) begin
            ap_phi_mux_value_nms_1_phi_fu_407_p10 = select_ln247_fu_979_p3;
        end else if ((grad_nms_reg_1273 == 8'd90)) begin
            ap_phi_mux_value_nms_1_phi_fu_407_p10 = select_ln240_fu_991_p3;
        end else if ((grad_nms_reg_1273 == 8'd45)) begin
            ap_phi_mux_value_nms_1_phi_fu_407_p10 = select_ln233_fu_1003_p3;
        end else if ((grad_nms_reg_1273 == 8'd0)) begin
            ap_phi_mux_value_nms_1_phi_fu_407_p10 = select_ln226_fu_1015_p3;
        end else begin
            ap_phi_mux_value_nms_1_phi_fu_407_p10 = ap_phi_reg_pp2_iter4_value_nms_1_reg_404;
        end
    end else begin
        ap_phi_mux_value_nms_1_phi_fu_407_p10 = ap_phi_reg_pp2_iter4_value_nms_1_reg_404;
    end
end

always @ (*) begin
    if (((icmp_ln195_reg_1176_pp2_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        ap_phi_mux_window_buf_0_1_3_phi_fu_397_p4 = window_buf_0_1_reg_354;
    end else begin
        ap_phi_mux_window_buf_0_1_3_phi_fu_397_p4 = window_buf_0_1_3_reg_394;
    end
end

always @ (*) begin
    if (((icmp_ln195_reg_1176_pp2_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        ap_phi_mux_window_buf_1_1_3_phi_fu_347_p4 = value_nms_reg_1260;
    end else begin
        ap_phi_mux_window_buf_1_1_3_phi_fu_347_p4 = window_buf_1_1_3_reg_344;
    end
end

always @ (*) begin
    if (((icmp_ln195_reg_1176_pp2_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        ap_phi_mux_window_buf_1_1_phi_fu_388_p4 = window_buf_1_2_reg_1302;
    end else begin
        ap_phi_mux_window_buf_1_1_phi_fu_388_p4 = window_buf_1_1_reg_385;
    end
end

always @ (*) begin
    if (((icmp_ln195_reg_1176_pp2_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        ap_phi_mux_window_buf_2_1_3_phi_fu_378_p4 = window_buf_2_1_reg_334;
    end else begin
        ap_phi_mux_window_buf_2_1_3_phi_fu_378_p4 = window_buf_2_1_3_reg_375;
    end
end

always @ (*) begin
    if (((icmp_ln195_reg_1176_pp2_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        ap_phi_mux_window_buf_2_1_phi_fu_337_p4 = window_buf_2_2_cast_reg_1307;
    end else begin
        ap_phi_mux_window_buf_2_1_phi_fu_337_p4 = window_buf_2_1_reg_334;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln195_reg_1176 == 1'd0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_xi_phi_fu_368_p4 = add_ln196_reg_1240;
    end else begin
        ap_phi_mux_xi_phi_fu_368_p4 = xi_reg_364;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln195_reg_1176 == 1'd0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_yi_phi_fu_327_p4 = select_ln195_1_reg_1188;
    end else begin
        ap_phi_mux_yi_phi_fu_327_p4 = yi_reg_323;
    end
end

always @ (*) begin
    if (((m_axi_gmem1_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        data_0_ce0 = 1'b1;
    end else begin
        data_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        data_1_ce0 = 1'b1;
    end else begin
        data_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        gmem1_blk_n_AW = m_axi_gmem1_AWREADY;
    end else begin
        gmem1_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        gmem1_blk_n_B = m_axi_gmem1_BVALID;
    end else begin
        gmem1_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln195_reg_1176_pp2_iter4_reg == 1'd0) & (1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        gmem1_blk_n_W = m_axi_gmem1_WREADY;
    end else begin
        gmem1_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        line_buf_address0 = zext_ln209_1_fu_865_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1))) begin
        line_buf_address0 = zext_ln196_fu_817_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        line_buf_address0 = p_cast141_i_fu_483_p1;
    end else begin
        line_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        line_buf_address1 = line_buf_addr_2_reg_1213_pp2_iter2_reg;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1))) begin
        line_buf_address1 = line_buf_addr_2_reg_1213;
    end else begin
        line_buf_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)))) begin
        line_buf_ce0 = 1'b1;
    end else begin
        line_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)) | ((ap_enable_reg_pp2_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        line_buf_ce1 = 1'b1;
    end else begin
        line_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        line_buf_d0 = tmp_20_fu_869_p4;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        line_buf_d0 = empty_73_fu_524_p2;
    end else begin
        line_buf_d0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (icmp_ln195_reg_1176_pp2_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        line_buf_we0 = 6'd48;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond5710_i_reg_1045 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buf_we0 = mask_fu_542_p2;
    end else begin
        line_buf_we0 = 6'd0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln195_reg_1176_pp2_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        line_buf_we1 = 6'd15;
    end else begin
        line_buf_we1 = 6'd0;
    end
end

always @ (*) begin
    if (((m_axi_gmem1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        m_axi_gmem1_AWVALID = 1'b1;
    end else begin
        m_axi_gmem1_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem1_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        m_axi_gmem1_BREADY = 1'b1;
    end else begin
        m_axi_gmem1_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln195_reg_1176_pp2_iter4_reg == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        m_axi_gmem1_WVALID = 1'b1;
    end else begin
        m_axi_gmem1_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_r_blk_n = out_r_empty_n;
    end else begin
        out_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out_r_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_r_read = 1'b1;
    end else begin
        out_r_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out_r_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond5710_i_fu_423_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond5710_i_fu_423_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond569_i_fu_587_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((m_axi_gmem1_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter4 == 1'b0)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter4 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((~((1'b1 == ap_condition_pp2_exit_iter3_state13) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_subdone)) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b1 == ap_condition_pp2_exit_iter3_state13) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((m_axi_gmem1_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln195_1_fu_735_p2 = (10'd1 + ap_phi_mux_yi_phi_fu_327_p4);

assign add_ln195_fu_811_p2 = (19'd1 + indvar_flatten_reg_311);

assign add_ln196_fu_846_p2 = (select_ln195_reg_1180 + 10'd1);

assign add_ln209_fu_805_p2 = (zext_ln196_1_fu_801_p1 + p_mid2_fu_753_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage1_11001 = ((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp2_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage1_subdone = ((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp2_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out_r_empty_n == 1'b0));
end

assign ap_block_state10_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp2_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = ((m_axi_gmem1_WREADY == 1'b0) & (icmp_ln195_reg_1176_pp2_iter4_reg == 1'd0));
end

assign ap_block_state16_pp2_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_phi_reg_pp2_iter0_value_nms_1_reg_404 = 'bx;

assign cmp100_not_i_fu_703_p2 = ((ap_phi_mux_yi_phi_fu_327_p4 > 10'd508) ? 1'b1 : 1'b0);

assign cmp100_not_i_mid1_fu_777_p2 = ((add_ln195_1_fu_735_p2 > 10'd508) ? 1'b1 : 1'b0);

assign data_0_address0 = zext_ln209_fu_821_p1;

assign data_1_address0 = zext_ln209_fu_821_p1;

assign empty_61_fu_429_p2 = (empty_reg_278 + 11'd1);

assign empty_62_fu_435_p1 = empty_reg_278[8:0];

assign empty_63_fu_457_p2 = (tmp_9_fu_449_p3 | 6'd15);

assign empty_64_fu_463_p2 = ((tmp_9_fu_449_p3 > empty_63_fu_457_p2) ? 1'b1 : 1'b0);

assign empty_65_fu_469_p3 = ((empty_64_fu_463_p2[0:0] === 1'b1) ? tmp_9_fu_449_p3 : empty_63_fu_457_p2);

assign empty_66_fu_487_p3 = ((empty_64_reg_1074[0:0] === 1'b1) ? empty_63_reg_1069 : tmp_9_reg_1064);

assign empty_67_fu_477_p2 = ($signed(6'd47) - $signed(empty_65_fu_469_p3));

assign empty_68_fu_492_p1 = empty_66_fu_487_p3;

assign empty_69_fu_496_p1 = empty_67_reg_1080;

assign empty_70_fu_499_p3 = ((empty_64_reg_1074[0:0] === 1'b1) ? 48'd0 : 48'd0);

assign empty_71_fu_506_p2 = 48'd281474976710655 << empty_68_fu_492_p1;

assign empty_72_fu_512_p2 = 48'd281474976710655 >> empty_69_fu_496_p1;

assign empty_73_fu_524_p2 = (p_demorgan_fu_518_p2 & empty_70_fu_499_p3);

assign empty_74_fu_538_p1 = tmp_16_fu_531_p3;

assign empty_76_fu_567_p1 = window_buf_0_1_0_fu_182[7:0];

assign empty_77_fu_571_p1 = window_buf_0_2_0_fu_186[7:0];

assign empty_78_fu_575_p1 = window_buf_1_1_0_fu_190[7:0];

assign empty_79_fu_579_p1 = window_buf_2_1_0_fu_194[7:0];

assign empty_80_fu_583_p1 = window_buf_2_2_0_fu_198[7:0];

assign empty_82_fu_593_p2 = (4'd1 + empty_75_reg_289);

assign empty_83_fu_627_p1 = phi_urem_reg_300[1:0];

assign empty_84_fu_667_p2 = ((next_urem_fu_661_p2 < 4'd3) ? 1'b1 : 1'b0);

assign exitcond569_i_fu_587_p2 = ((empty_75_reg_289 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond5710_i_fu_423_p2 = ((empty_reg_278 == 11'd1536) ? 1'b1 : 1'b0);

assign grad_nms_fu_882_p4 = {{ap_phi_mux_window_buf_1_1_phi_fu_388_p4[15:8]}};

assign grp_fu_419_p2 = ((value_nms_reg_1260 < trunc_ln219_fu_916_p1) ? 1'b1 : 1'b0);

assign icmp59_fu_771_p2 = ((tmp_18_fu_761_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_fu_697_p2 = ((tmp_17_fu_687_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln195_fu_715_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_315_p4 == 19'd262144) ? 1'b1 : 1'b0);

assign icmp_ln196_fu_721_p2 = ((ap_phi_mux_xi_phi_fu_368_p4 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln226_fu_910_p2 = ((value_nms_fu_878_p1 < ap_phi_mux_window_buf_1_1_3_phi_fu_347_p4) ? 1'b1 : 1'b0);

assign icmp_ln227_fu_970_p2 = ((value_nms_reg_1260 < trunc_ln219_2_fu_925_p4) ? 1'b1 : 1'b0);

assign icmp_ln233_fu_904_p2 = ((value_nms_fu_878_p1 < ap_phi_mux_window_buf_0_1_3_phi_fu_397_p4) ? 1'b1 : 1'b0);

assign icmp_ln234_fu_965_p2 = ((value_nms_reg_1260 < trunc_ln219_4_fu_945_p4) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_898_p2 = ((value_nms_fu_878_p1 < ap_phi_mux_window_buf_2_1_phi_fu_337_p4) ? 1'b1 : 1'b0);

assign icmp_ln247_fu_892_p2 = ((value_nms_fu_878_p1 < ap_phi_mux_window_buf_2_1_3_phi_fu_378_p4) ? 1'b1 : 1'b0);

assign icmp_ln254_1_fu_841_p2 = ((select_ln195_reg_1180 > 10'd508) ? 1'b1 : 1'b0);

assign icmp_ln254_fu_835_p2 = ((tmp_21_fu_826_p4 == 8'd0) ? 1'b1 : 1'b0);

assign idx_urem_fu_673_p3 = ((empty_84_fu_667_p2[0:0] === 1'b1) ? next_urem_fu_661_p2 : 4'd0);

assign line_buf_d1 = tmp_19_reg_1245;

assign m_axi_gmem1_ARADDR = 64'd0;

assign m_axi_gmem1_ARBURST = 2'd0;

assign m_axi_gmem1_ARCACHE = 4'd0;

assign m_axi_gmem1_ARID = 1'd0;

assign m_axi_gmem1_ARLEN = 32'd0;

assign m_axi_gmem1_ARLOCK = 2'd0;

assign m_axi_gmem1_ARPROT = 3'd0;

assign m_axi_gmem1_ARQOS = 4'd0;

assign m_axi_gmem1_ARREGION = 4'd0;

assign m_axi_gmem1_ARSIZE = 3'd0;

assign m_axi_gmem1_ARUSER = 1'd0;

assign m_axi_gmem1_ARVALID = 1'b0;

assign m_axi_gmem1_AWADDR = out_1_reg_1040;

assign m_axi_gmem1_AWBURST = 2'd0;

assign m_axi_gmem1_AWCACHE = 4'd0;

assign m_axi_gmem1_AWID = 1'd0;

assign m_axi_gmem1_AWLEN = 32'd262144;

assign m_axi_gmem1_AWLOCK = 2'd0;

assign m_axi_gmem1_AWPROT = 3'd0;

assign m_axi_gmem1_AWQOS = 4'd0;

assign m_axi_gmem1_AWREGION = 4'd0;

assign m_axi_gmem1_AWSIZE = 3'd0;

assign m_axi_gmem1_AWUSER = 1'd0;

assign m_axi_gmem1_RREADY = 1'b0;

assign m_axi_gmem1_WDATA = value_nms_2_reg_1332;

assign m_axi_gmem1_WID = 1'd0;

assign m_axi_gmem1_WLAST = 1'b0;

assign m_axi_gmem1_WSTRB = 1'd1;

assign m_axi_gmem1_WUSER = 1'd0;

assign mask_fu_542_p2 = 6'd3 << empty_74_fu_538_p1;

assign mul_fu_611_p0 = 11'd43;

assign mul_fu_611_p1 = mul_fu_611_p10;

assign mul_fu_611_p10 = tmp_s_fu_599_p3;

assign next_urem_fu_661_p2 = (phi_urem_reg_300 + 4'd1);

assign or_ln226_fu_1011_p2 = (icmp_ln227_reg_1327 | icmp_ln226_reg_1292);

assign or_ln233_fu_999_p2 = (icmp_ln234_reg_1322 | icmp_ln233_reg_1287);

assign or_ln240_fu_987_p2 = (icmp_ln241_reg_1282 | icmp_ln240_reg_1317);

assign or_ln247_fu_975_p2 = (icmp_ln248_reg_1312 | icmp_ln247_reg_1277);

assign or_ln254_1_fu_709_p2 = (icmp_fu_697_p2 | cmp100_not_i_fu_703_p2);

assign or_ln254_2_fu_1027_p2 = (select_ln195_2_reg_1193_pp2_iter3_reg | or_ln254_fu_1023_p2);

assign or_ln254_3_fu_783_p2 = (icmp59_fu_771_p2 | cmp100_not_i_mid1_fu_777_p2);

assign or_ln254_fu_1023_p2 = (icmp_ln254_reg_1230_pp2_iter3_reg | icmp_ln254_1_reg_1235_pp2_iter3_reg);

assign p_cast141_i_fu_483_p1 = empty_62_reg_1054;

assign p_demorgan_fu_518_p2 = (empty_72_fu_512_p2 & empty_71_fu_506_p2);

assign p_mid2_fu_753_p3 = {{trunc_ln195_1_fu_749_p1}, {9'd0}};

assign p_t_i_fu_617_p4 = {{mul_fu_611_p2[9:8]}};

assign select_ln195_1_fu_741_p3 = ((icmp_ln196_fu_721_p2[0:0] === 1'b1) ? add_ln195_1_fu_735_p2 : ap_phi_mux_yi_phi_fu_327_p4);

assign select_ln195_2_fu_789_p3 = ((icmp_ln196_fu_721_p2[0:0] === 1'b1) ? or_ln254_3_fu_783_p2 : or_ln254_1_fu_709_p2);

assign select_ln195_fu_727_p3 = ((icmp_ln196_fu_721_p2[0:0] === 1'b1) ? 10'd0 : ap_phi_mux_xi_phi_fu_368_p4);

assign select_ln226_fu_1015_p3 = ((or_ln226_fu_1011_p2[0:0] === 1'b1) ? 8'd0 : value_nms_reg_1260);

assign select_ln233_fu_1003_p3 = ((or_ln233_fu_999_p2[0:0] === 1'b1) ? 8'd0 : value_nms_reg_1260);

assign select_ln240_fu_991_p3 = ((or_ln240_fu_987_p2[0:0] === 1'b1) ? 8'd0 : value_nms_reg_1260);

assign select_ln247_fu_979_p3 = ((or_ln247_fu_975_p2[0:0] === 1'b1) ? 8'd0 : value_nms_reg_1260);

assign tmp_16_fu_531_p3 = {{tmp_reg_1059}, {1'd0}};

assign tmp_17_fu_687_p4 = {{ap_phi_mux_yi_phi_fu_327_p4[9:2]}};

assign tmp_18_fu_761_p4 = {{add_ln195_1_fu_735_p2[9:2]}};

assign tmp_20_fu_869_p4 = {{{data_1_load_reg_1255}, {data_0_load_reg_1250}}, {32'd0}};

assign tmp_21_fu_826_p4 = {{select_ln195_reg_1180[9:2]}};

assign tmp_9_fu_449_p3 = {{tmp_fu_439_p4}, {4'd0}};

assign tmp_fu_439_p4 = {{empty_reg_278[10:9]}};

assign tmp_s_fu_599_p3 = {{empty_75_reg_289}, {1'd0}};

assign trunc_ln195_1_fu_749_p1 = select_ln195_1_fu_741_p3[8:0];

assign trunc_ln196_fu_797_p1 = select_ln195_fu_727_p3[8:0];

assign trunc_ln219_1_fu_921_p1 = line_buf_q1[7:0];

assign trunc_ln219_2_fu_925_p4 = {{line_buf_q1[23:16]}};

assign trunc_ln219_4_fu_945_p4 = {{line_buf_q1[39:32]}};

assign trunc_ln219_fu_916_p1 = line_buf_q1[7:0];

assign value_nms_2_fu_1032_p3 = ((or_ln254_2_fu_1027_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_value_nms_1_phi_fu_407_p10);

assign value_nms_fu_878_p1 = ap_phi_mux_window_buf_1_1_phi_fu_388_p4[7:0];

assign window_buf_0_1_0_fu_182 = 16'd0;

assign window_buf_0_2_0_fu_186 = 16'd0;

assign window_buf_1_1_0_fu_190 = 16'd0;

assign window_buf_1_2_0_load_reg_1121 = 16'd0;

assign window_buf_2_1_0_fu_194 = 16'd0;

assign window_buf_2_2_0_fu_198 = 16'd0;

assign zext_ln196_1_fu_801_p1 = select_ln195_fu_727_p3;

assign zext_ln196_fu_817_p1 = select_ln195_reg_1180;

assign zext_ln209_1_fu_865_p1 = trunc_ln196_reg_1198_pp2_iter1_reg;

assign zext_ln209_fu_821_p1 = add_ln209_reg_1203;

always @ (posedge ap_clk) begin
    tmp_9_reg_1064[3:0] <= 4'b0000;
    empty_63_reg_1069[3:0] <= 4'b1111;
    empty_76_reg_1126[7:0] <= 8'b00000000;
    empty_77_reg_1131[7:0] <= 8'b00000000;
    empty_78_reg_1136[7:0] <= 8'b00000000;
    empty_79_reg_1141[7:0] <= 8'b00000000;
    empty_80_reg_1146[7:0] <= 8'b00000000;
end

endmodule //gsn_nms

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gsn_gau6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    data : IN STD_LOGIC_VECTOR (63 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out1 : IN STD_LOGIC_VECTOR (63 downto 0);
    out1_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    out1_out_full_n : IN STD_LOGIC;
    out1_out_write : OUT STD_LOGIC );
end;


architecture behav of gsn_gau6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_40000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv11_600 : STD_LOGIC_VECTOR (10 downto 0) := "11000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_16 : STD_LOGIC_VECTOR (7 downto 0) := "00010110";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem0_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal gmem0_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln31_reg_1015 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1015_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out1_out_blk_n : STD_LOGIC;
    signal empty_reg_251 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten_reg_295 : STD_LOGIC_VECTOR (18 downto 0);
    signal xi_reg_306 : STD_LOGIC_VECTOR (9 downto 0);
    signal window_buf_1_1_reg_317 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_1_3_i_i_reg_327 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_1_reg_337 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_1_3_i_i_reg_347 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_0_1_reg_357 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_0_1_3_i_i_reg_367 : STD_LOGIC_VECTOR (7 downto 0);
    signal yi_reg_377 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal exitcond4613_i_i_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4613_i_i_reg_879 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal empty_87_fu_394_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal empty_88_fu_400_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_88_reg_888 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_404_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_reg_893 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_414_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_reg_898 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_89_fu_422_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_89_reg_903 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_90_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_90_reg_908 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_93_fu_442_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_93_reg_914 : STD_LOGIC_VECTOR (4 downto 0);
    signal window_buf_0_1_0_i_i_load_reg_955 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal window_buf_0_2_0_i_i_load_reg_960 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_1_0_i_i_load_reg_965 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_2_0_i_i_load_reg_970 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_1_0_i_i_load_reg_975 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_2_0_i_i_load_reg_980 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_103_fu_530_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal next_mul_fu_536_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond4512_i_i_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_urem_fu_598_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln31_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state13_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state15_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state16_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state17_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state18_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln31_reg_1015_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1015_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1015_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln31_fu_618_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln32_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1024 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1024_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1024_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1024_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_fu_630_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln31_reg_1029 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln31_reg_1029_pp2_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln31_reg_1029_pp2_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln31_reg_1029_pp2_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln32_fu_638_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_buf_addr_4_reg_1040 : STD_LOGIC_VECTOR (8 downto 0);
    signal line_buf_addr_4_reg_1040_pp2_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal window_buf_0_2_reg_1046 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_0_2_reg_1046_pp2_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_2_reg_1052 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_2_reg_1052_pp2_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_2_reg_1058 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_2_reg_1058_pp2_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_1065 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln62_1_fu_678_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln62_1_reg_1070 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln62_1_reg_1070_pp2_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln62_1_fu_722_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_1_reg_1075 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln62_2_fu_728_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln62_2_reg_1080 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_6_fu_765_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_6_reg_1085 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln31_1_fu_777_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln31_1_reg_1090 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal add_ln44_fu_799_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln44_reg_1095 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln_reg_1100 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_condition_pp2_exit_iter4_state17 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal line_buf_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal line_buf_ce0 : STD_LOGIC;
    signal line_buf_we0 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buf_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal line_buf_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal line_buf_ce1 : STD_LOGIC;
    signal line_buf_q1 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_101_reg_262 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal phi_mul_reg_273 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_urem_reg_284 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_window_buf_1_1_3_i_i_phi_fu_330_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_window_buf_2_1_phi_fu_340_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_window_buf_2_1_3_i_i_phi_fu_350_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_window_buf_0_1_phi_fu_360_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_window_buf_0_1_3_i_i_phi_fu_370_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_yi_phi_fu_381_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast102_i_i_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln32_fu_644_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_fu_870_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_99_fu_489_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mask_fu_499_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_29_i_i_fu_686_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_91_fu_434_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_92_fu_452_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_94_fu_457_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_95_fu_461_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_97_fu_471_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_98_fu_477_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_96_fu_464_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_demorgan_fu_483_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_100_fu_496_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal next_urem_fu_586_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_105_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_697_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln62_fu_693_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln62_2_fu_709_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln62_fu_712_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln62_3_fu_718_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln62_1_fu_705_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln62_4_fu_740_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln62_9_fu_736_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln62_11_fu_752_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln62_5_fu_755_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln62_13_fu_761_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln62_10_fu_748_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln31_1_fu_771_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln31_fu_784_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_mid2_fu_788_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln32_1_fu_796_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln62_4_fu_805_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln62_5_fu_808_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln62_2_fu_811_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln62_3_fu_824_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln62_7_fu_821_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln62_8_fu_831_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln62_3_fu_835_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln62_12_fu_841_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln62_6_fu_817_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln62_14_fu_851_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln62_4_fu_845_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln62_7_fu_854_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component gsn_gau6_line_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (2 downto 0);
        d0 : IN STD_LOGIC_VECTOR (23 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;



begin
    line_buf_U : component gsn_gau6_line_buf
    generic map (
        DataWidth => 24,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buf_address0,
        ce0 => line_buf_ce0,
        we0 => line_buf_we0,
        d0 => line_buf_d0,
        address1 => line_buf_address1,
        ce1 => line_buf_ce1,
        q1 => line_buf_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (out1_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (out1_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp2_flush_enable)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter4_state17) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then 
                    ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter4_state17) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter3;
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_101_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                empty_101_reg_262 <= ap_const_lv4_0;
            elsif (((exitcond4512_i_i_fu_524_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                empty_101_reg_262 <= empty_103_fu_530_p2;
            end if; 
        end if;
    end process;

    empty_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4613_i_i_fu_388_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                empty_reg_251 <= empty_87_fu_394_p2;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (out1_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_reg_251 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln31_fu_612_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                indvar_flatten_reg_295 <= add_ln31_fu_618_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                indvar_flatten_reg_295 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                phi_mul_reg_273 <= ap_const_lv8_0;
            elsif (((exitcond4512_i_i_fu_524_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_mul_reg_273 <= next_mul_fu_536_p2;
            end if; 
        end if;
    end process;

    phi_urem_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                phi_urem_reg_284 <= ap_const_lv4_0;
            elsif (((exitcond4512_i_i_fu_524_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_urem_reg_284 <= idx_urem_fu_598_p3;
            end if; 
        end if;
    end process;

    window_buf_0_1_3_i_i_reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (icmp_ln31_reg_1015_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                window_buf_0_1_3_i_i_reg_367 <= window_buf_0_1_reg_357;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                window_buf_0_1_3_i_i_reg_367 <= window_buf_0_1_0_i_i_load_reg_955;
            end if; 
        end if;
    end process;

    window_buf_0_1_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (icmp_ln31_reg_1015_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                window_buf_0_1_reg_357 <= window_buf_0_2_reg_1046_pp2_iter3_reg;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                window_buf_0_1_reg_357 <= window_buf_0_2_0_i_i_load_reg_960;
            end if; 
        end if;
    end process;

    window_buf_1_1_3_i_i_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln31_reg_1015_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                window_buf_1_1_3_i_i_reg_327 <= window_buf_1_1_reg_317;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                window_buf_1_1_3_i_i_reg_327 <= window_buf_1_1_0_i_i_load_reg_965;
            end if; 
        end if;
    end process;

    window_buf_1_1_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln31_reg_1015_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                window_buf_1_1_reg_317 <= window_buf_1_2_reg_1052;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                window_buf_1_1_reg_317 <= window_buf_1_2_0_i_i_load_reg_970;
            end if; 
        end if;
    end process;

    window_buf_2_1_3_i_i_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (icmp_ln31_reg_1015_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                window_buf_2_1_3_i_i_reg_347 <= window_buf_2_1_reg_337;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                window_buf_2_1_3_i_i_reg_347 <= window_buf_2_1_0_i_i_load_reg_975;
            end if; 
        end if;
    end process;

    window_buf_2_1_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (icmp_ln31_reg_1015_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                window_buf_2_1_reg_337 <= window_buf_2_2_reg_1058_pp2_iter3_reg;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                window_buf_2_1_reg_337 <= window_buf_2_2_0_i_i_load_reg_980;
            end if; 
        end if;
    end process;

    xi_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln31_fu_612_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                xi_reg_306 <= add_ln32_fu_638_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                xi_reg_306 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    yi_reg_377_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (icmp_ln31_reg_1015_pp2_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                yi_reg_377 <= select_ln31_1_reg_1090;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                yi_reg_377 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_1015_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                add_ln44_reg_1095 <= add_ln44_fu_799_p2;
                trunc_ln_reg_1100 <= add_ln62_7_fu_854_p2(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_1015_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                add_ln62_1_reg_1075 <= add_ln62_1_fu_722_p2;
                add_ln62_6_reg_1085 <= add_ln62_6_fu_765_p2;
                    shl_ln62_2_reg_1080(9 downto 2) <= shl_ln62_2_fu_728_p3(9 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond4613_i_i_fu_388_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_88_reg_888 <= empty_88_fu_400_p1;
                    empty_89_reg_903(4 downto 3) <= empty_89_fu_422_p2(4 downto 3);
                empty_90_reg_908 <= empty_90_fu_428_p2;
                empty_93_reg_914 <= empty_93_fu_442_p2;
                    tmp_1_reg_898(4 downto 3) <= tmp_1_fu_414_p3(4 downto 3);
                tmp_s_reg_893 <= empty_reg_251(10 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond4613_i_i_reg_879 <= exitcond4613_i_i_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln31_reg_1015 <= icmp_ln31_fu_612_p2;
                icmp_ln31_reg_1015_pp2_iter1_reg <= icmp_ln31_reg_1015;
                icmp_ln32_reg_1024_pp2_iter1_reg <= icmp_ln32_reg_1024;
                select_ln31_reg_1029_pp2_iter1_reg <= select_ln31_reg_1029;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln31_reg_1015_pp2_iter2_reg <= icmp_ln31_reg_1015_pp2_iter1_reg;
                icmp_ln31_reg_1015_pp2_iter3_reg <= icmp_ln31_reg_1015_pp2_iter2_reg;
                icmp_ln31_reg_1015_pp2_iter4_reg <= icmp_ln31_reg_1015_pp2_iter3_reg;
                icmp_ln32_reg_1024_pp2_iter2_reg <= icmp_ln32_reg_1024_pp2_iter1_reg;
                icmp_ln32_reg_1024_pp2_iter3_reg <= icmp_ln32_reg_1024_pp2_iter2_reg;
                line_buf_addr_4_reg_1040_pp2_iter2_reg <= line_buf_addr_4_reg_1040;
                select_ln31_reg_1029_pp2_iter2_reg <= select_ln31_reg_1029_pp2_iter1_reg;
                select_ln31_reg_1029_pp2_iter3_reg <= select_ln31_reg_1029_pp2_iter2_reg;
                    shl_ln62_1_reg_1070_pp2_iter3_reg(8 downto 1) <= shl_ln62_1_reg_1070(8 downto 1);
                window_buf_0_2_reg_1046_pp2_iter3_reg <= window_buf_0_2_reg_1046;
                window_buf_1_2_reg_1052_pp2_iter3_reg <= window_buf_1_2_reg_1052;
                window_buf_2_2_reg_1058_pp2_iter3_reg <= window_buf_2_2_reg_1058;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_612_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln32_reg_1024 <= icmp_ln32_fu_624_p2;
                select_ln31_reg_1029 <= select_ln31_fu_630_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln31_reg_1015 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                line_buf_addr_4_reg_1040 <= zext_ln32_fu_644_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (icmp_ln31_reg_1015_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln31_1_reg_1090 <= select_ln31_1_fu_777_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_1015_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                    shl_ln62_1_reg_1070(8 downto 1) <= shl_ln62_1_fu_678_p3(8 downto 1);
                tmp_reg_1065 <= line_buf_q1(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_1015_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then
                window_buf_0_2_reg_1046 <= line_buf_q1(15 downto 8);
                window_buf_1_2_reg_1052 <= line_buf_q1(23 downto 16);
                window_buf_2_2_reg_1058 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    tmp_1_reg_898(2 downto 0) <= "000";
    empty_89_reg_903(2 downto 0) <= "111";
    shl_ln62_1_reg_1070(0) <= '0';
    shl_ln62_1_reg_1070_pp2_iter3_reg(0) <= '0';
    shl_ln62_2_reg_1080(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem0_ARREADY, out1_out_full_n, ap_CS_fsm_state6, exitcond4613_i_i_fu_388_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state5, exitcond4512_i_i_fu_524_p2, ap_enable_reg_pp2_iter4, ap_block_pp0_stage0_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (out1_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4613_i_i_fu_388_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4613_i_i_fu_388_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((exitcond4512_i_i_fu_524_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((m_axi_gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln31_1_fu_771_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(ap_phi_mux_yi_phi_fu_381_p4));
    add_ln31_fu_618_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_295) + unsigned(ap_const_lv19_1));
    add_ln32_fu_638_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(select_ln31_fu_630_p3));
    add_ln44_fu_799_p2 <= std_logic_vector(unsigned(p_mid2_fu_788_p3) + unsigned(zext_ln32_1_fu_796_p1));
    add_ln62_1_fu_722_p2 <= std_logic_vector(unsigned(zext_ln62_3_fu_718_p1) + unsigned(zext_ln62_1_fu_705_p1));
    add_ln62_2_fu_811_p2 <= std_logic_vector(unsigned(zext_ln62_4_fu_805_p1) + unsigned(zext_ln62_5_fu_808_p1));
    add_ln62_3_fu_835_p2 <= std_logic_vector(unsigned(zext_ln62_7_fu_821_p1) + unsigned(zext_ln62_8_fu_831_p1));
    add_ln62_4_fu_845_p2 <= std_logic_vector(unsigned(zext_ln62_12_fu_841_p1) + unsigned(zext_ln62_6_fu_817_p1));
    add_ln62_5_fu_755_p2 <= std_logic_vector(unsigned(zext_ln62_9_fu_736_p1) + unsigned(zext_ln62_11_fu_752_p1));
    add_ln62_6_fu_765_p2 <= std_logic_vector(unsigned(zext_ln62_13_fu_761_p1) + unsigned(zext_ln62_10_fu_748_p1));
    add_ln62_7_fu_854_p2 <= std_logic_vector(unsigned(zext_ln62_14_fu_851_p1) + unsigned(add_ln62_4_fu_845_p2));
    add_ln62_fu_712_p2 <= std_logic_vector(unsigned(zext_ln62_fu_693_p1) + unsigned(zext_ln62_2_fu_709_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state19 <= ap_CS_fsm(12);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(m_axi_gmem0_RVALID, ap_enable_reg_pp2_iter2, icmp_ln31_reg_1015_pp2_iter1_reg)
    begin
                ap_block_pp2_stage0_11001 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (icmp_ln31_reg_1015_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(m_axi_gmem0_RVALID, ap_enable_reg_pp2_iter2, icmp_ln31_reg_1015_pp2_iter1_reg)
    begin
                ap_block_pp2_stage0_subdone <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (icmp_ln31_reg_1015_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, out1_out_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (out1_out_full_n = ap_const_logic_0));
    end process;

        ap_block_state13_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_pp2_stage0_iter2_assign_proc : process(m_axi_gmem0_RVALID, icmp_ln31_reg_1015_pp2_iter1_reg)
    begin
                ap_block_state15_pp2_stage0_iter2 <= ((m_axi_gmem0_RVALID = ap_const_logic_0) and (icmp_ln31_reg_1015_pp2_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state16_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond4613_i_i_fu_388_p2)
    begin
        if ((exitcond4613_i_i_fu_388_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter4_state17_assign_proc : process(ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            ap_condition_pp2_exit_iter4_state17 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter4_state17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_flush_enable_assign_proc : process(icmp_ln31_fu_612_p2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_subdone)
    begin
        if (((icmp_ln31_fu_612_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
            ap_condition_pp2_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp2_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter5)
    begin
        if (((ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_window_buf_0_1_3_i_i_phi_fu_370_p4_assign_proc : process(ap_block_pp2_stage0, window_buf_0_1_reg_357, window_buf_0_1_3_i_i_reg_367, icmp_ln31_reg_1015_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (icmp_ln31_reg_1015_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_window_buf_0_1_3_i_i_phi_fu_370_p4 <= window_buf_0_1_reg_357;
        else 
            ap_phi_mux_window_buf_0_1_3_i_i_phi_fu_370_p4 <= window_buf_0_1_3_i_i_reg_367;
        end if; 
    end process;


    ap_phi_mux_window_buf_0_1_phi_fu_360_p4_assign_proc : process(ap_block_pp2_stage0, window_buf_0_1_reg_357, icmp_ln31_reg_1015_pp2_iter3_reg, window_buf_0_2_reg_1046_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (icmp_ln31_reg_1015_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_window_buf_0_1_phi_fu_360_p4 <= window_buf_0_2_reg_1046_pp2_iter3_reg;
        else 
            ap_phi_mux_window_buf_0_1_phi_fu_360_p4 <= window_buf_0_1_reg_357;
        end if; 
    end process;


    ap_phi_mux_window_buf_1_1_3_i_i_phi_fu_330_p4_assign_proc : process(ap_block_pp2_stage0, window_buf_1_1_reg_317, window_buf_1_1_3_i_i_reg_327, icmp_ln31_reg_1015_pp2_iter2_reg, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln31_reg_1015_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_window_buf_1_1_3_i_i_phi_fu_330_p4 <= window_buf_1_1_reg_317;
        else 
            ap_phi_mux_window_buf_1_1_3_i_i_phi_fu_330_p4 <= window_buf_1_1_3_i_i_reg_327;
        end if; 
    end process;


    ap_phi_mux_window_buf_2_1_3_i_i_phi_fu_350_p4_assign_proc : process(ap_block_pp2_stage0, window_buf_2_1_reg_337, window_buf_2_1_3_i_i_reg_347, icmp_ln31_reg_1015_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (icmp_ln31_reg_1015_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_window_buf_2_1_3_i_i_phi_fu_350_p4 <= window_buf_2_1_reg_337;
        else 
            ap_phi_mux_window_buf_2_1_3_i_i_phi_fu_350_p4 <= window_buf_2_1_3_i_i_reg_347;
        end if; 
    end process;


    ap_phi_mux_window_buf_2_1_phi_fu_340_p4_assign_proc : process(ap_block_pp2_stage0, window_buf_2_1_reg_337, icmp_ln31_reg_1015_pp2_iter3_reg, window_buf_2_2_reg_1058_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (icmp_ln31_reg_1015_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_window_buf_2_1_phi_fu_340_p4 <= window_buf_2_2_reg_1058_pp2_iter3_reg;
        else 
            ap_phi_mux_window_buf_2_1_phi_fu_340_p4 <= window_buf_2_1_reg_337;
        end if; 
    end process;


    ap_phi_mux_yi_phi_fu_381_p4_assign_proc : process(ap_block_pp2_stage0, yi_reg_377, icmp_ln31_reg_1015_pp2_iter4_reg, select_ln31_1_reg_1090, ap_enable_reg_pp2_iter5)
    begin
        if (((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (icmp_ln31_reg_1015_pp2_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_yi_phi_fu_381_p4 <= select_ln31_1_reg_1090;
        else 
            ap_phi_mux_yi_phi_fu_381_p4 <= yi_reg_377;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_100_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_893),3));
    empty_103_fu_530_p2 <= std_logic_vector(unsigned(empty_101_reg_262) + unsigned(ap_const_lv4_1));
    empty_105_fu_592_p2 <= "1" when (unsigned(next_urem_fu_586_p2) < unsigned(ap_const_lv4_3)) else "0";
    empty_87_fu_394_p2 <= std_logic_vector(unsigned(empty_reg_251) + unsigned(ap_const_lv11_1));
    empty_88_fu_400_p1 <= empty_reg_251(9 - 1 downto 0);
    empty_89_fu_422_p2 <= (tmp_1_fu_414_p3 or ap_const_lv5_7);
    empty_90_fu_428_p2 <= "1" when (unsigned(tmp_1_fu_414_p3) > unsigned(empty_89_fu_422_p2)) else "0";
    empty_91_fu_434_p3 <= 
        tmp_1_fu_414_p3 when (empty_90_fu_428_p2(0) = '1') else 
        empty_89_fu_422_p2;
    empty_92_fu_452_p3 <= 
        empty_89_reg_903 when (empty_90_reg_908(0) = '1') else 
        tmp_1_reg_898;
    empty_93_fu_442_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(empty_91_fu_434_p3));
    empty_94_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_92_fu_452_p3),24));
    empty_95_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_93_reg_914),24));
    empty_96_fu_464_p3 <= 
        ap_const_lv24_0 when (empty_90_reg_908(0) = '1') else 
        ap_const_lv24_0;
    empty_97_fu_471_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & empty_94_fu_457_p1(24-1 downto 0)))));
    empty_98_fu_477_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & empty_95_fu_461_p1(24-1 downto 0)))));
    empty_99_fu_489_p2 <= (p_demorgan_fu_483_p2 and empty_96_fu_464_p3);
    exitcond4512_i_i_fu_524_p2 <= "1" when (empty_101_reg_262 = ap_const_lv4_9) else "0";
    exitcond4613_i_i_fu_388_p2 <= "1" when (empty_reg_251 = ap_const_lv11_600) else "0";

    gmem0_blk_n_AR_assign_proc : process(m_axi_gmem0_ARREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            gmem0_blk_n_AR <= m_axi_gmem0_ARREADY;
        else 
            gmem0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_R_assign_proc : process(m_axi_gmem0_RVALID, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, icmp_ln31_reg_1015_pp2_iter1_reg)
    begin
        if (((icmp_ln31_reg_1015_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            gmem0_blk_n_R <= m_axi_gmem0_RVALID;
        else 
            gmem0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln31_fu_612_p2 <= "1" when (indvar_flatten_reg_295 = ap_const_lv19_40000) else "0";
    icmp_ln32_fu_624_p2 <= "1" when (xi_reg_306 = ap_const_lv10_200) else "0";
    idx_urem_fu_598_p3 <= 
        next_urem_fu_586_p2 when (empty_105_fu_592_p2(0) = '1') else 
        ap_const_lv4_0;

    line_buf_address0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_pp0_stage0, line_buf_addr_4_reg_1040_pp2_iter2_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter3, p_cast102_i_i_fu_448_p1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            line_buf_address0 <= line_buf_addr_4_reg_1040_pp2_iter2_reg;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            line_buf_address0 <= p_cast102_i_i_fu_448_p1(9 - 1 downto 0);
        else 
            line_buf_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    line_buf_address1 <= zext_ln32_fu_644_p1(9 - 1 downto 0);

    line_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            line_buf_ce0 <= ap_const_logic_1;
        else 
            line_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            line_buf_ce1 <= ap_const_logic_1;
        else 
            line_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_d0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter3, ap_block_pp0_stage0, empty_99_fu_489_p2, tmp_29_i_i_fu_686_p3)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            line_buf_d0 <= tmp_29_i_i_fu_686_p3;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            line_buf_d0 <= empty_99_fu_489_p2;
        else 
            line_buf_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    line_buf_we0_assign_proc : process(exitcond4613_i_i_reg_879, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp2_stage0_11001, icmp_ln31_reg_1015_pp2_iter2_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter3, mask_fu_499_p2)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln31_reg_1015_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            line_buf_we0 <= ap_const_lv3_7;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond4613_i_i_reg_879 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buf_we0 <= mask_fu_499_p2;
        else 
            line_buf_we0 <= ap_const_lv3_0;
        end if; 
    end process;

    m_axi_gmem0_ARADDR <= data;
    m_axi_gmem0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem0_ARID <= ap_const_lv1_0;
    m_axi_gmem0_ARLEN <= ap_const_lv32_40000;
    m_axi_gmem0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem0_ARUSER <= ap_const_lv1_0;

    m_axi_gmem0_ARVALID_assign_proc : process(m_axi_gmem0_ARREADY, ap_CS_fsm_state6)
    begin
        if (((m_axi_gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_gmem0_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_BREADY <= ap_const_logic_0;

    m_axi_gmem0_RREADY_assign_proc : process(ap_enable_reg_pp2_iter2, icmp_ln31_reg_1015_pp2_iter1_reg, ap_block_pp2_stage0_11001)
    begin
        if (((icmp_ln31_reg_1015_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            m_axi_gmem0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_WDATA <= ap_const_lv8_0;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv1_0;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_WVALID <= ap_const_logic_0;
    mask_fu_499_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv3_1),to_integer(unsigned('0' & empty_100_fu_496_p1(3-1 downto 0)))));
    next_mul_fu_536_p2 <= std_logic_vector(unsigned(ap_const_lv8_16) + unsigned(phi_mul_reg_273));
    next_urem_fu_586_p2 <= std_logic_vector(unsigned(phi_urem_reg_284) + unsigned(ap_const_lv4_1));

    out1_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out1_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out1_out_blk_n <= out1_out_full_n;
        else 
            out1_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out1_out_din <= out1;

    out1_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out1_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (out1_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out1_out_write <= ap_const_logic_1;
        else 
            out1_out_write <= ap_const_logic_0;
        end if; 
    end process;

    out_r_address0 <= zext_ln44_fu_870_p1(18 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter5)
    begin
        if (((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= trunc_ln_reg_1100;

    out_r_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln31_reg_1015_pp2_iter4_reg, ap_enable_reg_pp2_iter5)
    begin
        if (((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (icmp_ln31_reg_1015_pp2_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast102_i_i_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_88_reg_888),64));
    p_demorgan_fu_483_p2 <= (empty_98_fu_477_p2 and empty_97_fu_471_p2);
    p_mid2_fu_788_p3 <= (trunc_ln31_fu_784_p1 & ap_const_lv9_0);
    select_ln31_1_fu_777_p3 <= 
        add_ln31_1_fu_771_p2 when (icmp_ln32_reg_1024_pp2_iter3_reg(0) = '1') else 
        ap_phi_mux_yi_phi_fu_381_p4;
    select_ln31_fu_630_p3 <= 
        ap_const_lv10_0 when (icmp_ln32_fu_624_p2(0) = '1') else 
        xi_reg_306;
    shl_ln62_1_fu_678_p3 <= (ap_phi_mux_window_buf_1_1_3_i_i_phi_fu_330_p4 & ap_const_lv1_0);
    shl_ln62_2_fu_728_p3 <= (window_buf_1_1_reg_317 & ap_const_lv2_0);
    shl_ln62_3_fu_824_p3 <= (window_buf_1_2_reg_1052_pp2_iter3_reg & ap_const_lv1_0);
    shl_ln62_4_fu_740_p3 <= (ap_phi_mux_window_buf_2_1_phi_fu_340_p4 & ap_const_lv1_0);
    shl_ln_fu_697_p3 <= (ap_phi_mux_window_buf_0_1_phi_fu_360_p4 & ap_const_lv1_0);
    tmp_1_fu_414_p3 <= (tmp_s_fu_404_p4 & ap_const_lv3_0);
    tmp_29_i_i_fu_686_p3 <= (window_buf_2_2_reg_1058 & tmp_reg_1065);
    tmp_s_fu_404_p4 <= empty_reg_251(10 downto 9);
    trunc_ln31_fu_784_p1 <= select_ln31_1_fu_777_p3(9 - 1 downto 0);
    window_buf_0_1_0_i_i_load_reg_955 <= ap_const_lv8_0;
    window_buf_0_2_0_i_i_load_reg_960 <= ap_const_lv8_0;
    window_buf_1_1_0_i_i_load_reg_965 <= ap_const_lv8_0;
    window_buf_1_2_0_i_i_load_reg_970 <= ap_const_lv8_0;
    window_buf_2_1_0_i_i_load_reg_975 <= ap_const_lv8_0;
    window_buf_2_2_0_i_i_load_reg_980 <= ap_const_lv8_0;
    zext_ln32_1_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_reg_1029_pp2_iter3_reg),18));
    zext_ln32_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_reg_1029),64));
    zext_ln44_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln44_reg_1095),64));
    zext_ln62_10_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln62_4_fu_740_p3),10));
    zext_ln62_11_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_buf_2_2_reg_1058),9));
    zext_ln62_12_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_3_fu_835_p2),12));
    zext_ln62_13_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_5_fu_755_p2),10));
    zext_ln62_14_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_6_reg_1085),12));
    zext_ln62_1_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_697_p3),10));
    zext_ln62_2_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_buf_0_2_reg_1046),9));
    zext_ln62_3_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_fu_712_p2),10));
    zext_ln62_4_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_1_reg_1075),11));
    zext_ln62_5_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln62_1_reg_1070_pp2_iter3_reg),11));
    zext_ln62_6_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_2_fu_811_p2),12));
    zext_ln62_7_fu_821_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln62_2_reg_1080),11));
    zext_ln62_8_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln62_3_fu_824_p3),11));
    zext_ln62_9_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_window_buf_2_1_3_i_i_phi_fu_350_p4),9));
    zext_ln62_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_window_buf_0_1_3_i_i_phi_fu_370_p4),9));
end behav;

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gsn_nms is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    data_0_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    data_0_ce0 : OUT STD_LOGIC;
    data_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_1_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    data_1_ce0 : OUT STD_LOGIC;
    data_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    out_r_empty_n : IN STD_LOGIC;
    out_r_read : OUT STD_LOGIC );
end;


architecture behav of gsn_nms is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_87 : STD_LOGIC_VECTOR (7 downto 0) := "10000111";
    constant ap_const_lv8_5A : STD_LOGIC_VECTOR (7 downto 0) := "01011010";
    constant ap_const_lv8_2D : STD_LOGIC_VECTOR (7 downto 0) := "00101101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_40000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_F : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv11_600 : STD_LOGIC_VECTOR (10 downto 0) := "11000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv48_FFFFFFFFFFFF : STD_LOGIC_VECTOR (47 downto 0) := "111111111111111111111111111111111111111111111111";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv11_2B : STD_LOGIC_VECTOR (10 downto 0) := "00000101011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv10_1FC : STD_LOGIC_VECTOR (9 downto 0) := "0111111100";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv7_17 : STD_LOGIC_VECTOR (6 downto 0) := "0010111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv7_27 : STD_LOGIC_VECTOR (6 downto 0) := "0100111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem1_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal gmem1_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal icmp_ln195_reg_1176 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln195_reg_1176_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal out_r_blk_n : STD_LOGIC;
    signal empty_reg_278 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten_reg_311 : STD_LOGIC_VECTOR (18 downto 0);
    signal yi_reg_323 : STD_LOGIC_VECTOR (9 downto 0);
    signal window_buf_2_1_reg_334 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_1_3_reg_344 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_0_1_reg_354 : STD_LOGIC_VECTOR (7 downto 0);
    signal xi_reg_364 : STD_LOGIC_VECTOR (9 downto 0);
    signal window_buf_2_1_3_reg_375 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_1_reg_385 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_buf_0_1_3_reg_394 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_1_reg_1040 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal exitcond5710_i_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5710_i_reg_1045 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal empty_61_fu_429_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal empty_62_fu_435_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_62_reg_1054 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_439_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_1059 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_449_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_reg_1064 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_63_fu_457_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_63_reg_1069 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_64_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_64_reg_1074 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_67_fu_477_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_67_reg_1080 : STD_LOGIC_VECTOR (5 downto 0);
    signal window_buf_1_2_0_load_reg_1121 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal empty_76_fu_567_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_76_reg_1126 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_77_fu_571_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_77_reg_1131 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_78_fu_575_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_78_reg_1136 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_79_fu_579_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_79_reg_1141 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_80_fu_583_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_80_reg_1146 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_82_fu_593_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal idx_urem_fu_673_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond569_i_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln195_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state7_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state13_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state15_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln195_reg_1176_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln195_reg_1176_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln195_reg_1176_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln195_fu_727_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln195_reg_1180 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln195_1_fu_741_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln195_1_reg_1188 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln195_2_fu_789_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln195_2_reg_1193 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln195_2_reg_1193_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln195_2_reg_1193_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln195_2_reg_1193_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln196_fu_797_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln196_reg_1198 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln196_reg_1198_pp2_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln209_fu_805_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln209_reg_1203 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln195_fu_811_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln195_reg_1208 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_state8_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_state12_pp2_stage1_iter2 : BOOLEAN;
    signal ap_block_state14_pp2_stage1_iter3 : BOOLEAN;
    signal ap_block_state16_pp2_stage1_iter4 : BOOLEAN;
    signal ap_block_state16_io : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal line_buf_addr_2_reg_1213 : STD_LOGIC_VECTOR (8 downto 0);
    signal line_buf_addr_2_reg_1213_pp2_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal line_buf_addr_2_reg_1213_pp2_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln254_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln254_reg_1230 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln254_reg_1230_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln254_reg_1230_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln254_reg_1230_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln254_1_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln254_1_reg_1235 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln254_1_reg_1235_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln254_1_reg_1235_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln254_1_reg_1235_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln196_fu_846_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln196_reg_1240 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_19_reg_1245 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_0_load_reg_1250 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_1_load_reg_1255 : STD_LOGIC_VECTOR (7 downto 0);
    signal value_nms_fu_878_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal value_nms_reg_1260 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal grad_nms_fu_882_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grad_nms_reg_1273 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln247_fu_892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln247_reg_1277 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_reg_1282 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln233_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln233_reg_1287 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln226_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln226_reg_1292 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln219_1_fu_921_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln219_1_reg_1297 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_2_reg_1302 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_buf_2_2_cast_reg_1307 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln248_reg_1312 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln240_reg_1317 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln234_fu_965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln234_reg_1322 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln227_fu_970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln227_reg_1327 : STD_LOGIC_VECTOR (0 downto 0);
    signal value_nms_2_fu_1032_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal value_nms_2_reg_1332 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_condition_pp2_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_condition_pp2_exit_iter3_state13 : STD_LOGIC;
    signal line_buf_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal line_buf_ce0 : STD_LOGIC;
    signal line_buf_we0 : STD_LOGIC_VECTOR (5 downto 0);
    signal line_buf_d0 : STD_LOGIC_VECTOR (47 downto 0);
    signal line_buf_q0 : STD_LOGIC_VECTOR (47 downto 0);
    signal line_buf_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal line_buf_ce1 : STD_LOGIC;
    signal line_buf_we1 : STD_LOGIC_VECTOR (5 downto 0);
    signal line_buf_d1 : STD_LOGIC_VECTOR (47 downto 0);
    signal line_buf_q1 : STD_LOGIC_VECTOR (47 downto 0);
    signal empty_75_reg_289 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal phi_urem_reg_300 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_315_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_yi_phi_fu_327_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_window_buf_2_1_phi_fu_337_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_window_buf_1_1_3_phi_fu_347_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_xi_phi_fu_368_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_window_buf_2_1_3_phi_fu_378_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_window_buf_1_1_phi_fu_388_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_window_buf_0_1_3_phi_fu_397_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_value_nms_1_phi_fu_407_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp2_iter0_value_nms_1_reg_404 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp2_iter1_value_nms_1_reg_404 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp2_iter2_value_nms_1_reg_404 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp2_iter3_value_nms_1_reg_404 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp2_iter4_value_nms_1_reg_404 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln226_fu_1015_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln233_fu_1003_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln240_fu_991_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln247_fu_979_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast141_i_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln196_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln209_fu_821_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln209_1_fu_865_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage1_01001 : BOOLEAN;
    signal p_t_i_fu_617_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_83_fu_627_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal window_buf_0_1_0_fu_182 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_buf_0_2_0_fu_186 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_buf_1_1_0_fu_190 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_buf_2_1_0_fu_194 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_buf_2_2_0_fu_198 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_73_fu_524_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mask_fu_542_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_fu_869_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln219_fu_916_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_65_fu_469_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_66_fu_487_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_68_fu_492_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal empty_69_fu_496_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal empty_71_fu_506_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal empty_72_fu_512_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal empty_70_fu_499_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_demorgan_fu_518_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_16_fu_531_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_74_fu_538_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_599_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_fu_611_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_fu_611_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_fu_611_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_urem_fu_661_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_84_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_687_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp100_not_i_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln196_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln195_1_fu_735_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln195_1_fu_749_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_18_fu_761_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp59_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp100_not_i_mid1_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln254_3_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln254_1_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln196_1_fu_801_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_mid2_fu_753_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_21_fu_826_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln219_4_fu_945_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln219_2_fu_925_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln247_fu_975_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln240_fu_987_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln233_fu_999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln226_fu_1011_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln254_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln254_2_fu_1027_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal mul_fu_611_p10 : STD_LOGIC_VECTOR (10 downto 0);

    component gsn_mul_7ns_5ns_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component gsn_nms_line_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (5 downto 0);
        d0 : IN STD_LOGIC_VECTOR (47 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (47 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC_VECTOR (5 downto 0);
        d1 : IN STD_LOGIC_VECTOR (47 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;



begin
    line_buf_U : component gsn_nms_line_buf
    generic map (
        DataWidth => 48,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buf_address0,
        ce0 => line_buf_ce0,
        we0 => line_buf_we0,
        d0 => line_buf_d0,
        q0 => line_buf_q0,
        address1 => line_buf_address1,
        ce1 => line_buf_ce1,
        we1 => line_buf_we1,
        d1 => line_buf_d1,
        q1 => line_buf_q1);

    mul_7ns_5ns_11_1_1_U27 : component gsn_mul_7ns_5ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 5,
        dout_WIDTH => 11)
    port map (
        din0 => mul_fu_611_p0,
        din1 => mul_fu_611_p1,
        dout => mul_fu_611_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((m_axi_gmem1_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp2_flush_enable)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((m_axi_gmem1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) then
                    if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter3_state13))) then 
                        ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter3_state13) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                elsif (((m_axi_gmem1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp2_iter3_value_nms_1_reg_404_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((grad_nms_fu_882_p4 = ap_const_lv8_0)) and not((grad_nms_fu_882_p4 = ap_const_lv8_2D)) and not((grad_nms_fu_882_p4 = ap_const_lv8_5A)) and not((grad_nms_fu_882_p4 = ap_const_lv8_87)) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln195_reg_1176_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                ap_phi_reg_pp2_iter3_value_nms_1_reg_404 <= value_nms_fu_878_p1;
            elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then 
                ap_phi_reg_pp2_iter3_value_nms_1_reg_404 <= ap_phi_reg_pp2_iter2_value_nms_1_reg_404;
            end if; 
        end if;
    end process;

    empty_75_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                empty_75_reg_289 <= ap_const_lv4_0;
            elsif (((exitcond569_i_fu_587_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                empty_75_reg_289 <= empty_82_fu_593_p2;
            end if; 
        end if;
    end process;

    empty_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond5710_i_fu_423_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                empty_reg_278 <= empty_61_fu_429_p2;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_reg_278 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln195_reg_1176 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                indvar_flatten_reg_311 <= add_ln195_reg_1208;
            elsif (((m_axi_gmem1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                indvar_flatten_reg_311 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    phi_urem_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                phi_urem_reg_300 <= ap_const_lv4_0;
            elsif (((exitcond569_i_fu_587_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_urem_reg_300 <= idx_urem_fu_673_p3;
            end if; 
        end if;
    end process;

    window_buf_0_1_3_reg_394_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln195_reg_1176_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
                window_buf_0_1_3_reg_394 <= window_buf_0_1_reg_354;
            elsif (((m_axi_gmem1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                window_buf_0_1_3_reg_394 <= empty_76_reg_1126;
            end if; 
        end if;
    end process;

    window_buf_0_1_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln195_reg_1176_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
                window_buf_0_1_reg_354 <= trunc_ln219_1_reg_1297;
            elsif (((m_axi_gmem1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                window_buf_0_1_reg_354 <= empty_77_reg_1131;
            end if; 
        end if;
    end process;

    window_buf_1_1_3_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln195_reg_1176_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
                window_buf_1_1_3_reg_344 <= value_nms_reg_1260;
            elsif (((m_axi_gmem1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                window_buf_1_1_3_reg_344 <= empty_78_reg_1136;
            end if; 
        end if;
    end process;

    window_buf_1_1_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln195_reg_1176_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
                window_buf_1_1_reg_385 <= window_buf_1_2_reg_1302;
            elsif (((m_axi_gmem1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                window_buf_1_1_reg_385 <= window_buf_1_2_0_load_reg_1121;
            end if; 
        end if;
    end process;

    window_buf_2_1_3_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln195_reg_1176_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
                window_buf_2_1_3_reg_375 <= window_buf_2_1_reg_334;
            elsif (((m_axi_gmem1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                window_buf_2_1_3_reg_375 <= empty_79_reg_1141;
            end if; 
        end if;
    end process;

    window_buf_2_1_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln195_reg_1176_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
                window_buf_2_1_reg_334 <= window_buf_2_2_cast_reg_1307;
            elsif (((m_axi_gmem1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                window_buf_2_1_reg_334 <= empty_80_reg_1146;
            end if; 
        end if;
    end process;

    xi_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln195_reg_1176 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                xi_reg_364 <= add_ln196_reg_1240;
            elsif (((m_axi_gmem1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                xi_reg_364 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    yi_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln195_reg_1176 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                yi_reg_323 <= select_ln195_1_reg_1188;
            elsif (((m_axi_gmem1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                yi_reg_323 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                add_ln195_reg_1208 <= add_ln195_fu_811_p2;
                ap_phi_reg_pp2_iter1_value_nms_1_reg_404 <= ap_phi_reg_pp2_iter0_value_nms_1_reg_404;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln195_reg_1176 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                add_ln196_reg_1240 <= add_ln196_fu_846_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln195_fu_715_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                add_ln209_reg_1203 <= add_ln209_fu_805_p2;
                select_ln195_2_reg_1193 <= select_ln195_2_fu_789_p3;
                select_ln195_reg_1180 <= select_ln195_fu_727_p3;
                trunc_ln196_reg_1198 <= trunc_ln196_fu_797_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                ap_phi_reg_pp2_iter2_value_nms_1_reg_404 <= ap_phi_reg_pp2_iter1_value_nms_1_reg_404;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                ap_phi_reg_pp2_iter4_value_nms_1_reg_404 <= ap_phi_reg_pp2_iter3_value_nms_1_reg_404;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln195_reg_1176 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                data_0_load_reg_1250 <= data_0_q0;
                data_1_load_reg_1255 <= data_1_q0;
                tmp_19_reg_1245 <= line_buf_q0(47 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond5710_i_fu_423_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_62_reg_1054 <= empty_62_fu_435_p1;
                    empty_63_reg_1069(5 downto 4) <= empty_63_fu_457_p2(5 downto 4);
                empty_64_reg_1074 <= empty_64_fu_463_p2;
                empty_67_reg_1080 <= empty_67_fu_477_p2;
                    tmp_9_reg_1064(5 downto 4) <= tmp_9_fu_449_p3(5 downto 4);
                tmp_reg_1059 <= empty_reg_278(10 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond5710_i_reg_1045 <= exitcond5710_i_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln195_reg_1176_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                grad_nms_reg_1273 <= ap_phi_mux_window_buf_1_1_phi_fu_388_p4(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln195_reg_1176 <= icmp_ln195_fu_715_p2;
                icmp_ln195_reg_1176_pp2_iter1_reg <= icmp_ln195_reg_1176;
                icmp_ln195_reg_1176_pp2_iter2_reg <= icmp_ln195_reg_1176_pp2_iter1_reg;
                icmp_ln195_reg_1176_pp2_iter3_reg <= icmp_ln195_reg_1176_pp2_iter2_reg;
                icmp_ln195_reg_1176_pp2_iter4_reg <= icmp_ln195_reg_1176_pp2_iter3_reg;
                select_ln195_2_reg_1193_pp2_iter1_reg <= select_ln195_2_reg_1193;
                select_ln195_2_reg_1193_pp2_iter2_reg <= select_ln195_2_reg_1193_pp2_iter1_reg;
                select_ln195_2_reg_1193_pp2_iter3_reg <= select_ln195_2_reg_1193_pp2_iter2_reg;
                trunc_ln196_reg_1198_pp2_iter1_reg <= trunc_ln196_reg_1198;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grad_nms_fu_882_p4 = ap_const_lv8_0) and (icmp_ln195_reg_1176_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln226_reg_1292 <= icmp_ln226_fu_910_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grad_nms_reg_1273 = ap_const_lv8_0) and (icmp_ln195_reg_1176_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                icmp_ln227_reg_1327 <= icmp_ln227_fu_970_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grad_nms_fu_882_p4 = ap_const_lv8_2D) and (icmp_ln195_reg_1176_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln233_reg_1287 <= icmp_ln233_fu_904_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grad_nms_reg_1273 = ap_const_lv8_2D) and (icmp_ln195_reg_1176_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                icmp_ln234_reg_1322 <= icmp_ln234_fu_965_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grad_nms_reg_1273 = ap_const_lv8_5A) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln195_reg_1176_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                icmp_ln240_reg_1317 <= grp_fu_419_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grad_nms_fu_882_p4 = ap_const_lv8_5A) and (icmp_ln195_reg_1176_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln241_reg_1282 <= icmp_ln241_fu_898_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grad_nms_fu_882_p4 = ap_const_lv8_87) and (icmp_ln195_reg_1176_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln247_reg_1277 <= icmp_ln247_fu_892_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grad_nms_reg_1273 = ap_const_lv8_87) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln195_reg_1176_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                icmp_ln248_reg_1312 <= grp_fu_419_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln195_reg_1176 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                icmp_ln254_1_reg_1235 <= icmp_ln254_1_fu_841_p2;
                icmp_ln254_reg_1230 <= icmp_ln254_fu_835_p2;
                line_buf_addr_2_reg_1213 <= zext_ln196_fu_817_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                icmp_ln254_1_reg_1235_pp2_iter1_reg <= icmp_ln254_1_reg_1235;
                icmp_ln254_1_reg_1235_pp2_iter2_reg <= icmp_ln254_1_reg_1235_pp2_iter1_reg;
                icmp_ln254_1_reg_1235_pp2_iter3_reg <= icmp_ln254_1_reg_1235_pp2_iter2_reg;
                icmp_ln254_reg_1230_pp2_iter1_reg <= icmp_ln254_reg_1230;
                icmp_ln254_reg_1230_pp2_iter2_reg <= icmp_ln254_reg_1230_pp2_iter1_reg;
                icmp_ln254_reg_1230_pp2_iter3_reg <= icmp_ln254_reg_1230_pp2_iter2_reg;
                line_buf_addr_2_reg_1213_pp2_iter1_reg <= line_buf_addr_2_reg_1213;
                line_buf_addr_2_reg_1213_pp2_iter2_reg <= line_buf_addr_2_reg_1213_pp2_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                out_1_reg_1040 <= out_r_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln195_fu_715_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln195_1_reg_1188 <= select_ln195_1_fu_741_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln195_reg_1176_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                trunc_ln219_1_reg_1297 <= trunc_ln219_1_fu_921_p1;
                window_buf_1_2_reg_1302 <= line_buf_q1(31 downto 16);
                window_buf_2_2_cast_reg_1307 <= line_buf_q1(39 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln195_reg_1176_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                value_nms_2_reg_1332 <= value_nms_2_fu_1032_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                value_nms_reg_1260 <= value_nms_fu_878_p1;
            end if;
        end if;
    end process;
    tmp_9_reg_1064(3 downto 0) <= "0000";
    empty_63_reg_1069(3 downto 0) <= "1111";
    empty_76_reg_1126(7 downto 0) <= "00000000";
    empty_77_reg_1131(7 downto 0) <= "00000000";
    empty_78_reg_1136(7 downto 0) <= "00000000";
    empty_79_reg_1141(7 downto 0) <= "00000000";
    empty_80_reg_1146(7 downto 0) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem1_AWREADY, m_axi_gmem1_BVALID, out_r_empty_n, ap_CS_fsm_state6, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter4, ap_CS_fsm_state21, exitcond5710_i_fu_423_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state5, exitcond569_i_fu_587_p2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter3, ap_block_pp0_stage0_subdone, ap_block_pp2_stage1_subdone, ap_enable_reg_pp2_iter2, ap_condition_pp2_exit_iter3_state13, ap_block_pp2_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond5710_i_fu_423_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond5710_i_fu_423_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((exitcond569_i_fu_587_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((m_axi_gmem1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((not(((ap_const_logic_1 = ap_condition_pp2_exit_iter3_state13) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_logic_1 = ap_condition_pp2_exit_iter3_state13) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((m_axi_gmem1_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln195_1_fu_735_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(ap_phi_mux_yi_phi_fu_327_p4));
    add_ln195_fu_811_p2 <= std_logic_vector(unsigned(ap_const_lv19_1) + unsigned(indvar_flatten_reg_311));
    add_ln196_fu_846_p2 <= std_logic_vector(unsigned(select_ln195_reg_1180) + unsigned(ap_const_lv10_1));
    add_ln209_fu_805_p2 <= std_logic_vector(unsigned(zext_ln196_1_fu_801_p1) + unsigned(p_mid2_fu_753_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state21 <= ap_CS_fsm(11);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage1_11001_assign_proc : process(ap_enable_reg_pp2_iter4, ap_block_state16_io)
    begin
                ap_block_pp2_stage1_11001 <= ((ap_const_boolean_1 = ap_block_state16_io) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage1_subdone_assign_proc : process(ap_enable_reg_pp2_iter4, ap_block_state16_io)
    begin
                ap_block_pp2_stage1_subdone <= ((ap_const_boolean_1 = ap_block_state16_io) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, out_r_empty_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0));
    end process;

        ap_block_state10_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_io_assign_proc : process(m_axi_gmem1_WREADY, icmp_ln195_reg_1176_pp2_iter4_reg)
    begin
                ap_block_state16_io <= ((m_axi_gmem1_WREADY = ap_const_logic_0) and (icmp_ln195_reg_1176_pp2_iter4_reg = ap_const_lv1_0));
    end process;

        ap_block_state16_pp2_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond5710_i_fu_423_p2)
    begin
        if ((exitcond5710_i_fu_423_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter3_state13_assign_proc : process(ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            ap_condition_pp2_exit_iter3_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter3_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_flush_enable_assign_proc : process(ap_CS_fsm_pp2_stage1, icmp_ln195_reg_1176, ap_block_pp2_stage1_subdone)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln195_reg_1176 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) then 
            ap_condition_pp2_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp2_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axi_gmem1_BVALID, ap_CS_fsm_state21)
    begin
        if (((m_axi_gmem1_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_315_p4_assign_proc : process(icmp_ln195_reg_1176, indvar_flatten_reg_311, ap_CS_fsm_pp2_stage0, add_ln195_reg_1208, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln195_reg_1176 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_315_p4 <= add_ln195_reg_1208;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_315_p4 <= indvar_flatten_reg_311;
        end if; 
    end process;


    ap_phi_mux_value_nms_1_phi_fu_407_p10_assign_proc : process(icmp_ln195_reg_1176_pp2_iter3_reg, grad_nms_reg_1273, ap_phi_reg_pp2_iter4_value_nms_1_reg_404, select_ln226_fu_1015_p3, select_ln233_fu_1003_p3, select_ln240_fu_991_p3, select_ln247_fu_979_p3)
    begin
        if ((icmp_ln195_reg_1176_pp2_iter3_reg = ap_const_lv1_0)) then
            if ((grad_nms_reg_1273 = ap_const_lv8_87)) then 
                ap_phi_mux_value_nms_1_phi_fu_407_p10 <= select_ln247_fu_979_p3;
            elsif ((grad_nms_reg_1273 = ap_const_lv8_5A)) then 
                ap_phi_mux_value_nms_1_phi_fu_407_p10 <= select_ln240_fu_991_p3;
            elsif ((grad_nms_reg_1273 = ap_const_lv8_2D)) then 
                ap_phi_mux_value_nms_1_phi_fu_407_p10 <= select_ln233_fu_1003_p3;
            elsif ((grad_nms_reg_1273 = ap_const_lv8_0)) then 
                ap_phi_mux_value_nms_1_phi_fu_407_p10 <= select_ln226_fu_1015_p3;
            else 
                ap_phi_mux_value_nms_1_phi_fu_407_p10 <= ap_phi_reg_pp2_iter4_value_nms_1_reg_404;
            end if;
        else 
            ap_phi_mux_value_nms_1_phi_fu_407_p10 <= ap_phi_reg_pp2_iter4_value_nms_1_reg_404;
        end if; 
    end process;


    ap_phi_mux_window_buf_0_1_3_phi_fu_397_p4_assign_proc : process(ap_enable_reg_pp2_iter4, window_buf_0_1_reg_354, window_buf_0_1_3_reg_394, ap_CS_fsm_pp2_stage0, icmp_ln195_reg_1176_pp2_iter3_reg, ap_block_pp2_stage0)
    begin
        if (((icmp_ln195_reg_1176_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            ap_phi_mux_window_buf_0_1_3_phi_fu_397_p4 <= window_buf_0_1_reg_354;
        else 
            ap_phi_mux_window_buf_0_1_3_phi_fu_397_p4 <= window_buf_0_1_3_reg_394;
        end if; 
    end process;


    ap_phi_mux_window_buf_1_1_3_phi_fu_347_p4_assign_proc : process(ap_enable_reg_pp2_iter4, window_buf_1_1_3_reg_344, ap_CS_fsm_pp2_stage0, icmp_ln195_reg_1176_pp2_iter3_reg, value_nms_reg_1260, ap_block_pp2_stage0)
    begin
        if (((icmp_ln195_reg_1176_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            ap_phi_mux_window_buf_1_1_3_phi_fu_347_p4 <= value_nms_reg_1260;
        else 
            ap_phi_mux_window_buf_1_1_3_phi_fu_347_p4 <= window_buf_1_1_3_reg_344;
        end if; 
    end process;


    ap_phi_mux_window_buf_1_1_phi_fu_388_p4_assign_proc : process(ap_enable_reg_pp2_iter4, window_buf_1_1_reg_385, ap_CS_fsm_pp2_stage0, icmp_ln195_reg_1176_pp2_iter3_reg, window_buf_1_2_reg_1302, ap_block_pp2_stage0)
    begin
        if (((icmp_ln195_reg_1176_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            ap_phi_mux_window_buf_1_1_phi_fu_388_p4 <= window_buf_1_2_reg_1302;
        else 
            ap_phi_mux_window_buf_1_1_phi_fu_388_p4 <= window_buf_1_1_reg_385;
        end if; 
    end process;


    ap_phi_mux_window_buf_2_1_3_phi_fu_378_p4_assign_proc : process(ap_enable_reg_pp2_iter4, window_buf_2_1_reg_334, window_buf_2_1_3_reg_375, ap_CS_fsm_pp2_stage0, icmp_ln195_reg_1176_pp2_iter3_reg, ap_block_pp2_stage0)
    begin
        if (((icmp_ln195_reg_1176_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            ap_phi_mux_window_buf_2_1_3_phi_fu_378_p4 <= window_buf_2_1_reg_334;
        else 
            ap_phi_mux_window_buf_2_1_3_phi_fu_378_p4 <= window_buf_2_1_3_reg_375;
        end if; 
    end process;


    ap_phi_mux_window_buf_2_1_phi_fu_337_p4_assign_proc : process(ap_enable_reg_pp2_iter4, window_buf_2_1_reg_334, ap_CS_fsm_pp2_stage0, icmp_ln195_reg_1176_pp2_iter3_reg, window_buf_2_2_cast_reg_1307, ap_block_pp2_stage0)
    begin
        if (((icmp_ln195_reg_1176_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            ap_phi_mux_window_buf_2_1_phi_fu_337_p4 <= window_buf_2_2_cast_reg_1307;
        else 
            ap_phi_mux_window_buf_2_1_phi_fu_337_p4 <= window_buf_2_1_reg_334;
        end if; 
    end process;


    ap_phi_mux_xi_phi_fu_368_p4_assign_proc : process(icmp_ln195_reg_1176, xi_reg_364, ap_CS_fsm_pp2_stage0, add_ln196_reg_1240, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln195_reg_1176 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_xi_phi_fu_368_p4 <= add_ln196_reg_1240;
        else 
            ap_phi_mux_xi_phi_fu_368_p4 <= xi_reg_364;
        end if; 
    end process;


    ap_phi_mux_yi_phi_fu_327_p4_assign_proc : process(icmp_ln195_reg_1176, yi_reg_323, ap_CS_fsm_pp2_stage0, select_ln195_1_reg_1188, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln195_reg_1176 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_yi_phi_fu_327_p4 <= select_ln195_1_reg_1188;
        else 
            ap_phi_mux_yi_phi_fu_327_p4 <= yi_reg_323;
        end if; 
    end process;

    ap_phi_reg_pp2_iter0_value_nms_1_reg_404 <= "XXXXXXXX";

    ap_ready_assign_proc : process(m_axi_gmem1_BVALID, ap_CS_fsm_state21)
    begin
        if (((m_axi_gmem1_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cmp100_not_i_fu_703_p2 <= "1" when (unsigned(ap_phi_mux_yi_phi_fu_327_p4) > unsigned(ap_const_lv10_1FC)) else "0";
    cmp100_not_i_mid1_fu_777_p2 <= "1" when (unsigned(add_ln195_1_fu_735_p2) > unsigned(ap_const_lv10_1FC)) else "0";
    data_0_address0 <= zext_ln209_fu_821_p1(18 - 1 downto 0);

    data_0_ce0_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_block_pp2_stage1_11001)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then 
            data_0_ce0 <= ap_const_logic_1;
        else 
            data_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_1_address0 <= zext_ln209_fu_821_p1(18 - 1 downto 0);

    data_1_ce0_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_block_pp2_stage1_11001)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then 
            data_1_ce0 <= ap_const_logic_1;
        else 
            data_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_61_fu_429_p2 <= std_logic_vector(unsigned(empty_reg_278) + unsigned(ap_const_lv11_1));
    empty_62_fu_435_p1 <= empty_reg_278(9 - 1 downto 0);
    empty_63_fu_457_p2 <= (tmp_9_fu_449_p3 or ap_const_lv6_F);
    empty_64_fu_463_p2 <= "1" when (unsigned(tmp_9_fu_449_p3) > unsigned(empty_63_fu_457_p2)) else "0";
    empty_65_fu_469_p3 <= 
        tmp_9_fu_449_p3 when (empty_64_fu_463_p2(0) = '1') else 
        empty_63_fu_457_p2;
    empty_66_fu_487_p3 <= 
        empty_63_reg_1069 when (empty_64_reg_1074(0) = '1') else 
        tmp_9_reg_1064;
    empty_67_fu_477_p2 <= std_logic_vector(signed(ap_const_lv6_2F) - signed(empty_65_fu_469_p3));
    empty_68_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_66_fu_487_p3),48));
    empty_69_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_67_reg_1080),48));
    empty_70_fu_499_p3 <= 
        ap_const_lv48_0 when (empty_64_reg_1074(0) = '1') else 
        ap_const_lv48_0;
    empty_71_fu_506_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv48_FFFFFFFFFFFF),to_integer(unsigned('0' & empty_68_fu_492_p1(31-1 downto 0)))));
    empty_72_fu_512_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv48_FFFFFFFFFFFF),to_integer(unsigned('0' & empty_69_fu_496_p1(31-1 downto 0)))));
    empty_73_fu_524_p2 <= (p_demorgan_fu_518_p2 and empty_70_fu_499_p3);
    empty_74_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_531_p3),6));
    empty_76_fu_567_p1 <= window_buf_0_1_0_fu_182(8 - 1 downto 0);
    empty_77_fu_571_p1 <= window_buf_0_2_0_fu_186(8 - 1 downto 0);
    empty_78_fu_575_p1 <= window_buf_1_1_0_fu_190(8 - 1 downto 0);
    empty_79_fu_579_p1 <= window_buf_2_1_0_fu_194(8 - 1 downto 0);
    empty_80_fu_583_p1 <= window_buf_2_2_0_fu_198(8 - 1 downto 0);
    empty_82_fu_593_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(empty_75_reg_289));
    empty_83_fu_627_p1 <= phi_urem_reg_300(2 - 1 downto 0);
    empty_84_fu_667_p2 <= "1" when (unsigned(next_urem_fu_661_p2) < unsigned(ap_const_lv4_3)) else "0";
    exitcond569_i_fu_587_p2 <= "1" when (empty_75_reg_289 = ap_const_lv4_9) else "0";
    exitcond5710_i_fu_423_p2 <= "1" when (empty_reg_278 = ap_const_lv11_600) else "0";

    gmem1_blk_n_AW_assign_proc : process(m_axi_gmem1_AWREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            gmem1_blk_n_AW <= m_axi_gmem1_AWREADY;
        else 
            gmem1_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_B_assign_proc : process(m_axi_gmem1_BVALID, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            gmem1_blk_n_B <= m_axi_gmem1_BVALID;
        else 
            gmem1_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_W_assign_proc : process(m_axi_gmem1_WREADY, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter4, ap_block_pp2_stage1, icmp_ln195_reg_1176_pp2_iter4_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln195_reg_1176_pp2_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            gmem1_blk_n_W <= m_axi_gmem1_WREADY;
        else 
            gmem1_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grad_nms_fu_882_p4 <= ap_phi_mux_window_buf_1_1_phi_fu_388_p4(15 downto 8);
    grp_fu_419_p2 <= "1" when (unsigned(value_nms_reg_1260) < unsigned(trunc_ln219_fu_916_p1)) else "0";
    icmp59_fu_771_p2 <= "1" when (tmp_18_fu_761_p4 = ap_const_lv8_0) else "0";
    icmp_fu_697_p2 <= "1" when (tmp_17_fu_687_p4 = ap_const_lv8_0) else "0";
    icmp_ln195_fu_715_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_315_p4 = ap_const_lv19_40000) else "0";
    icmp_ln196_fu_721_p2 <= "1" when (ap_phi_mux_xi_phi_fu_368_p4 = ap_const_lv10_200) else "0";
    icmp_ln226_fu_910_p2 <= "1" when (unsigned(value_nms_fu_878_p1) < unsigned(ap_phi_mux_window_buf_1_1_3_phi_fu_347_p4)) else "0";
    icmp_ln227_fu_970_p2 <= "1" when (unsigned(value_nms_reg_1260) < unsigned(trunc_ln219_2_fu_925_p4)) else "0";
    icmp_ln233_fu_904_p2 <= "1" when (unsigned(value_nms_fu_878_p1) < unsigned(ap_phi_mux_window_buf_0_1_3_phi_fu_397_p4)) else "0";
    icmp_ln234_fu_965_p2 <= "1" when (unsigned(value_nms_reg_1260) < unsigned(trunc_ln219_4_fu_945_p4)) else "0";
    icmp_ln241_fu_898_p2 <= "1" when (unsigned(value_nms_fu_878_p1) < unsigned(ap_phi_mux_window_buf_2_1_phi_fu_337_p4)) else "0";
    icmp_ln247_fu_892_p2 <= "1" when (unsigned(value_nms_fu_878_p1) < unsigned(ap_phi_mux_window_buf_2_1_3_phi_fu_378_p4)) else "0";
    icmp_ln254_1_fu_841_p2 <= "1" when (unsigned(select_ln195_reg_1180) > unsigned(ap_const_lv10_1FC)) else "0";
    icmp_ln254_fu_835_p2 <= "1" when (tmp_21_fu_826_p4 = ap_const_lv8_0) else "0";
    idx_urem_fu_673_p3 <= 
        next_urem_fu_661_p2 when (empty_84_fu_667_p2(0) = '1') else 
        ap_const_lv4_0;

    line_buf_address0_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, p_cast141_i_fu_483_p1, ap_block_pp0_stage0, zext_ln196_fu_817_p1, zext_ln209_1_fu_865_p1)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            line_buf_address0 <= zext_ln209_1_fu_865_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1))) then 
            line_buf_address0 <= zext_ln196_fu_817_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            line_buf_address0 <= p_cast141_i_fu_483_p1(9 - 1 downto 0);
        else 
            line_buf_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    line_buf_address1_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1, ap_CS_fsm_pp2_stage0, line_buf_addr_2_reg_1213, line_buf_addr_2_reg_1213_pp2_iter2_reg, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            line_buf_address1 <= line_buf_addr_2_reg_1213_pp2_iter2_reg;
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1))) then 
            line_buf_address1 <= line_buf_addr_2_reg_1213;
        else 
            line_buf_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    line_buf_ce0_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_block_pp2_stage1_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter2)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)))) then 
            line_buf_ce0 <= ap_const_logic_1;
        else 
            line_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_ce1_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)) or ((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            line_buf_ce1 <= ap_const_logic_1;
        else 
            line_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, ap_block_pp0_stage0, empty_73_fu_524_p2, tmp_20_fu_869_p4)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            line_buf_d0 <= tmp_20_fu_869_p4;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            line_buf_d0 <= empty_73_fu_524_p2;
        else 
            line_buf_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    line_buf_d1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_reg_1245),48));

    line_buf_we0_assign_proc : process(exitcond5710_i_reg_1045, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln195_reg_1176_pp2_iter1_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter2, mask_fu_542_p2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln195_reg_1176_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            line_buf_we0 <= ap_const_lv6_30;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond5710_i_reg_1045 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buf_we0 <= mask_fu_542_p2;
        else 
            line_buf_we0 <= ap_const_lv6_0;
        end if; 
    end process;


    line_buf_we1_assign_proc : process(ap_CS_fsm_pp2_stage1, icmp_ln195_reg_1176_pp2_iter1_reg, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln195_reg_1176_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then 
            line_buf_we1 <= ap_const_lv6_F;
        else 
            line_buf_we1 <= ap_const_lv6_0;
        end if; 
    end process;

    m_axi_gmem1_ARADDR <= ap_const_lv64_0;
    m_axi_gmem1_ARBURST <= ap_const_lv2_0;
    m_axi_gmem1_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem1_ARID <= ap_const_lv1_0;
    m_axi_gmem1_ARLEN <= ap_const_lv32_0;
    m_axi_gmem1_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem1_ARPROT <= ap_const_lv3_0;
    m_axi_gmem1_ARQOS <= ap_const_lv4_0;
    m_axi_gmem1_ARREGION <= ap_const_lv4_0;
    m_axi_gmem1_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem1_ARUSER <= ap_const_lv1_0;
    m_axi_gmem1_ARVALID <= ap_const_logic_0;
    m_axi_gmem1_AWADDR <= out_1_reg_1040;
    m_axi_gmem1_AWBURST <= ap_const_lv2_0;
    m_axi_gmem1_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem1_AWID <= ap_const_lv1_0;
    m_axi_gmem1_AWLEN <= ap_const_lv32_40000;
    m_axi_gmem1_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem1_AWPROT <= ap_const_lv3_0;
    m_axi_gmem1_AWQOS <= ap_const_lv4_0;
    m_axi_gmem1_AWREGION <= ap_const_lv4_0;
    m_axi_gmem1_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem1_AWUSER <= ap_const_lv1_0;

    m_axi_gmem1_AWVALID_assign_proc : process(m_axi_gmem1_AWREADY, ap_CS_fsm_state6)
    begin
        if (((m_axi_gmem1_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_gmem1_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem1_BREADY_assign_proc : process(m_axi_gmem1_BVALID, ap_CS_fsm_state21)
    begin
        if (((m_axi_gmem1_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            m_axi_gmem1_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem1_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem1_RREADY <= ap_const_logic_0;
    m_axi_gmem1_WDATA <= value_nms_2_reg_1332;
    m_axi_gmem1_WID <= ap_const_lv1_0;
    m_axi_gmem1_WLAST <= ap_const_logic_0;
    m_axi_gmem1_WSTRB <= ap_const_lv1_1;
    m_axi_gmem1_WUSER <= ap_const_lv1_0;

    m_axi_gmem1_WVALID_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter4, icmp_ln195_reg_1176_pp2_iter4_reg, ap_block_pp2_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln195_reg_1176_pp2_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            m_axi_gmem1_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem1_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mask_fu_542_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv6_3),to_integer(unsigned('0' & empty_74_fu_538_p1(6-1 downto 0)))));
    mul_fu_611_p0 <= ap_const_lv11_2B(7 - 1 downto 0);
    mul_fu_611_p1 <= mul_fu_611_p10(5 - 1 downto 0);
    mul_fu_611_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_599_p3),11));
    next_urem_fu_661_p2 <= std_logic_vector(unsigned(phi_urem_reg_300) + unsigned(ap_const_lv4_1));
    or_ln226_fu_1011_p2 <= (icmp_ln227_reg_1327 or icmp_ln226_reg_1292);
    or_ln233_fu_999_p2 <= (icmp_ln234_reg_1322 or icmp_ln233_reg_1287);
    or_ln240_fu_987_p2 <= (icmp_ln241_reg_1282 or icmp_ln240_reg_1317);
    or_ln247_fu_975_p2 <= (icmp_ln248_reg_1312 or icmp_ln247_reg_1277);
    or_ln254_1_fu_709_p2 <= (icmp_fu_697_p2 or cmp100_not_i_fu_703_p2);
    or_ln254_2_fu_1027_p2 <= (select_ln195_2_reg_1193_pp2_iter3_reg or or_ln254_fu_1023_p2);
    or_ln254_3_fu_783_p2 <= (icmp59_fu_771_p2 or cmp100_not_i_mid1_fu_777_p2);
    or_ln254_fu_1023_p2 <= (icmp_ln254_reg_1230_pp2_iter3_reg or icmp_ln254_1_reg_1235_pp2_iter3_reg);

    out_r_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_r_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_r_blk_n <= out_r_empty_n;
        else 
            out_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_r_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_r_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_r_read <= ap_const_logic_1;
        else 
            out_r_read <= ap_const_logic_0;
        end if; 
    end process;

    p_cast141_i_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_62_reg_1054),64));
    p_demorgan_fu_518_p2 <= (empty_72_fu_512_p2 and empty_71_fu_506_p2);
    p_mid2_fu_753_p3 <= (trunc_ln195_1_fu_749_p1 & ap_const_lv9_0);
    p_t_i_fu_617_p4 <= mul_fu_611_p2(9 downto 8);
    select_ln195_1_fu_741_p3 <= 
        add_ln195_1_fu_735_p2 when (icmp_ln196_fu_721_p2(0) = '1') else 
        ap_phi_mux_yi_phi_fu_327_p4;
    select_ln195_2_fu_789_p3 <= 
        or_ln254_3_fu_783_p2 when (icmp_ln196_fu_721_p2(0) = '1') else 
        or_ln254_1_fu_709_p2;
    select_ln195_fu_727_p3 <= 
        ap_const_lv10_0 when (icmp_ln196_fu_721_p2(0) = '1') else 
        ap_phi_mux_xi_phi_fu_368_p4;
    select_ln226_fu_1015_p3 <= 
        ap_const_lv8_0 when (or_ln226_fu_1011_p2(0) = '1') else 
        value_nms_reg_1260;
    select_ln233_fu_1003_p3 <= 
        ap_const_lv8_0 when (or_ln233_fu_999_p2(0) = '1') else 
        value_nms_reg_1260;
    select_ln240_fu_991_p3 <= 
        ap_const_lv8_0 when (or_ln240_fu_987_p2(0) = '1') else 
        value_nms_reg_1260;
    select_ln247_fu_979_p3 <= 
        ap_const_lv8_0 when (or_ln247_fu_975_p2(0) = '1') else 
        value_nms_reg_1260;
    tmp_16_fu_531_p3 <= (tmp_reg_1059 & ap_const_lv1_0);
    tmp_17_fu_687_p4 <= ap_phi_mux_yi_phi_fu_327_p4(9 downto 2);
    tmp_18_fu_761_p4 <= add_ln195_1_fu_735_p2(9 downto 2);
    tmp_20_fu_869_p4 <= ((data_1_load_reg_1255 & data_0_load_reg_1250) & ap_const_lv32_0);
    tmp_21_fu_826_p4 <= select_ln195_reg_1180(9 downto 2);
    tmp_9_fu_449_p3 <= (tmp_fu_439_p4 & ap_const_lv4_0);
    tmp_fu_439_p4 <= empty_reg_278(10 downto 9);
    tmp_s_fu_599_p3 <= (empty_75_reg_289 & ap_const_lv1_0);
    trunc_ln195_1_fu_749_p1 <= select_ln195_1_fu_741_p3(9 - 1 downto 0);
    trunc_ln196_fu_797_p1 <= select_ln195_fu_727_p3(9 - 1 downto 0);
    trunc_ln219_1_fu_921_p1 <= line_buf_q1(8 - 1 downto 0);
    trunc_ln219_2_fu_925_p4 <= line_buf_q1(23 downto 16);
    trunc_ln219_4_fu_945_p4 <= line_buf_q1(39 downto 32);
    trunc_ln219_fu_916_p1 <= line_buf_q1(8 - 1 downto 0);
    value_nms_2_fu_1032_p3 <= 
        ap_const_lv8_0 when (or_ln254_2_fu_1027_p2(0) = '1') else 
        ap_phi_mux_value_nms_1_phi_fu_407_p10;
    value_nms_fu_878_p1 <= ap_phi_mux_window_buf_1_1_phi_fu_388_p4(8 - 1 downto 0);
    window_buf_0_1_0_fu_182 <= ap_const_lv16_0;
    window_buf_0_2_0_fu_186 <= ap_const_lv16_0;
    window_buf_1_1_0_fu_190 <= ap_const_lv16_0;
    window_buf_1_2_0_load_reg_1121 <= ap_const_lv16_0;
    window_buf_2_1_0_fu_194 <= ap_const_lv16_0;
    window_buf_2_2_0_fu_198 <= ap_const_lv16_0;
    zext_ln196_1_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln195_fu_727_p3),18));
    zext_ln196_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln195_reg_1180),64));
    zext_ln209_1_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln196_reg_1198_pp2_iter1_reg),64));
    zext_ln209_fu_821_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln209_reg_1203),64));
end behav;

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gsn_gau6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        data,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        out1,
        out1_out_din,
        out1_out_full_n,
        out1_out_write
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_pp0_stage0 = 13'd2;
parameter    ap_ST_fsm_state4 = 13'd4;
parameter    ap_ST_fsm_state5 = 13'd8;
parameter    ap_ST_fsm_state6 = 13'd16;
parameter    ap_ST_fsm_state7 = 13'd32;
parameter    ap_ST_fsm_state8 = 13'd64;
parameter    ap_ST_fsm_state9 = 13'd128;
parameter    ap_ST_fsm_state10 = 13'd256;
parameter    ap_ST_fsm_state11 = 13'd512;
parameter    ap_ST_fsm_state12 = 13'd1024;
parameter    ap_ST_fsm_pp2_stage0 = 13'd2048;
parameter    ap_ST_fsm_state19 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [63:0] m_axi_gmem0_AWADDR;
output  [0:0] m_axi_gmem0_AWID;
output  [31:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [0:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [7:0] m_axi_gmem0_WDATA;
output  [0:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [0:0] m_axi_gmem0_WID;
output  [0:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [63:0] m_axi_gmem0_ARADDR;
output  [0:0] m_axi_gmem0_ARID;
output  [31:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [0:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [7:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [0:0] m_axi_gmem0_RID;
input  [0:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [0:0] m_axi_gmem0_BID;
input  [0:0] m_axi_gmem0_BUSER;
input  [63:0] data;
output  [17:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [7:0] out_r_d0;
input  [63:0] out1;
output  [63:0] out1_out_din;
input   out1_out_full_n;
output   out1_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem0_ARVALID;
reg m_axi_gmem0_RREADY;
reg out_r_ce0;
reg out_r_we0;
reg out1_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem0_blk_n_AR;
wire    ap_CS_fsm_state6;
reg    gmem0_blk_n_R;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln31_reg_1015;
reg   [0:0] icmp_ln31_reg_1015_pp2_iter1_reg;
reg    out1_out_blk_n;
reg   [10:0] empty_reg_251;
reg   [18:0] indvar_flatten_reg_295;
reg   [9:0] xi_reg_306;
reg   [7:0] window_buf_1_1_reg_317;
reg   [7:0] window_buf_1_1_3_i_i_reg_327;
reg   [7:0] window_buf_2_1_reg_337;
reg   [7:0] window_buf_2_1_3_i_i_reg_347;
reg   [7:0] window_buf_0_1_reg_357;
reg   [7:0] window_buf_0_1_3_i_i_reg_367;
reg   [9:0] yi_reg_377;
reg    ap_block_state1;
wire   [0:0] exitcond4613_i_i_fu_388_p2;
reg   [0:0] exitcond4613_i_i_reg_879;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [10:0] empty_87_fu_394_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [8:0] empty_88_fu_400_p1;
reg   [8:0] empty_88_reg_888;
wire   [1:0] tmp_s_fu_404_p4;
reg   [1:0] tmp_s_reg_893;
wire   [4:0] tmp_1_fu_414_p3;
reg   [4:0] tmp_1_reg_898;
wire   [4:0] empty_89_fu_422_p2;
reg   [4:0] empty_89_reg_903;
wire   [0:0] empty_90_fu_428_p2;
reg   [0:0] empty_90_reg_908;
wire   [4:0] empty_93_fu_442_p2;
reg   [4:0] empty_93_reg_914;
wire   [7:0] window_buf_0_1_0_i_i_load_reg_955;
wire    ap_CS_fsm_state5;
wire   [7:0] window_buf_0_2_0_i_i_load_reg_960;
wire   [7:0] window_buf_1_1_0_i_i_load_reg_965;
wire   [7:0] window_buf_1_2_0_i_i_load_reg_970;
wire   [7:0] window_buf_2_1_0_i_i_load_reg_975;
wire   [7:0] window_buf_2_2_0_i_i_load_reg_980;
wire   [3:0] empty_103_fu_530_p2;
wire   [7:0] next_mul_fu_536_p2;
wire   [0:0] exitcond4512_i_i_fu_524_p2;
wire   [3:0] idx_urem_fu_598_p3;
wire   [0:0] icmp_ln31_fu_612_p2;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state13_pp2_stage0_iter0;
wire    ap_block_state14_pp2_stage0_iter1;
reg    ap_block_state15_pp2_stage0_iter2;
wire    ap_block_state16_pp2_stage0_iter3;
wire    ap_block_state17_pp2_stage0_iter4;
wire    ap_block_state18_pp2_stage0_iter5;
reg    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln31_reg_1015_pp2_iter2_reg;
reg   [0:0] icmp_ln31_reg_1015_pp2_iter3_reg;
reg   [0:0] icmp_ln31_reg_1015_pp2_iter4_reg;
wire   [18:0] add_ln31_fu_618_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] icmp_ln32_fu_624_p2;
reg   [0:0] icmp_ln32_reg_1024;
reg   [0:0] icmp_ln32_reg_1024_pp2_iter1_reg;
reg   [0:0] icmp_ln32_reg_1024_pp2_iter2_reg;
reg   [0:0] icmp_ln32_reg_1024_pp2_iter3_reg;
wire   [9:0] select_ln31_fu_630_p3;
reg   [9:0] select_ln31_reg_1029;
reg   [9:0] select_ln31_reg_1029_pp2_iter1_reg;
reg   [9:0] select_ln31_reg_1029_pp2_iter2_reg;
reg   [9:0] select_ln31_reg_1029_pp2_iter3_reg;
wire   [9:0] add_ln32_fu_638_p2;
reg   [8:0] line_buf_addr_4_reg_1040;
reg   [8:0] line_buf_addr_4_reg_1040_pp2_iter2_reg;
reg   [7:0] window_buf_0_2_reg_1046;
reg   [7:0] window_buf_0_2_reg_1046_pp2_iter3_reg;
reg   [7:0] window_buf_1_2_reg_1052;
reg   [7:0] window_buf_1_2_reg_1052_pp2_iter3_reg;
reg   [7:0] window_buf_2_2_reg_1058;
reg   [7:0] window_buf_2_2_reg_1058_pp2_iter3_reg;
reg   [15:0] tmp_reg_1065;
wire   [8:0] shl_ln62_1_fu_678_p3;
reg   [8:0] shl_ln62_1_reg_1070;
reg   [8:0] shl_ln62_1_reg_1070_pp2_iter3_reg;
wire   [9:0] add_ln62_1_fu_722_p2;
reg   [9:0] add_ln62_1_reg_1075;
wire   [9:0] shl_ln62_2_fu_728_p3;
reg   [9:0] shl_ln62_2_reg_1080;
wire   [9:0] add_ln62_6_fu_765_p2;
reg   [9:0] add_ln62_6_reg_1085;
wire   [9:0] select_ln31_1_fu_777_p3;
reg   [9:0] select_ln31_1_reg_1090;
reg    ap_enable_reg_pp2_iter4;
wire   [17:0] add_ln44_fu_799_p2;
reg   [17:0] add_ln44_reg_1095;
reg   [7:0] trunc_ln_reg_1100;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state12;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_flush_enable;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter3;
reg    ap_condition_pp2_exit_iter4_state17;
reg    ap_enable_reg_pp2_iter5;
reg   [8:0] line_buf_address0;
reg    line_buf_ce0;
reg   [2:0] line_buf_we0;
reg   [23:0] line_buf_d0;
wire   [8:0] line_buf_address1;
reg    line_buf_ce1;
wire   [23:0] line_buf_q1;
reg   [3:0] empty_101_reg_262;
wire    ap_CS_fsm_state4;
reg   [7:0] phi_mul_reg_273;
reg   [3:0] phi_urem_reg_284;
reg   [7:0] ap_phi_mux_window_buf_1_1_3_i_i_phi_fu_330_p4;
reg   [7:0] ap_phi_mux_window_buf_2_1_phi_fu_340_p4;
reg   [7:0] ap_phi_mux_window_buf_2_1_3_i_i_phi_fu_350_p4;
reg   [7:0] ap_phi_mux_window_buf_0_1_phi_fu_360_p4;
reg   [7:0] ap_phi_mux_window_buf_0_1_3_i_i_phi_fu_370_p4;
reg   [9:0] ap_phi_mux_yi_phi_fu_381_p4;
wire   [63:0] p_cast102_i_i_fu_448_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln32_fu_644_p1;
wire   [63:0] zext_ln44_fu_870_p1;
wire   [23:0] empty_99_fu_489_p2;
wire   [2:0] mask_fu_499_p2;
wire   [23:0] tmp_29_i_i_fu_686_p3;
wire   [4:0] empty_91_fu_434_p3;
wire   [4:0] empty_92_fu_452_p3;
wire   [23:0] empty_94_fu_457_p1;
wire   [23:0] empty_95_fu_461_p1;
wire   [23:0] empty_97_fu_471_p2;
wire   [23:0] empty_98_fu_477_p2;
wire   [23:0] empty_96_fu_464_p3;
wire   [23:0] p_demorgan_fu_483_p2;
wire   [2:0] empty_100_fu_496_p1;
wire   [3:0] next_urem_fu_586_p2;
wire   [0:0] empty_105_fu_592_p2;
wire   [8:0] shl_ln_fu_697_p3;
wire   [8:0] zext_ln62_fu_693_p1;
wire   [8:0] zext_ln62_2_fu_709_p1;
wire   [8:0] add_ln62_fu_712_p2;
wire   [9:0] zext_ln62_3_fu_718_p1;
wire   [9:0] zext_ln62_1_fu_705_p1;
wire   [8:0] shl_ln62_4_fu_740_p3;
wire   [8:0] zext_ln62_9_fu_736_p1;
wire   [8:0] zext_ln62_11_fu_752_p1;
wire   [8:0] add_ln62_5_fu_755_p2;
wire   [9:0] zext_ln62_13_fu_761_p1;
wire   [9:0] zext_ln62_10_fu_748_p1;
wire   [9:0] add_ln31_1_fu_771_p2;
wire   [8:0] trunc_ln31_fu_784_p1;
wire   [17:0] p_mid2_fu_788_p3;
wire   [17:0] zext_ln32_1_fu_796_p1;
wire   [10:0] zext_ln62_4_fu_805_p1;
wire   [10:0] zext_ln62_5_fu_808_p1;
wire   [10:0] add_ln62_2_fu_811_p2;
wire   [8:0] shl_ln62_3_fu_824_p3;
wire   [10:0] zext_ln62_7_fu_821_p1;
wire   [10:0] zext_ln62_8_fu_831_p1;
wire   [10:0] add_ln62_3_fu_835_p2;
wire   [11:0] zext_ln62_12_fu_841_p1;
wire   [11:0] zext_ln62_6_fu_817_p1;
wire   [11:0] zext_ln62_14_fu_851_p1;
wire   [11:0] add_ln62_4_fu_845_p2;
wire   [11:0] add_ln62_7_fu_854_p2;
wire    ap_CS_fsm_state19;
reg   [12:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
end

gsn_gau6_line_buf #(
    .DataWidth( 24 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
line_buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buf_address0),
    .ce0(line_buf_ce0),
    .we0(line_buf_we0),
    .d0(line_buf_d0),
    .address1(line_buf_address1),
    .ce1(line_buf_ce1),
    .q1(line_buf_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out1_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out1_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp2_flush_enable)) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end else if (((1'b1 == ap_CS_fsm_state12) | ((ap_enable_reg_pp2_iter3 == 1'b0) & (1'b1 == ap_condition_pp2_exit_iter4_state17) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
            ap_enable_reg_pp2_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter4_state17) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter3;
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp2_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        empty_101_reg_262 <= 4'd0;
    end else if (((exitcond4512_i_i_fu_524_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        empty_101_reg_262 <= empty_103_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond4613_i_i_fu_388_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_reg_251 <= empty_87_fu_394_p2;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out1_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_251 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln31_fu_612_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        indvar_flatten_reg_295 <= add_ln31_fu_618_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        indvar_flatten_reg_295 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        phi_mul_reg_273 <= 8'd0;
    end else if (((exitcond4512_i_i_fu_524_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_mul_reg_273 <= next_mul_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        phi_urem_reg_284 <= 4'd0;
    end else if (((exitcond4512_i_i_fu_524_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_urem_reg_284 <= idx_urem_fu_598_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter4 == 1'b1) & (icmp_ln31_reg_1015_pp2_iter3_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        window_buf_0_1_3_i_i_reg_367 <= window_buf_0_1_reg_357;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        window_buf_0_1_3_i_i_reg_367 <= window_buf_0_1_0_i_i_load_reg_955;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter4 == 1'b1) & (icmp_ln31_reg_1015_pp2_iter3_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        window_buf_0_1_reg_357 <= window_buf_0_2_reg_1046_pp2_iter3_reg;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        window_buf_0_1_reg_357 <= window_buf_0_2_0_i_i_load_reg_960;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b1) & (icmp_ln31_reg_1015_pp2_iter2_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        window_buf_1_1_3_i_i_reg_327 <= window_buf_1_1_reg_317;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        window_buf_1_1_3_i_i_reg_327 <= window_buf_1_1_0_i_i_load_reg_965;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b1) & (icmp_ln31_reg_1015_pp2_iter2_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        window_buf_1_1_reg_317 <= window_buf_1_2_reg_1052;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        window_buf_1_1_reg_317 <= window_buf_1_2_0_i_i_load_reg_970;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter4 == 1'b1) & (icmp_ln31_reg_1015_pp2_iter3_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        window_buf_2_1_3_i_i_reg_347 <= window_buf_2_1_reg_337;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        window_buf_2_1_3_i_i_reg_347 <= window_buf_2_1_0_i_i_load_reg_975;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter4 == 1'b1) & (icmp_ln31_reg_1015_pp2_iter3_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        window_buf_2_1_reg_337 <= window_buf_2_2_reg_1058_pp2_iter3_reg;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        window_buf_2_1_reg_337 <= window_buf_2_2_0_i_i_load_reg_980;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln31_fu_612_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        xi_reg_306 <= add_ln32_fu_638_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        xi_reg_306 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter5 == 1'b1) & (icmp_ln31_reg_1015_pp2_iter4_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        yi_reg_377 <= select_ln31_1_reg_1090;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        yi_reg_377 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_1015_pp2_iter3_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        add_ln44_reg_1095 <= add_ln44_fu_799_p2;
        trunc_ln_reg_1100 <= {{add_ln62_7_fu_854_p2[11:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_1015_pp2_iter2_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        add_ln62_1_reg_1075 <= add_ln62_1_fu_722_p2;
        add_ln62_6_reg_1085 <= add_ln62_6_fu_765_p2;
        shl_ln62_2_reg_1080[9 : 2] <= shl_ln62_2_fu_728_p3[9 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond4613_i_i_fu_388_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_88_reg_888 <= empty_88_fu_400_p1;
        empty_89_reg_903[4 : 3] <= empty_89_fu_422_p2[4 : 3];
        empty_90_reg_908 <= empty_90_fu_428_p2;
        empty_93_reg_914 <= empty_93_fu_442_p2;
        tmp_1_reg_898[4 : 3] <= tmp_1_fu_414_p3[4 : 3];
        tmp_s_reg_893 <= {{empty_reg_251[10:9]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond4613_i_i_reg_879 <= exitcond4613_i_i_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln31_reg_1015 <= icmp_ln31_fu_612_p2;
        icmp_ln31_reg_1015_pp2_iter1_reg <= icmp_ln31_reg_1015;
        icmp_ln32_reg_1024_pp2_iter1_reg <= icmp_ln32_reg_1024;
        select_ln31_reg_1029_pp2_iter1_reg <= select_ln31_reg_1029;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln31_reg_1015_pp2_iter2_reg <= icmp_ln31_reg_1015_pp2_iter1_reg;
        icmp_ln31_reg_1015_pp2_iter3_reg <= icmp_ln31_reg_1015_pp2_iter2_reg;
        icmp_ln31_reg_1015_pp2_iter4_reg <= icmp_ln31_reg_1015_pp2_iter3_reg;
        icmp_ln32_reg_1024_pp2_iter2_reg <= icmp_ln32_reg_1024_pp2_iter1_reg;
        icmp_ln32_reg_1024_pp2_iter3_reg <= icmp_ln32_reg_1024_pp2_iter2_reg;
        line_buf_addr_4_reg_1040_pp2_iter2_reg <= line_buf_addr_4_reg_1040;
        select_ln31_reg_1029_pp2_iter2_reg <= select_ln31_reg_1029_pp2_iter1_reg;
        select_ln31_reg_1029_pp2_iter3_reg <= select_ln31_reg_1029_pp2_iter2_reg;
        shl_ln62_1_reg_1070_pp2_iter3_reg[8 : 1] <= shl_ln62_1_reg_1070[8 : 1];
        window_buf_0_2_reg_1046_pp2_iter3_reg <= window_buf_0_2_reg_1046;
        window_buf_1_2_reg_1052_pp2_iter3_reg <= window_buf_1_2_reg_1052;
        window_buf_2_2_reg_1058_pp2_iter3_reg <= window_buf_2_2_reg_1058;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_612_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln32_reg_1024 <= icmp_ln32_fu_624_p2;
        select_ln31_reg_1029 <= select_ln31_fu_630_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln31_reg_1015 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        line_buf_addr_4_reg_1040 <= zext_ln32_fu_644_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter4 == 1'b1) & (icmp_ln31_reg_1015_pp2_iter3_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        select_ln31_1_reg_1090 <= select_ln31_1_fu_777_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_1015_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        shl_ln62_1_reg_1070[8 : 1] <= shl_ln62_1_fu_678_p3[8 : 1];
        tmp_reg_1065 <= {{line_buf_q1[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_1015_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        window_buf_0_2_reg_1046 <= {{line_buf_q1[15:8]}};
        window_buf_1_2_reg_1052 <= {{line_buf_q1[23:16]}};
        window_buf_2_2_reg_1058 <= m_axi_gmem0_RDATA;
    end
end

always @ (*) begin
    if ((exitcond4613_i_i_fu_388_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        ap_condition_pp2_exit_iter4_state17 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter4_state17 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_612_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
        ap_condition_pp2_flush_enable = 1'b1;
    end else begin
        ap_condition_pp2_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter4 == 1'b1) & (icmp_ln31_reg_1015_pp2_iter3_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_window_buf_0_1_3_i_i_phi_fu_370_p4 = window_buf_0_1_reg_357;
    end else begin
        ap_phi_mux_window_buf_0_1_3_i_i_phi_fu_370_p4 = window_buf_0_1_3_i_i_reg_367;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter4 == 1'b1) & (icmp_ln31_reg_1015_pp2_iter3_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_window_buf_0_1_phi_fu_360_p4 = window_buf_0_2_reg_1046_pp2_iter3_reg;
    end else begin
        ap_phi_mux_window_buf_0_1_phi_fu_360_p4 = window_buf_0_1_reg_357;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b1) & (icmp_ln31_reg_1015_pp2_iter2_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_window_buf_1_1_3_i_i_phi_fu_330_p4 = window_buf_1_1_reg_317;
    end else begin
        ap_phi_mux_window_buf_1_1_3_i_i_phi_fu_330_p4 = window_buf_1_1_3_i_i_reg_327;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter4 == 1'b1) & (icmp_ln31_reg_1015_pp2_iter3_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_window_buf_2_1_3_i_i_phi_fu_350_p4 = window_buf_2_1_reg_337;
    end else begin
        ap_phi_mux_window_buf_2_1_3_i_i_phi_fu_350_p4 = window_buf_2_1_3_i_i_reg_347;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter4 == 1'b1) & (icmp_ln31_reg_1015_pp2_iter3_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_window_buf_2_1_phi_fu_340_p4 = window_buf_2_2_reg_1058_pp2_iter3_reg;
    end else begin
        ap_phi_mux_window_buf_2_1_phi_fu_340_p4 = window_buf_2_1_reg_337;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter5 == 1'b1) & (icmp_ln31_reg_1015_pp2_iter4_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_yi_phi_fu_381_p4 = select_ln31_1_reg_1090;
    end else begin
        ap_phi_mux_yi_phi_fu_381_p4 = yi_reg_377;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        gmem0_blk_n_AR = m_axi_gmem0_ARREADY;
    end else begin
        gmem0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_1015_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        gmem0_blk_n_R = m_axi_gmem0_RVALID;
    end else begin
        gmem0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        line_buf_address0 = line_buf_addr_4_reg_1040_pp2_iter2_reg;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        line_buf_address0 = p_cast102_i_i_fu_448_p1;
    end else begin
        line_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp2_iter3 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        line_buf_ce0 = 1'b1;
    end else begin
        line_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        line_buf_ce1 = 1'b1;
    end else begin
        line_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        line_buf_d0 = tmp_29_i_i_fu_686_p3;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        line_buf_d0 = empty_99_fu_489_p2;
    end else begin
        line_buf_d0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b1) & (icmp_ln31_reg_1015_pp2_iter2_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        line_buf_we0 = 3'd7;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond4613_i_i_reg_879 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buf_we0 = mask_fu_499_p2;
    end else begin
        line_buf_we0 = 3'd0;
    end
end

always @ (*) begin
    if (((m_axi_gmem0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        m_axi_gmem0_ARVALID = 1'b1;
    end else begin
        m_axi_gmem0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_1015_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        m_axi_gmem0_RREADY = 1'b1;
    end else begin
        m_axi_gmem0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out1_out_blk_n = out1_out_full_n;
    end else begin
        out1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out1_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out1_out_write = 1'b1;
    end else begin
        out1_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter5 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter5 == 1'b1) & (icmp_ln31_reg_1015_pp2_iter4_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out1_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond4613_i_i_fu_388_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond4613_i_i_fu_388_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond4512_i_i_fu_524_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((m_axi_gmem0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln31_1_fu_771_p2 = (10'd1 + ap_phi_mux_yi_phi_fu_381_p4);

assign add_ln31_fu_618_p2 = (indvar_flatten_reg_295 + 19'd1);

assign add_ln32_fu_638_p2 = (10'd1 + select_ln31_fu_630_p3);

assign add_ln44_fu_799_p2 = (p_mid2_fu_788_p3 + zext_ln32_1_fu_796_p1);

assign add_ln62_1_fu_722_p2 = (zext_ln62_3_fu_718_p1 + zext_ln62_1_fu_705_p1);

assign add_ln62_2_fu_811_p2 = (zext_ln62_4_fu_805_p1 + zext_ln62_5_fu_808_p1);

assign add_ln62_3_fu_835_p2 = (zext_ln62_7_fu_821_p1 + zext_ln62_8_fu_831_p1);

assign add_ln62_4_fu_845_p2 = (zext_ln62_12_fu_841_p1 + zext_ln62_6_fu_817_p1);

assign add_ln62_5_fu_755_p2 = (zext_ln62_9_fu_736_p1 + zext_ln62_11_fu_752_p1);

assign add_ln62_6_fu_765_p2 = (zext_ln62_13_fu_761_p1 + zext_ln62_10_fu_748_p1);

assign add_ln62_7_fu_854_p2 = (zext_ln62_14_fu_851_p1 + add_ln62_4_fu_845_p2);

assign add_ln62_fu_712_p2 = (zext_ln62_fu_693_p1 + zext_ln62_2_fu_709_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((m_axi_gmem0_RVALID == 1'b0) & (icmp_ln31_reg_1015_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((m_axi_gmem0_RVALID == 1'b0) & (icmp_ln31_reg_1015_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out1_out_full_n == 1'b0));
end

assign ap_block_state13_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_pp2_stage0_iter2 = ((m_axi_gmem0_RVALID == 1'b0) & (icmp_ln31_reg_1015_pp2_iter1_reg == 1'd0));
end

assign ap_block_state16_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign empty_100_fu_496_p1 = tmp_s_reg_893;

assign empty_103_fu_530_p2 = (empty_101_reg_262 + 4'd1);

assign empty_105_fu_592_p2 = ((next_urem_fu_586_p2 < 4'd3) ? 1'b1 : 1'b0);

assign empty_87_fu_394_p2 = (empty_reg_251 + 11'd1);

assign empty_88_fu_400_p1 = empty_reg_251[8:0];

assign empty_89_fu_422_p2 = (tmp_1_fu_414_p3 | 5'd7);

assign empty_90_fu_428_p2 = ((tmp_1_fu_414_p3 > empty_89_fu_422_p2) ? 1'b1 : 1'b0);

assign empty_91_fu_434_p3 = ((empty_90_fu_428_p2[0:0] === 1'b1) ? tmp_1_fu_414_p3 : empty_89_fu_422_p2);

assign empty_92_fu_452_p3 = ((empty_90_reg_908[0:0] === 1'b1) ? empty_89_reg_903 : tmp_1_reg_898);

assign empty_93_fu_442_p2 = ($signed(5'd23) - $signed(empty_91_fu_434_p3));

assign empty_94_fu_457_p1 = empty_92_fu_452_p3;

assign empty_95_fu_461_p1 = empty_93_reg_914;

assign empty_96_fu_464_p3 = ((empty_90_reg_908[0:0] === 1'b1) ? 24'd0 : 24'd0);

assign empty_97_fu_471_p2 = 24'd16777215 << empty_94_fu_457_p1;

assign empty_98_fu_477_p2 = 24'd16777215 >> empty_95_fu_461_p1;

assign empty_99_fu_489_p2 = (p_demorgan_fu_483_p2 & empty_96_fu_464_p3);

assign exitcond4512_i_i_fu_524_p2 = ((empty_101_reg_262 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond4613_i_i_fu_388_p2 = ((empty_reg_251 == 11'd1536) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_612_p2 = ((indvar_flatten_reg_295 == 19'd262144) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_624_p2 = ((xi_reg_306 == 10'd512) ? 1'b1 : 1'b0);

assign idx_urem_fu_598_p3 = ((empty_105_fu_592_p2[0:0] === 1'b1) ? next_urem_fu_586_p2 : 4'd0);

assign line_buf_address1 = zext_ln32_fu_644_p1;

assign m_axi_gmem0_ARADDR = data;

assign m_axi_gmem0_ARBURST = 2'd0;

assign m_axi_gmem0_ARCACHE = 4'd0;

assign m_axi_gmem0_ARID = 1'd0;

assign m_axi_gmem0_ARLEN = 32'd262144;

assign m_axi_gmem0_ARLOCK = 2'd0;

assign m_axi_gmem0_ARPROT = 3'd0;

assign m_axi_gmem0_ARQOS = 4'd0;

assign m_axi_gmem0_ARREGION = 4'd0;

assign m_axi_gmem0_ARSIZE = 3'd0;

assign m_axi_gmem0_ARUSER = 1'd0;

assign m_axi_gmem0_AWADDR = 64'd0;

assign m_axi_gmem0_AWBURST = 2'd0;

assign m_axi_gmem0_AWCACHE = 4'd0;

assign m_axi_gmem0_AWID = 1'd0;

assign m_axi_gmem0_AWLEN = 32'd0;

assign m_axi_gmem0_AWLOCK = 2'd0;

assign m_axi_gmem0_AWPROT = 3'd0;

assign m_axi_gmem0_AWQOS = 4'd0;

assign m_axi_gmem0_AWREGION = 4'd0;

assign m_axi_gmem0_AWSIZE = 3'd0;

assign m_axi_gmem0_AWUSER = 1'd0;

assign m_axi_gmem0_AWVALID = 1'b0;

assign m_axi_gmem0_BREADY = 1'b0;

assign m_axi_gmem0_WDATA = 8'd0;

assign m_axi_gmem0_WID = 1'd0;

assign m_axi_gmem0_WLAST = 1'b0;

assign m_axi_gmem0_WSTRB = 1'd0;

assign m_axi_gmem0_WUSER = 1'd0;

assign m_axi_gmem0_WVALID = 1'b0;

assign mask_fu_499_p2 = 3'd1 << empty_100_fu_496_p1;

assign next_mul_fu_536_p2 = (8'd22 + phi_mul_reg_273);

assign next_urem_fu_586_p2 = (phi_urem_reg_284 + 4'd1);

assign out1_out_din = out1;

assign out_r_address0 = zext_ln44_fu_870_p1;

assign out_r_d0 = trunc_ln_reg_1100;

assign p_cast102_i_i_fu_448_p1 = empty_88_reg_888;

assign p_demorgan_fu_483_p2 = (empty_98_fu_477_p2 & empty_97_fu_471_p2);

assign p_mid2_fu_788_p3 = {{trunc_ln31_fu_784_p1}, {9'd0}};

assign select_ln31_1_fu_777_p3 = ((icmp_ln32_reg_1024_pp2_iter3_reg[0:0] === 1'b1) ? add_ln31_1_fu_771_p2 : ap_phi_mux_yi_phi_fu_381_p4);

assign select_ln31_fu_630_p3 = ((icmp_ln32_fu_624_p2[0:0] === 1'b1) ? 10'd0 : xi_reg_306);

assign shl_ln62_1_fu_678_p3 = {{ap_phi_mux_window_buf_1_1_3_i_i_phi_fu_330_p4}, {1'd0}};

assign shl_ln62_2_fu_728_p3 = {{window_buf_1_1_reg_317}, {2'd0}};

assign shl_ln62_3_fu_824_p3 = {{window_buf_1_2_reg_1052_pp2_iter3_reg}, {1'd0}};

assign shl_ln62_4_fu_740_p3 = {{ap_phi_mux_window_buf_2_1_phi_fu_340_p4}, {1'd0}};

assign shl_ln_fu_697_p3 = {{ap_phi_mux_window_buf_0_1_phi_fu_360_p4}, {1'd0}};

assign tmp_1_fu_414_p3 = {{tmp_s_fu_404_p4}, {3'd0}};

assign tmp_29_i_i_fu_686_p3 = {{window_buf_2_2_reg_1058}, {tmp_reg_1065}};

assign tmp_s_fu_404_p4 = {{empty_reg_251[10:9]}};

assign trunc_ln31_fu_784_p1 = select_ln31_1_fu_777_p3[8:0];

assign window_buf_0_1_0_i_i_load_reg_955 = 8'd0;

assign window_buf_0_2_0_i_i_load_reg_960 = 8'd0;

assign window_buf_1_1_0_i_i_load_reg_965 = 8'd0;

assign window_buf_1_2_0_i_i_load_reg_970 = 8'd0;

assign window_buf_2_1_0_i_i_load_reg_975 = 8'd0;

assign window_buf_2_2_0_i_i_load_reg_980 = 8'd0;

assign zext_ln32_1_fu_796_p1 = select_ln31_reg_1029_pp2_iter3_reg;

assign zext_ln32_fu_644_p1 = select_ln31_reg_1029;

assign zext_ln44_fu_870_p1 = add_ln44_reg_1095;

assign zext_ln62_10_fu_748_p1 = shl_ln62_4_fu_740_p3;

assign zext_ln62_11_fu_752_p1 = window_buf_2_2_reg_1058;

assign zext_ln62_12_fu_841_p1 = add_ln62_3_fu_835_p2;

assign zext_ln62_13_fu_761_p1 = add_ln62_5_fu_755_p2;

assign zext_ln62_14_fu_851_p1 = add_ln62_6_reg_1085;

assign zext_ln62_1_fu_705_p1 = shl_ln_fu_697_p3;

assign zext_ln62_2_fu_709_p1 = window_buf_0_2_reg_1046;

assign zext_ln62_3_fu_718_p1 = add_ln62_fu_712_p2;

assign zext_ln62_4_fu_805_p1 = add_ln62_1_reg_1075;

assign zext_ln62_5_fu_808_p1 = shl_ln62_1_reg_1070_pp2_iter3_reg;

assign zext_ln62_6_fu_817_p1 = add_ln62_2_fu_811_p2;

assign zext_ln62_7_fu_821_p1 = shl_ln62_2_reg_1080;

assign zext_ln62_8_fu_831_p1 = shl_ln62_3_fu_824_p3;

assign zext_ln62_9_fu_736_p1 = ap_phi_mux_window_buf_2_1_3_i_i_phi_fu_350_p4;

assign zext_ln62_fu_693_p1 = ap_phi_mux_window_buf_0_1_3_i_i_phi_fu_370_p4;

always @ (posedge ap_clk) begin
    tmp_1_reg_898[2:0] <= 3'b000;
    empty_89_reg_903[2:0] <= 3'b111;
    shl_ln62_1_reg_1070[0] <= 1'b0;
    shl_ln62_1_reg_1070_pp2_iter3_reg[0] <= 1'b0;
    shl_ln62_2_reg_1080[1:0] <= 2'b00;
end

endmodule //gsn_gau6

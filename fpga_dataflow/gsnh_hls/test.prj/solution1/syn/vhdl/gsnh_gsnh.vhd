-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gsnh_gsnh is
generic (
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of gsnh_gsnh is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "gsnh_gsnh,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.825000,HLS_SYN_LAT=1050950,HLS_SYN_TPT=none,HLS_SYN_MEM=524,HLS_SYN_DSP=0,HLS_SYN_FF=5146,HLS_SYN_LUT=8798,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage18 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage19 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage20 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage21 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_pp0_stage22 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp0_stage23 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_pp0_stage24 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_pp0_stage25 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_pp0_stage26 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage27 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage28 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage29 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage30 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage31 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (50 downto 0) := "000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (50 downto 0) := "000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (50 downto 0) := "000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (50 downto 0) := "000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (50 downto 0) := "000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (50 downto 0) := "000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (50 downto 0) := "000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (50 downto 0) := "000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (50 downto 0) := "000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (50 downto 0) := "001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (50 downto 0) := "010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (50 downto 0) := "100000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_40000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv9_6 : STD_LOGIC_VECTOR (8 downto 0) := "000000110";
    constant ap_const_lv9_7 : STD_LOGIC_VECTOR (8 downto 0) := "000000111";
    constant ap_const_lv9_8 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_const_lv9_9 : STD_LOGIC_VECTOR (8 downto 0) := "000001001";
    constant ap_const_lv9_A : STD_LOGIC_VECTOR (8 downto 0) := "000001010";
    constant ap_const_lv9_B : STD_LOGIC_VECTOR (8 downto 0) := "000001011";
    constant ap_const_lv9_C : STD_LOGIC_VECTOR (8 downto 0) := "000001100";
    constant ap_const_lv9_D : STD_LOGIC_VECTOR (8 downto 0) := "000001101";
    constant ap_const_lv9_E : STD_LOGIC_VECTOR (8 downto 0) := "000001110";
    constant ap_const_lv9_F : STD_LOGIC_VECTOR (8 downto 0) := "000001111";
    constant ap_const_lv9_10 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_const_lv9_11 : STD_LOGIC_VECTOR (8 downto 0) := "000010001";
    constant ap_const_lv9_12 : STD_LOGIC_VECTOR (8 downto 0) := "000010010";
    constant ap_const_lv9_13 : STD_LOGIC_VECTOR (8 downto 0) := "000010011";
    constant ap_const_lv9_14 : STD_LOGIC_VECTOR (8 downto 0) := "000010100";
    constant ap_const_lv9_15 : STD_LOGIC_VECTOR (8 downto 0) := "000010101";
    constant ap_const_lv9_16 : STD_LOGIC_VECTOR (8 downto 0) := "000010110";
    constant ap_const_lv9_17 : STD_LOGIC_VECTOR (8 downto 0) := "000010111";
    constant ap_const_lv9_18 : STD_LOGIC_VECTOR (8 downto 0) := "000011000";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv9_1A : STD_LOGIC_VECTOR (8 downto 0) := "000011010";
    constant ap_const_lv9_1B : STD_LOGIC_VECTOR (8 downto 0) := "000011011";
    constant ap_const_lv9_1C : STD_LOGIC_VECTOR (8 downto 0) := "000011100";
    constant ap_const_lv9_1D : STD_LOGIC_VECTOR (8 downto 0) := "000011101";
    constant ap_const_lv9_1E : STD_LOGIC_VECTOR (8 downto 0) := "000011110";
    constant ap_const_lv9_1F : STD_LOGIC_VECTOR (8 downto 0) := "000011111";
    constant ap_const_lv9_20 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_const_lv9_21 : STD_LOGIC_VECTOR (8 downto 0) := "000100001";
    constant ap_const_lv9_22 : STD_LOGIC_VECTOR (8 downto 0) := "000100010";
    constant ap_const_lv9_23 : STD_LOGIC_VECTOR (8 downto 0) := "000100011";
    constant ap_const_lv9_24 : STD_LOGIC_VECTOR (8 downto 0) := "000100100";
    constant ap_const_lv9_25 : STD_LOGIC_VECTOR (8 downto 0) := "000100101";
    constant ap_const_lv9_26 : STD_LOGIC_VECTOR (8 downto 0) := "000100110";
    constant ap_const_lv9_27 : STD_LOGIC_VECTOR (8 downto 0) := "000100111";
    constant ap_const_lv9_28 : STD_LOGIC_VECTOR (8 downto 0) := "000101000";
    constant ap_const_lv9_29 : STD_LOGIC_VECTOR (8 downto 0) := "000101001";
    constant ap_const_lv9_2A : STD_LOGIC_VECTOR (8 downto 0) := "000101010";
    constant ap_const_lv9_2B : STD_LOGIC_VECTOR (8 downto 0) := "000101011";
    constant ap_const_lv9_2C : STD_LOGIC_VECTOR (8 downto 0) := "000101100";
    constant ap_const_lv9_2D : STD_LOGIC_VECTOR (8 downto 0) := "000101101";
    constant ap_const_lv9_2E : STD_LOGIC_VECTOR (8 downto 0) := "000101110";
    constant ap_const_lv9_2F : STD_LOGIC_VECTOR (8 downto 0) := "000101111";
    constant ap_const_lv9_30 : STD_LOGIC_VECTOR (8 downto 0) := "000110000";
    constant ap_const_lv9_31 : STD_LOGIC_VECTOR (8 downto 0) := "000110001";
    constant ap_const_lv9_32 : STD_LOGIC_VECTOR (8 downto 0) := "000110010";
    constant ap_const_lv9_33 : STD_LOGIC_VECTOR (8 downto 0) := "000110011";
    constant ap_const_lv9_34 : STD_LOGIC_VECTOR (8 downto 0) := "000110100";
    constant ap_const_lv9_35 : STD_LOGIC_VECTOR (8 downto 0) := "000110101";
    constant ap_const_lv9_36 : STD_LOGIC_VECTOR (8 downto 0) := "000110110";
    constant ap_const_lv9_37 : STD_LOGIC_VECTOR (8 downto 0) := "000110111";
    constant ap_const_lv9_38 : STD_LOGIC_VECTOR (8 downto 0) := "000111000";
    constant ap_const_lv9_39 : STD_LOGIC_VECTOR (8 downto 0) := "000111001";
    constant ap_const_lv9_3A : STD_LOGIC_VECTOR (8 downto 0) := "000111010";
    constant ap_const_lv9_3B : STD_LOGIC_VECTOR (8 downto 0) := "000111011";
    constant ap_const_lv9_3C : STD_LOGIC_VECTOR (8 downto 0) := "000111100";
    constant ap_const_lv9_3D : STD_LOGIC_VECTOR (8 downto 0) := "000111101";
    constant ap_const_lv9_3E : STD_LOGIC_VECTOR (8 downto 0) := "000111110";
    constant ap_const_lv9_3F : STD_LOGIC_VECTOR (8 downto 0) := "000111111";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_32 : STD_LOGIC_VECTOR (7 downto 0) := "00110010";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal data : STD_LOGIC_VECTOR (63 downto 0);
    signal out_r : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal gmem0_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln31_reg_2159 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal gmem1_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln273_reg_2250 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln273_reg_2250_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARVALID : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RREADY : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem0_RLAST : STD_LOGIC;
    signal gmem0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_AWVALID : STD_LOGIC;
    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_WVALID : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_RLAST : STD_LOGIC;
    signal gmem1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem1_BREADY : STD_LOGIC;
    signal gmem1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_762 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_773 : STD_LOGIC_VECTOR (18 downto 0);
    signal xi_reg_784 : STD_LOGIC_VECTOR (9 downto 0);
    signal yi_reg_795 : STD_LOGIC_VECTOR (9 downto 0);
    signal window_buf_2_1_reg_806 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_1_1_reg_818 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_1_reg_830 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_1_1_reg_842 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_0_1_reg_854 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_0_1_1_reg_866 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten10_reg_878 : STD_LOGIC_VECTOR (18 downto 0);
    signal yi_1_reg_889 : STD_LOGIC_VECTOR (9 downto 0);
    signal xi_1_reg_900 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_read_reg_2046 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_read_reg_2051 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond4012_fu_925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4012_reg_2056 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal empty_154_fu_931_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_154_reg_2060 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal empty_155_fu_937_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_155_reg_2065 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_17_fu_941_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_17_reg_2070 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_166_fu_1027_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_166_reg_2075 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_fu_1033_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_reg_2081 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal mask_fu_1048_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal mask_reg_2147 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln31_fu_1693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state42_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state43_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state44_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state45_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state46_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln31_reg_2159_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_2159_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_2159_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln31_fu_1699_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln32_fu_1705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_2168 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_2168_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_fu_1711_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln31_reg_2173 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln31_reg_2173_pp1_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln32_fu_1719_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_buf_addr_128_reg_2184 : STD_LOGIC_VECTOR (8 downto 0);
    signal line_buf_addr_128_reg_2184_pp1_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal window_buf_2_2_reg_2190 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_2_reg_2190_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln31_1_fu_1735_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln31_1_reg_2197 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal window_buf_0_2_reg_2202 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_2_reg_2208 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln44_fu_1777_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln44_reg_2214 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln44_reg_2214_pp1_iter3_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_19_reg_2219 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln62_fu_1840_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_reg_2224 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_3_fu_1846_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_3_reg_2229 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_4_fu_1852_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln62_4_reg_2234 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln_reg_2239 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_addr_reg_2244 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal icmp_ln273_fu_1961_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state51_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state52_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state53_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state54_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state55_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state55_io : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln273_reg_2250_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln273_reg_2250_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln273_fu_1967_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln273_1_fu_1993_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln273_1_reg_2259 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln281_fu_2017_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln281_reg_2264 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln274_fu_2023_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln286_fu_2033_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln286_reg_2279 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln292_fu_2039_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln292_reg_2284 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state33_pp0_stage31_iter0 : BOOLEAN;
    signal ap_block_pp0_stage31_subdone : BOOLEAN;
    signal ap_CS_fsm_pp0_stage31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage31 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_condition_pp1_exit_iter2_state44 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal grp_nms_fu_918_ap_ready : STD_LOGIC;
    signal grp_nms_fu_918_ap_done : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state51 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal line_buf_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal line_buf_ce0 : STD_LOGIC;
    signal line_buf_we0 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buf_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal line_buf_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal line_buf_ce1 : STD_LOGIC;
    signal line_buf_we1 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buf_d1 : STD_LOGIC_VECTOR (23 downto 0);
    signal gau_buf_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal gau_buf_ce0 : STD_LOGIC;
    signal gau_buf_we0 : STD_LOGIC;
    signal gau_buf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_buf_value_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sobel_buf_value_ce0 : STD_LOGIC;
    signal sobel_buf_value_we0 : STD_LOGIC;
    signal sobel_buf_value_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_buf_grad_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sobel_buf_grad_ce0 : STD_LOGIC;
    signal sobel_buf_grad_we0 : STD_LOGIC;
    signal sobel_buf_grad_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal supp_buf_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal supp_buf_ce0 : STD_LOGIC;
    signal supp_buf_we0 : STD_LOGIC;
    signal supp_buf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sobel_fu_911_ap_start : STD_LOGIC;
    signal grp_sobel_fu_911_ap_done : STD_LOGIC;
    signal grp_sobel_fu_911_ap_idle : STD_LOGIC;
    signal grp_sobel_fu_911_ap_ready : STD_LOGIC;
    signal grp_sobel_fu_911_data_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_sobel_fu_911_data_ce0 : STD_LOGIC;
    signal grp_sobel_fu_911_out_value_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_sobel_fu_911_out_value_ce0 : STD_LOGIC;
    signal grp_sobel_fu_911_out_value_we0 : STD_LOGIC;
    signal grp_sobel_fu_911_out_value_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sobel_fu_911_out_grad_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_sobel_fu_911_out_grad_ce0 : STD_LOGIC;
    signal grp_sobel_fu_911_out_grad_we0 : STD_LOGIC;
    signal grp_sobel_fu_911_out_grad_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_nms_fu_918_ap_start : STD_LOGIC;
    signal grp_nms_fu_918_ap_idle : STD_LOGIC;
    signal grp_nms_fu_918_data_value_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_nms_fu_918_data_value_ce0 : STD_LOGIC;
    signal grp_nms_fu_918_data_grad_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_nms_fu_918_data_grad_ce0 : STD_LOGIC;
    signal grp_nms_fu_918_out_r_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_nms_fu_918_out_r_ce0 : STD_LOGIC;
    signal grp_nms_fu_918_out_r_we0 : STD_LOGIC;
    signal grp_nms_fu_918_out_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_empty_phi_fu_766_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_yi_phi_fu_799_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_window_buf_2_1_phi_fu_810_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_window_buf_2_1_1_phi_fu_822_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_window_buf_1_1_1_phi_fu_846_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_window_buf_0_1_phi_fu_858_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_window_buf_0_1_1_phi_fu_870_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_yi_1_phi_fu_893_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_sobel_fu_911_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_nms_fu_918_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal p_cast11_fu_1040_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal p_cast14_fu_1062_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast15_fu_1072_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal p_cast16_fu_1082_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast17_fu_1092_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal p_cast18_fu_1102_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast19_fu_1112_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal p_cast20_fu_1122_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast21_fu_1132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal p_cast22_fu_1142_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast23_fu_1152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal p_cast24_fu_1162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast25_fu_1172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal p_cast26_fu_1182_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast27_fu_1192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal p_cast28_fu_1202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast29_fu_1212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal p_cast30_fu_1222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast31_fu_1232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal p_cast32_fu_1242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast33_fu_1252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal p_cast34_fu_1262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast35_fu_1272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal p_cast36_fu_1282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast37_fu_1292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal p_cast38_fu_1302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast39_fu_1312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal p_cast40_fu_1322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast41_fu_1332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal p_cast42_fu_1342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast43_fu_1352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage16 : signal is "none";
    signal ap_block_pp0_stage16 : BOOLEAN;
    signal p_cast44_fu_1362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast45_fu_1372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage17 : signal is "none";
    signal ap_block_pp0_stage17 : BOOLEAN;
    signal p_cast46_fu_1382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast47_fu_1392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage18 : signal is "none";
    signal ap_block_pp0_stage18 : BOOLEAN;
    signal p_cast48_fu_1402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast49_fu_1412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage19 : signal is "none";
    signal ap_block_pp0_stage19 : BOOLEAN;
    signal p_cast50_fu_1422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast51_fu_1432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage20 : signal is "none";
    signal ap_block_pp0_stage20 : BOOLEAN;
    signal p_cast52_fu_1442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast53_fu_1452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage21 : signal is "none";
    signal ap_block_pp0_stage21 : BOOLEAN;
    signal p_cast54_fu_1462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast55_fu_1472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage22 : signal is "none";
    signal ap_block_pp0_stage22 : BOOLEAN;
    signal p_cast56_fu_1482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast57_fu_1492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage23 : signal is "none";
    signal ap_block_pp0_stage23 : BOOLEAN;
    signal p_cast58_fu_1502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast59_fu_1512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage24 : signal is "none";
    signal ap_block_pp0_stage24 : BOOLEAN;
    signal p_cast60_fu_1522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast61_fu_1532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage25 : signal is "none";
    signal ap_block_pp0_stage25 : BOOLEAN;
    signal p_cast62_fu_1542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast63_fu_1552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage26 : signal is "none";
    signal ap_block_pp0_stage26 : BOOLEAN;
    signal p_cast64_fu_1562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast65_fu_1572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage27 : signal is "none";
    signal ap_block_pp0_stage27 : BOOLEAN;
    signal p_cast66_fu_1582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast67_fu_1592_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage28 : signal is "none";
    signal ap_block_pp0_stage28 : BOOLEAN;
    signal p_cast68_fu_1602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast69_fu_1612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage29 : signal is "none";
    signal ap_block_pp0_stage29 : BOOLEAN;
    signal p_cast70_fu_1622_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast71_fu_1632_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage30 : signal is "none";
    signal ap_block_pp0_stage30 : BOOLEAN;
    signal p_cast72_fu_1642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast73_fu_1652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage31 : BOOLEAN;
    signal p_cast74_fu_1662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast75_fu_1672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast76_fu_1682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_fu_1725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_fu_1952_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln281_fu_2029_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_block_state10_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_block_state11_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_block_state12_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_block_state13_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_block_state14_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal ap_block_state15_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_block_state16_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal ap_block_state17_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal ap_block_state18_pp0_stage16_iter0 : BOOLEAN;
    signal ap_block_pp0_stage16_11001 : BOOLEAN;
    signal ap_block_state19_pp0_stage17_iter0 : BOOLEAN;
    signal ap_block_pp0_stage17_11001 : BOOLEAN;
    signal ap_block_state20_pp0_stage18_iter0 : BOOLEAN;
    signal ap_block_pp0_stage18_11001 : BOOLEAN;
    signal ap_block_state21_pp0_stage19_iter0 : BOOLEAN;
    signal ap_block_pp0_stage19_11001 : BOOLEAN;
    signal ap_block_state22_pp0_stage20_iter0 : BOOLEAN;
    signal ap_block_pp0_stage20_11001 : BOOLEAN;
    signal ap_block_state23_pp0_stage21_iter0 : BOOLEAN;
    signal ap_block_pp0_stage21_11001 : BOOLEAN;
    signal ap_block_state24_pp0_stage22_iter0 : BOOLEAN;
    signal ap_block_pp0_stage22_11001 : BOOLEAN;
    signal ap_block_state25_pp0_stage23_iter0 : BOOLEAN;
    signal ap_block_pp0_stage23_11001 : BOOLEAN;
    signal ap_block_state26_pp0_stage24_iter0 : BOOLEAN;
    signal ap_block_pp0_stage24_11001 : BOOLEAN;
    signal ap_block_state27_pp0_stage25_iter0 : BOOLEAN;
    signal ap_block_pp0_stage25_11001 : BOOLEAN;
    signal ap_block_state28_pp0_stage26_iter0 : BOOLEAN;
    signal ap_block_pp0_stage26_11001 : BOOLEAN;
    signal ap_block_state29_pp0_stage27_iter0 : BOOLEAN;
    signal ap_block_pp0_stage27_11001 : BOOLEAN;
    signal ap_block_state30_pp0_stage28_iter0 : BOOLEAN;
    signal ap_block_pp0_stage28_11001 : BOOLEAN;
    signal ap_block_state31_pp0_stage29_iter0 : BOOLEAN;
    signal ap_block_pp0_stage29_11001 : BOOLEAN;
    signal ap_block_state32_pp0_stage30_iter0 : BOOLEAN;
    signal ap_block_pp0_stage30_11001 : BOOLEAN;
    signal ap_block_pp0_stage31_11001 : BOOLEAN;
    signal tmp_20_fu_1858_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_18_fu_951_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_156_fu_959_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_157_fu_965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_160_fu_987_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_159_fu_979_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_160_fu_987_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_161_fu_993_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_162_fu_997_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_164_fu_1009_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_165_fu_1015_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_163_fu_1001_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_demorgan_fu_1021_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_167_fu_1045_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_168_fu_1056_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_169_fu_1067_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_170_fu_1077_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_171_fu_1087_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_172_fu_1097_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_173_fu_1107_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_174_fu_1117_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_175_fu_1127_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_176_fu_1137_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_177_fu_1147_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_178_fu_1157_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_179_fu_1167_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_180_fu_1177_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_181_fu_1187_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_182_fu_1197_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_183_fu_1207_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_184_fu_1217_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_185_fu_1227_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_186_fu_1237_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_187_fu_1247_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_188_fu_1257_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_189_fu_1267_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_190_fu_1277_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_191_fu_1287_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_192_fu_1297_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_193_fu_1307_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_194_fu_1317_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_195_fu_1327_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_196_fu_1337_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_197_fu_1347_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_198_fu_1357_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_199_fu_1367_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_200_fu_1377_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_201_fu_1387_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_202_fu_1397_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_203_fu_1407_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_204_fu_1417_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_205_fu_1427_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_206_fu_1437_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_207_fu_1447_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_208_fu_1457_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_209_fu_1467_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_210_fu_1477_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_211_fu_1487_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_212_fu_1497_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_213_fu_1507_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_214_fu_1517_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_215_fu_1527_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_216_fu_1537_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_217_fu_1547_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_218_fu_1557_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_219_fu_1567_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_220_fu_1577_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_221_fu_1587_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_222_fu_1597_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_223_fu_1607_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_224_fu_1617_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_225_fu_1627_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_226_fu_1637_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_227_fu_1647_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_228_fu_1657_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_229_fu_1667_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_230_fu_1677_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln32_fu_1719_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln31_1_fu_1729_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln31_fu_1742_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln44_fu_1777_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln44_fu_1777_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln_fu_1797_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln62_1_fu_1809_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln62_4_fu_1825_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln62_fu_1840_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_fu_1840_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_3_fu_1846_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_3_fu_1846_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_4_fu_1852_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln62_4_fu_1852_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln62_2_fu_1868_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln62_3_fu_1880_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln62_1_fu_1894_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln62_1_fu_1894_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln62_1_fu_1894_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln62_10_fu_1900_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln62_9_fu_1891_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln62_5_fu_1916_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_5_fu_1916_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_5_fu_1916_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_6_fu_1926_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln62_6_fu_1926_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln62_6_fu_1926_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln62_14_fu_1932_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln62_2_fu_1904_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln62_7_fu_1936_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln274_fu_1973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln273_1_fu_1987_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln273_fu_2001_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln273_fu_1979_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln281_fu_2017_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln281_fu_2017_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (50 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal ap_block_pp0_stage18_subdone : BOOLEAN;
    signal ap_block_pp0_stage19_subdone : BOOLEAN;
    signal ap_block_pp0_stage20_subdone : BOOLEAN;
    signal ap_block_pp0_stage21_subdone : BOOLEAN;
    signal ap_block_pp0_stage22_subdone : BOOLEAN;
    signal ap_block_pp0_stage23_subdone : BOOLEAN;
    signal ap_block_pp0_stage24_subdone : BOOLEAN;
    signal ap_block_pp0_stage25_subdone : BOOLEAN;
    signal ap_block_pp0_stage26_subdone : BOOLEAN;
    signal ap_block_pp0_stage27_subdone : BOOLEAN;
    signal ap_block_pp0_stage28_subdone : BOOLEAN;
    signal ap_block_pp0_stage29_subdone : BOOLEAN;
    signal ap_block_pp0_stage30_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component gsnh_sobel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        out_value_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        out_value_ce0 : OUT STD_LOGIC;
        out_value_we0 : OUT STD_LOGIC;
        out_value_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_grad_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        out_grad_ce0 : OUT STD_LOGIC;
        out_grad_we0 : OUT STD_LOGIC;
        out_grad_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component gsnh_nms IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_value_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        data_value_ce0 : OUT STD_LOGIC;
        data_value_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_grad_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        data_grad_ce0 : OUT STD_LOGIC;
        data_grad_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component gsnh_gsnh_add_5ns_5ns_5_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component gsnh_gsnh_sub_5s_5ns_5_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component gsnh_gsnh_add_19ns_19ns_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component gsnh_gsnh_add_10ns_10ns_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component gsnh_gsnh_add_18ns_18ns_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component gsnh_gsnh_add_9ns_9ns_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component gsnh_gsnh_add_11ns_11ns_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component gsnh_sobel_line_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (2 downto 0);
        d0 : IN STD_LOGIC_VECTOR (23 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC_VECTOR (2 downto 0);
        d1 : IN STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component gsnh_gsnh_gau_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component gsnh_gsnh_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        data : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_r : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component gsnh_gsnh_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component gsnh_gsnh_gmem1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    gsnh_control_s_axi_U : component gsnh_gsnh_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        data => data,
        out_r => out_r);

    gsnh_gmem0_m_axi_U : component gsnh_gsnh_gmem0_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem0_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => data_read_reg_2051,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_40000,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem0_RVALID,
        I_RREADY => gmem0_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RID => gmem0_RID,
        I_RUSER => gmem0_RUSER,
        I_RRESP => gmem0_RRESP,
        I_RLAST => gmem0_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem0_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => gmem0_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem0_BRESP,
        I_BID => gmem0_BID,
        I_BUSER => gmem0_BUSER);

    gsnh_gmem1_m_axi_U : component gsnh_gsnh_gmem1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem1_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem1_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem1_RDATA,
        I_RID => gmem1_RID,
        I_RUSER => gmem1_RUSER,
        I_RRESP => gmem1_RRESP,
        I_RLAST => gmem1_RLAST,
        I_AWVALID => gmem1_AWVALID,
        I_AWREADY => gmem1_AWREADY,
        I_AWADDR => gmem1_addr_reg_2244,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_40000,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem1_WVALID,
        I_WREADY => gmem1_WREADY,
        I_WDATA => select_ln292_reg_2284,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_1,
        I_BVALID => gmem1_BVALID,
        I_BREADY => gmem1_BREADY,
        I_BRESP => gmem1_BRESP,
        I_BID => gmem1_BID,
        I_BUSER => gmem1_BUSER);

    line_buf_U : component gsnh_sobel_line_buf
    generic map (
        DataWidth => 24,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buf_address0,
        ce0 => line_buf_ce0,
        we0 => line_buf_we0,
        d0 => empty_166_reg_2075,
        q0 => line_buf_q0,
        address1 => line_buf_address1,
        ce1 => line_buf_ce1,
        we1 => line_buf_we1,
        d1 => line_buf_d1);

    gau_buf_U : component gsnh_gsnh_gau_buf
    generic map (
        DataWidth => 8,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => gau_buf_address0,
        ce0 => gau_buf_ce0,
        we0 => gau_buf_we0,
        d0 => trunc_ln_reg_2239,
        q0 => gau_buf_q0);

    sobel_buf_value_U : component gsnh_gsnh_gau_buf
    generic map (
        DataWidth => 8,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sobel_buf_value_address0,
        ce0 => sobel_buf_value_ce0,
        we0 => sobel_buf_value_we0,
        d0 => grp_sobel_fu_911_out_value_d0,
        q0 => sobel_buf_value_q0);

    sobel_buf_grad_U : component gsnh_gsnh_gau_buf
    generic map (
        DataWidth => 8,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sobel_buf_grad_address0,
        ce0 => sobel_buf_grad_ce0,
        we0 => sobel_buf_grad_we0,
        d0 => grp_sobel_fu_911_out_grad_d0,
        q0 => sobel_buf_grad_q0);

    supp_buf_U : component gsnh_gsnh_gau_buf
    generic map (
        DataWidth => 8,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => supp_buf_address0,
        ce0 => supp_buf_ce0,
        we0 => supp_buf_we0,
        d0 => grp_nms_fu_918_out_r_d0,
        q0 => supp_buf_q0);

    grp_sobel_fu_911 : component gsnh_sobel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sobel_fu_911_ap_start,
        ap_done => grp_sobel_fu_911_ap_done,
        ap_idle => grp_sobel_fu_911_ap_idle,
        ap_ready => grp_sobel_fu_911_ap_ready,
        data_address0 => grp_sobel_fu_911_data_address0,
        data_ce0 => grp_sobel_fu_911_data_ce0,
        data_q0 => gau_buf_q0,
        out_value_address0 => grp_sobel_fu_911_out_value_address0,
        out_value_ce0 => grp_sobel_fu_911_out_value_ce0,
        out_value_we0 => grp_sobel_fu_911_out_value_we0,
        out_value_d0 => grp_sobel_fu_911_out_value_d0,
        out_grad_address0 => grp_sobel_fu_911_out_grad_address0,
        out_grad_ce0 => grp_sobel_fu_911_out_grad_ce0,
        out_grad_we0 => grp_sobel_fu_911_out_grad_we0,
        out_grad_d0 => grp_sobel_fu_911_out_grad_d0);

    grp_nms_fu_918 : component gsnh_nms
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_nms_fu_918_ap_start,
        ap_done => grp_nms_fu_918_ap_done,
        ap_idle => grp_nms_fu_918_ap_idle,
        ap_ready => grp_nms_fu_918_ap_ready,
        data_value_address0 => grp_nms_fu_918_data_value_address0,
        data_value_ce0 => grp_nms_fu_918_data_value_ce0,
        data_value_q0 => sobel_buf_value_q0,
        data_grad_address0 => grp_nms_fu_918_data_grad_address0,
        data_grad_ce0 => grp_nms_fu_918_data_grad_ce0,
        data_grad_q0 => sobel_buf_grad_q0,
        out_r_address0 => grp_nms_fu_918_out_r_address0,
        out_r_ce0 => grp_nms_fu_918_out_r_ce0,
        out_r_we0 => grp_nms_fu_918_out_r_we0,
        out_r_d0 => grp_nms_fu_918_out_r_d0);

    gsnh_add_5ns_5ns_5_1_1_U59 : component gsnh_gsnh_add_5ns_5ns_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => ap_phi_mux_empty_phi_fu_766_p4,
        din1 => ap_const_lv5_1,
        dout => empty_154_fu_931_p2);

    gsnh_sub_5s_5ns_5_1_1_U60 : component gsnh_gsnh_sub_5s_5ns_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => ap_const_lv5_17,
        din1 => empty_160_fu_987_p1,
        dout => empty_160_fu_987_p2);

    gsnh_add_19ns_19ns_19_1_1_U61 : component gsnh_gsnh_add_19ns_19ns_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 19)
    port map (
        din0 => indvar_flatten_reg_773,
        din1 => ap_const_lv19_1,
        dout => add_ln31_fu_1699_p2);

    gsnh_add_10ns_10ns_10_1_1_U62 : component gsnh_gsnh_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => ap_const_lv10_1,
        din1 => add_ln32_fu_1719_p1,
        dout => add_ln32_fu_1719_p2);

    gsnh_add_10ns_10ns_10_1_1_U63 : component gsnh_gsnh_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => ap_const_lv10_1,
        din1 => ap_phi_mux_yi_phi_fu_799_p4,
        dout => add_ln31_1_fu_1729_p2);

    gsnh_add_18ns_18ns_18_1_1_U64 : component gsnh_gsnh_add_18ns_18ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => add_ln44_fu_1777_p0,
        din1 => add_ln44_fu_1777_p1,
        dout => add_ln44_fu_1777_p2);

    gsnh_add_10ns_10ns_10_1_1_U65 : component gsnh_gsnh_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => add_ln62_fu_1840_p0,
        din1 => add_ln62_fu_1840_p1,
        dout => add_ln62_fu_1840_p2);

    gsnh_add_10ns_10ns_10_1_1_U66 : component gsnh_gsnh_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => add_ln62_3_fu_1846_p0,
        din1 => add_ln62_3_fu_1846_p1,
        dout => add_ln62_3_fu_1846_p2);

    gsnh_add_9ns_9ns_9_1_1_U67 : component gsnh_gsnh_add_9ns_9ns_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => add_ln62_4_fu_1852_p0,
        din1 => add_ln62_4_fu_1852_p1,
        dout => add_ln62_4_fu_1852_p2);

    gsnh_add_11ns_11ns_11_1_1_U68 : component gsnh_gsnh_add_11ns_11ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        din0 => add_ln62_1_fu_1894_p0,
        din1 => add_ln62_1_fu_1894_p1,
        dout => add_ln62_1_fu_1894_p2);

    gsnh_add_10ns_10ns_10_1_1_U69 : component gsnh_gsnh_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => add_ln62_5_fu_1916_p0,
        din1 => add_ln62_5_fu_1916_p1,
        dout => add_ln62_5_fu_1916_p2);

    gsnh_add_11ns_11ns_11_1_1_U70 : component gsnh_gsnh_add_11ns_11ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        din0 => add_ln62_6_fu_1926_p0,
        din1 => add_ln62_6_fu_1926_p1,
        dout => add_ln62_6_fu_1926_p2);

    gsnh_add_19ns_19ns_19_1_1_U71 : component gsnh_gsnh_add_19ns_19ns_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 19)
    port map (
        din0 => indvar_flatten10_reg_878,
        din1 => ap_const_lv19_1,
        dout => add_ln273_fu_1967_p2);

    gsnh_add_10ns_10ns_10_1_1_U72 : component gsnh_gsnh_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => ap_const_lv10_1,
        din1 => ap_phi_mux_yi_1_phi_fu_893_p4,
        dout => add_ln273_1_fu_1987_p2);

    gsnh_add_18ns_18ns_18_1_1_U73 : component gsnh_gsnh_add_18ns_18ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => add_ln281_fu_2017_p0,
        din1 => add_ln281_fu_2017_p1,
        dout => add_ln281_fu_2017_p2);

    gsnh_add_10ns_10ns_10_1_1_U74 : component gsnh_gsnh_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => ap_const_lv10_1,
        din1 => select_ln273_fu_1979_p3,
        dout => add_ln274_fu_2023_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage31_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage31)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp1_flush_enable)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter2_state44)) then 
                        ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter1;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                    ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state51) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((not(((grp_nms_fu_918_ap_done = ap_const_logic_0) or (gmem1_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state51)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state51);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                elsif ((not(((grp_nms_fu_918_ap_done = ap_const_logic_0) or (gmem1_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                    ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_nms_fu_918_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_nms_fu_918_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                    grp_nms_fu_918_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_nms_fu_918_ap_ready = ap_const_logic_1)) then 
                    grp_nms_fu_918_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sobel_fu_911_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sobel_fu_911_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                    grp_sobel_fu_911_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sobel_fu_911_ap_ready = ap_const_logic_1)) then 
                    grp_sobel_fu_911_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_reg_762_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond4012_reg_2056 = ap_const_lv1_0))) then 
                empty_reg_762 <= empty_154_reg_2060;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_reg_762 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten10_reg_878_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln273_fu_1961_p2 = ap_const_lv1_0))) then 
                indvar_flatten10_reg_878 <= add_ln273_fu_1967_p2;
            elsif ((not(((grp_nms_fu_918_ap_done = ap_const_logic_0) or (gmem1_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                indvar_flatten10_reg_878 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_773_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln31_fu_1693_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_773 <= add_ln31_fu_1699_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                indvar_flatten_reg_773 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    window_buf_0_1_1_reg_866_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln31_reg_2159_pp1_iter2_reg = ap_const_lv1_0))) then 
                window_buf_0_1_1_reg_866 <= window_buf_0_1_reg_854;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                window_buf_0_1_1_reg_866 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    window_buf_0_1_reg_854_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln31_reg_2159_pp1_iter2_reg = ap_const_lv1_0))) then 
                window_buf_0_1_reg_854 <= window_buf_0_2_reg_2202;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                window_buf_0_1_reg_854 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    window_buf_1_1_1_reg_842_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln31_reg_2159_pp1_iter2_reg = ap_const_lv1_0))) then 
                window_buf_1_1_1_reg_842 <= window_buf_1_1_reg_830;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                window_buf_1_1_1_reg_842 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    window_buf_1_1_reg_830_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln31_reg_2159_pp1_iter2_reg = ap_const_lv1_0))) then 
                window_buf_1_1_reg_830 <= window_buf_1_2_reg_2208;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                window_buf_1_1_reg_830 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    window_buf_2_1_1_reg_818_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln31_reg_2159_pp1_iter2_reg = ap_const_lv1_0))) then 
                window_buf_2_1_1_reg_818 <= window_buf_2_1_reg_806;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                window_buf_2_1_1_reg_818 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    window_buf_2_1_reg_806_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln31_reg_2159_pp1_iter2_reg = ap_const_lv1_0))) then 
                window_buf_2_1_reg_806 <= window_buf_2_2_reg_2190_pp1_iter2_reg;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                window_buf_2_1_reg_806 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    xi_1_reg_900_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln273_fu_1961_p2 = ap_const_lv1_0))) then 
                xi_1_reg_900 <= add_ln274_fu_2023_p2;
            elsif ((not(((grp_nms_fu_918_ap_done = ap_const_logic_0) or (gmem1_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                xi_1_reg_900 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    xi_reg_784_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln31_fu_1693_p2 = ap_const_lv1_0))) then 
                xi_reg_784 <= add_ln32_fu_1719_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                xi_reg_784 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    yi_1_reg_889_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln273_reg_2250 = ap_const_lv1_0))) then 
                yi_1_reg_889 <= select_ln273_1_reg_2259;
            elsif ((not(((grp_nms_fu_918_ap_done = ap_const_logic_0) or (gmem1_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                yi_1_reg_889 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    yi_reg_795_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln31_reg_2159_pp1_iter2_reg = ap_const_lv1_0))) then 
                yi_reg_795 <= select_ln31_1_reg_2197;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                yi_reg_795 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln273_fu_1961_p2 = ap_const_lv1_0))) then
                add_ln281_reg_2264 <= add_ln281_fu_2017_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_reg_2159_pp1_iter1_reg = ap_const_lv1_0))) then
                add_ln44_reg_2214 <= add_ln44_fu_1777_p2;
                add_ln62_3_reg_2229 <= add_ln62_3_fu_1846_p2;
                add_ln62_4_reg_2234 <= add_ln62_4_fu_1852_p2;
                add_ln62_reg_2224 <= add_ln62_fu_1840_p2;
                tmp_19_reg_2219 <= line_buf_q0(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                add_ln44_reg_2214_pp1_iter3_reg <= add_ln44_reg_2214;
                icmp_ln31_reg_2159_pp1_iter2_reg <= icmp_ln31_reg_2159_pp1_iter1_reg;
                icmp_ln31_reg_2159_pp1_iter3_reg <= icmp_ln31_reg_2159_pp1_iter2_reg;
                line_buf_addr_128_reg_2184_pp1_iter2_reg <= line_buf_addr_128_reg_2184;
                window_buf_2_2_reg_2190_pp1_iter2_reg <= window_buf_2_2_reg_2190;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                data_read_reg_2051 <= data;
                out_read_reg_2046 <= out_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_154_reg_2060 <= empty_154_fu_931_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond4012_fu_925_p2 = ap_const_lv1_0))) then
                empty_155_reg_2065 <= empty_155_fu_937_p1;
                tmp_17_reg_2070 <= ap_phi_mux_empty_phi_fu_766_p4(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond4012_reg_2056 <= exitcond4012_fu_925_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                gmem1_addr_reg_2244 <= out_read_reg_2046;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln273_reg_2250 <= icmp_ln273_fu_1961_p2;
                icmp_ln273_reg_2250_pp2_iter1_reg <= icmp_ln273_reg_2250;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln273_reg_2250_pp2_iter2_reg <= icmp_ln273_reg_2250_pp2_iter1_reg;
                icmp_ln273_reg_2250_pp2_iter3_reg <= icmp_ln273_reg_2250_pp2_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln273_reg_2250_pp2_iter1_reg = ap_const_lv1_0))) then
                icmp_ln286_reg_2279 <= icmp_ln286_fu_2033_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln31_reg_2159 <= icmp_ln31_fu_1693_p2;
                icmp_ln31_reg_2159_pp1_iter1_reg <= icmp_ln31_reg_2159;
                icmp_ln32_reg_2168_pp1_iter1_reg <= icmp_ln32_reg_2168;
                select_ln31_reg_2173_pp1_iter1_reg <= select_ln31_reg_2173;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln31_fu_1693_p2 = ap_const_lv1_0))) then
                icmp_ln32_reg_2168 <= icmp_ln32_fu_1705_p2;
                select_ln31_reg_2173 <= select_ln31_fu_1711_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln31_reg_2159 = ap_const_lv1_0))) then
                line_buf_addr_128_reg_2184 <= zext_ln32_fu_1725_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond4012_reg_2056 = ap_const_lv1_0))) then
                mask_reg_2147 <= mask_fu_1048_p2;
                    tmp_s_reg_2081(8 downto 6) <= tmp_s_fu_1033_p3(8 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln273_fu_1961_p2 = ap_const_lv1_0))) then
                select_ln273_1_reg_2259 <= select_ln273_1_fu_1993_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln273_reg_2250_pp2_iter2_reg = ap_const_lv1_0))) then
                select_ln292_reg_2284 <= select_ln292_fu_2039_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln31_reg_2159_pp1_iter1_reg = ap_const_lv1_0))) then
                select_ln31_1_reg_2197 <= select_ln31_1_fu_1735_p3;
                window_buf_0_2_reg_2202 <= line_buf_q0(15 downto 8);
                window_buf_1_2_reg_2208 <= line_buf_q0(23 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_reg_2159_pp1_iter2_reg = ap_const_lv1_0))) then
                trunc_ln_reg_2239 <= add_ln62_7_fu_1936_p2(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln31_reg_2159 = ap_const_lv1_0))) then
                window_buf_2_2_reg_2190 <= gmem0_RDATA;
            end if;
        end if;
    end process;
    empty_166_reg_2075(23 downto 0) <= "000000000000000000000000";
    tmp_s_reg_2081(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state35, ap_enable_reg_pp1_iter1, ap_CS_fsm_state50, ap_enable_reg_pp2_iter4, ap_CS_fsm_state60, gmem0_ARREADY, gmem1_AWREADY, gmem1_BVALID, exitcond4012_fu_925_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter2, icmp_ln273_fu_1961_p2, ap_enable_reg_pp2_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage31_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, grp_nms_fu_918_ap_done, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter3, grp_sobel_fu_911_ap_done, ap_CS_fsm_state48, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage16_subdone, ap_block_pp0_stage17_subdone, ap_block_pp0_stage18_subdone, ap_block_pp0_stage19_subdone, ap_block_pp0_stage20_subdone, ap_block_pp0_stage21_subdone, ap_block_pp0_stage22_subdone, ap_block_pp0_stage23_subdone, ap_block_pp0_stage24_subdone, ap_block_pp0_stage25_subdone, ap_block_pp0_stage26_subdone, ap_block_pp0_stage27_subdone, ap_block_pp0_stage28_subdone, ap_block_pp0_stage29_subdone, ap_block_pp0_stage30_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond4012_fu_925_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond4012_fu_925_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_pp0_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                end if;
            when ap_ST_fsm_pp0_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                end if;
            when ap_ST_fsm_pp0_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                end if;
            when ap_ST_fsm_pp0_stage21 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage21_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                end if;
            when ap_ST_fsm_pp0_stage22 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage22_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                end if;
            when ap_ST_fsm_pp0_stage23 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage23_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                end if;
            when ap_ST_fsm_pp0_stage24 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage24_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                end if;
            when ap_ST_fsm_pp0_stage25 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage25_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                end if;
            when ap_ST_fsm_pp0_stage26 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage26_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                end if;
            when ap_ST_fsm_pp0_stage27 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage27_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                end if;
            when ap_ST_fsm_pp0_stage28 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage28_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                end if;
            when ap_ST_fsm_pp0_stage29 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage29_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage29;
                end if;
            when ap_ST_fsm_pp0_stage30 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage30_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage30;
                end if;
            when ap_ST_fsm_pp0_stage31 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage31_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage31;
                end if;
            when ap_ST_fsm_state35 => 
                if (((gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((grp_sobel_fu_911_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if ((not(((grp_nms_fu_918_ap_done = ap_const_logic_0) or (gmem1_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln273_fu_1961_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln273_fu_1961_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                if (((gmem1_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln281_fu_2017_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln273_fu_1979_p3),18));
    add_ln281_fu_2017_p1 <= (trunc_ln273_fu_2001_p1 & ap_const_lv9_0);
    add_ln32_fu_1719_p1 <= 
        ap_const_lv10_0 when (icmp_ln32_fu_1705_p2(0) = '1') else 
        xi_reg_784;
    add_ln44_fu_1777_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_reg_2173_pp1_iter1_reg),18));
    add_ln44_fu_1777_p1 <= (trunc_ln31_fu_1742_p1 & ap_const_lv9_0);
    add_ln62_1_fu_1894_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln62_2_fu_1868_p3),11));
    add_ln62_1_fu_1894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln62_3_fu_1880_p3),11));
    add_ln62_2_fu_1904_p2 <= std_logic_vector(unsigned(zext_ln62_10_fu_1900_p1) + unsigned(zext_ln62_9_fu_1891_p1));
    add_ln62_3_fu_1846_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln62_4_fu_1825_p3),10));
    add_ln62_3_fu_1846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_window_buf_0_1_1_phi_fu_870_p4),10));
    add_ln62_4_fu_1852_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_window_buf_2_1_1_phi_fu_822_p4),9));
    add_ln62_4_fu_1852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_buf_2_2_reg_2190),9));
    add_ln62_5_fu_1916_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_4_reg_2234),10));
    add_ln62_5_fu_1916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_buf_0_2_reg_2202),10));
    add_ln62_6_fu_1926_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_5_fu_1916_p2),11));
    add_ln62_6_fu_1926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_3_reg_2229),11));
    add_ln62_7_fu_1936_p2 <= std_logic_vector(unsigned(zext_ln62_14_fu_1932_p1) + unsigned(add_ln62_2_fu_1904_p2));
    add_ln62_fu_1840_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1797_p3),10));
    add_ln62_fu_1840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln62_1_fu_1809_p3),10));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage16 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage17 <= ap_CS_fsm(18);
    ap_CS_fsm_pp0_stage18 <= ap_CS_fsm(19);
    ap_CS_fsm_pp0_stage19 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage20 <= ap_CS_fsm(21);
    ap_CS_fsm_pp0_stage21 <= ap_CS_fsm(22);
    ap_CS_fsm_pp0_stage22 <= ap_CS_fsm(23);
    ap_CS_fsm_pp0_stage23 <= ap_CS_fsm(24);
    ap_CS_fsm_pp0_stage24 <= ap_CS_fsm(25);
    ap_CS_fsm_pp0_stage25 <= ap_CS_fsm(26);
    ap_CS_fsm_pp0_stage26 <= ap_CS_fsm(27);
    ap_CS_fsm_pp0_stage27 <= ap_CS_fsm(28);
    ap_CS_fsm_pp0_stage28 <= ap_CS_fsm(29);
    ap_CS_fsm_pp0_stage29 <= ap_CS_fsm(30);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage30 <= ap_CS_fsm(31);
    ap_CS_fsm_pp0_stage31 <= ap_CS_fsm(32);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(10);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(40);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(45);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state35 <= ap_CS_fsm(33);
    ap_CS_fsm_state41 <= ap_CS_fsm(39);
    ap_CS_fsm_state47 <= ap_CS_fsm(41);
    ap_CS_fsm_state48 <= ap_CS_fsm(42);
    ap_CS_fsm_state49 <= ap_CS_fsm(43);
    ap_CS_fsm_state50 <= ap_CS_fsm(44);
    ap_CS_fsm_state60 <= ap_CS_fsm(50);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage26_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage26_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage27_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage27_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage28_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage28_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage29_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage29_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage30_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage30_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage31_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage31_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln31_reg_2159, gmem0_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln31_reg_2159 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln31_reg_2159, gmem0_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln31_reg_2159 = ap_const_lv1_0));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter4, ap_block_state55_io)
    begin
                ap_block_pp2_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state55_io) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter4, ap_block_state55_io)
    begin
                ap_block_pp2_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state55_io) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage16_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage18_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage19_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage20_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage21_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage22_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage23_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage24_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage25_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage26_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage27_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage28_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage29_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage30_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage31_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state43_pp1_stage0_iter1_assign_proc : process(icmp_ln31_reg_2159, gmem0_RVALID)
    begin
                ap_block_state43_pp1_stage0_iter1 <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln31_reg_2159 = ap_const_lv1_0));
    end process;

        ap_block_state44_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state55_io_assign_proc : process(icmp_ln273_reg_2250_pp2_iter3_reg, gmem1_WREADY)
    begin
                ap_block_state55_io <= ((gmem1_WREADY = ap_const_logic_0) and (icmp_ln273_reg_2250_pp2_iter3_reg = ap_const_lv1_0));
    end process;

        ap_block_state55_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond4012_fu_925_p2)
    begin
        if ((exitcond4012_fu_925_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter2_state44_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_condition_pp1_exit_iter2_state44 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter2_state44 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_flush_enable_assign_proc : process(ap_CS_fsm_pp1_stage0, icmp_ln31_fu_1693_p2, ap_block_pp1_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln31_fu_1693_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_condition_pp1_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp1_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state51_assign_proc : process(icmp_ln273_fu_1961_p2)
    begin
        if ((icmp_ln273_fu_1961_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state51 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state51 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state60, gmem1_BVALID)
    begin
        if (((gmem1_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_empty_phi_fu_766_p4_assign_proc : process(empty_reg_762, exitcond4012_reg_2056, ap_CS_fsm_pp0_stage0, empty_154_reg_2060, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond4012_reg_2056 = ap_const_lv1_0))) then 
            ap_phi_mux_empty_phi_fu_766_p4 <= empty_154_reg_2060;
        else 
            ap_phi_mux_empty_phi_fu_766_p4 <= empty_reg_762;
        end if; 
    end process;


    ap_phi_mux_window_buf_0_1_1_phi_fu_870_p4_assign_proc : process(ap_block_pp1_stage0, window_buf_0_1_reg_854, window_buf_0_1_1_reg_866, icmp_ln31_reg_2159_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln31_reg_2159_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_window_buf_0_1_1_phi_fu_870_p4 <= window_buf_0_1_reg_854;
        else 
            ap_phi_mux_window_buf_0_1_1_phi_fu_870_p4 <= window_buf_0_1_1_reg_866;
        end if; 
    end process;


    ap_phi_mux_window_buf_0_1_phi_fu_858_p4_assign_proc : process(ap_block_pp1_stage0, window_buf_0_1_reg_854, icmp_ln31_reg_2159_pp1_iter2_reg, window_buf_0_2_reg_2202, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln31_reg_2159_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_window_buf_0_1_phi_fu_858_p4 <= window_buf_0_2_reg_2202;
        else 
            ap_phi_mux_window_buf_0_1_phi_fu_858_p4 <= window_buf_0_1_reg_854;
        end if; 
    end process;


    ap_phi_mux_window_buf_1_1_1_phi_fu_846_p4_assign_proc : process(ap_block_pp1_stage0, window_buf_1_1_reg_830, window_buf_1_1_1_reg_842, icmp_ln31_reg_2159_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln31_reg_2159_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_window_buf_1_1_1_phi_fu_846_p4 <= window_buf_1_1_reg_830;
        else 
            ap_phi_mux_window_buf_1_1_1_phi_fu_846_p4 <= window_buf_1_1_1_reg_842;
        end if; 
    end process;


    ap_phi_mux_window_buf_2_1_1_phi_fu_822_p4_assign_proc : process(ap_block_pp1_stage0, window_buf_2_1_reg_806, window_buf_2_1_1_reg_818, icmp_ln31_reg_2159_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln31_reg_2159_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_window_buf_2_1_1_phi_fu_822_p4 <= window_buf_2_1_reg_806;
        else 
            ap_phi_mux_window_buf_2_1_1_phi_fu_822_p4 <= window_buf_2_1_1_reg_818;
        end if; 
    end process;


    ap_phi_mux_window_buf_2_1_phi_fu_810_p4_assign_proc : process(ap_block_pp1_stage0, window_buf_2_1_reg_806, icmp_ln31_reg_2159_pp1_iter2_reg, window_buf_2_2_reg_2190_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln31_reg_2159_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_window_buf_2_1_phi_fu_810_p4 <= window_buf_2_2_reg_2190_pp1_iter2_reg;
        else 
            ap_phi_mux_window_buf_2_1_phi_fu_810_p4 <= window_buf_2_1_reg_806;
        end if; 
    end process;


    ap_phi_mux_yi_1_phi_fu_893_p4_assign_proc : process(ap_block_pp2_stage0, icmp_ln273_reg_2250, yi_1_reg_889, ap_CS_fsm_pp2_stage0, select_ln273_1_reg_2259, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln273_reg_2250 = ap_const_lv1_0))) then 
            ap_phi_mux_yi_1_phi_fu_893_p4 <= select_ln273_1_reg_2259;
        else 
            ap_phi_mux_yi_1_phi_fu_893_p4 <= yi_1_reg_889;
        end if; 
    end process;


    ap_phi_mux_yi_phi_fu_799_p4_assign_proc : process(ap_block_pp1_stage0, yi_reg_795, icmp_ln31_reg_2159_pp1_iter2_reg, select_ln31_1_reg_2197, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln31_reg_2159_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_yi_phi_fu_799_p4 <= select_ln31_1_reg_2197;
        else 
            ap_phi_mux_yi_phi_fu_799_p4 <= yi_reg_795;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state60, gmem1_BVALID)
    begin
        if (((gmem1_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    empty_155_fu_937_p1 <= ap_phi_mux_empty_phi_fu_766_p4(3 - 1 downto 0);
    empty_156_fu_959_p2 <= (ap_phi_mux_empty_phi_fu_766_p4 or ap_const_lv5_7);
    empty_157_fu_965_p2 <= "1" when (unsigned(tmp_18_fu_951_p3) > unsigned(empty_156_fu_959_p2)) else "0";
    empty_159_fu_979_p3 <= 
        empty_156_fu_959_p2 when (empty_157_fu_965_p2(0) = '1') else 
        tmp_18_fu_951_p3;
    empty_160_fu_987_p1 <= 
        tmp_18_fu_951_p3 when (empty_157_fu_965_p2(0) = '1') else 
        empty_156_fu_959_p2;
    empty_161_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_159_fu_979_p3),24));
    empty_162_fu_997_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_160_fu_987_p2),24));
    empty_163_fu_1001_p3 <= 
        ap_const_lv24_0 when (empty_157_fu_965_p2(0) = '1') else 
        ap_const_lv24_0;
    empty_164_fu_1009_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & empty_161_fu_993_p1(24-1 downto 0)))));
    empty_165_fu_1015_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & empty_162_fu_997_p1(24-1 downto 0)))));
    empty_166_fu_1027_p2 <= (p_demorgan_fu_1021_p2 and empty_163_fu_1001_p3);
    empty_167_fu_1045_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_reg_2070),3));
    empty_168_fu_1056_p2 <= (tmp_s_fu_1033_p3 or ap_const_lv9_1);
    empty_169_fu_1067_p2 <= (tmp_s_reg_2081 or ap_const_lv9_2);
    empty_170_fu_1077_p2 <= (tmp_s_reg_2081 or ap_const_lv9_3);
    empty_171_fu_1087_p2 <= (tmp_s_reg_2081 or ap_const_lv9_4);
    empty_172_fu_1097_p2 <= (tmp_s_reg_2081 or ap_const_lv9_5);
    empty_173_fu_1107_p2 <= (tmp_s_reg_2081 or ap_const_lv9_6);
    empty_174_fu_1117_p2 <= (tmp_s_reg_2081 or ap_const_lv9_7);
    empty_175_fu_1127_p2 <= (tmp_s_reg_2081 or ap_const_lv9_8);
    empty_176_fu_1137_p2 <= (tmp_s_reg_2081 or ap_const_lv9_9);
    empty_177_fu_1147_p2 <= (tmp_s_reg_2081 or ap_const_lv9_A);
    empty_178_fu_1157_p2 <= (tmp_s_reg_2081 or ap_const_lv9_B);
    empty_179_fu_1167_p2 <= (tmp_s_reg_2081 or ap_const_lv9_C);
    empty_180_fu_1177_p2 <= (tmp_s_reg_2081 or ap_const_lv9_D);
    empty_181_fu_1187_p2 <= (tmp_s_reg_2081 or ap_const_lv9_E);
    empty_182_fu_1197_p2 <= (tmp_s_reg_2081 or ap_const_lv9_F);
    empty_183_fu_1207_p2 <= (tmp_s_reg_2081 or ap_const_lv9_10);
    empty_184_fu_1217_p2 <= (tmp_s_reg_2081 or ap_const_lv9_11);
    empty_185_fu_1227_p2 <= (tmp_s_reg_2081 or ap_const_lv9_12);
    empty_186_fu_1237_p2 <= (tmp_s_reg_2081 or ap_const_lv9_13);
    empty_187_fu_1247_p2 <= (tmp_s_reg_2081 or ap_const_lv9_14);
    empty_188_fu_1257_p2 <= (tmp_s_reg_2081 or ap_const_lv9_15);
    empty_189_fu_1267_p2 <= (tmp_s_reg_2081 or ap_const_lv9_16);
    empty_190_fu_1277_p2 <= (tmp_s_reg_2081 or ap_const_lv9_17);
    empty_191_fu_1287_p2 <= (tmp_s_reg_2081 or ap_const_lv9_18);
    empty_192_fu_1297_p2 <= (tmp_s_reg_2081 or ap_const_lv9_19);
    empty_193_fu_1307_p2 <= (tmp_s_reg_2081 or ap_const_lv9_1A);
    empty_194_fu_1317_p2 <= (tmp_s_reg_2081 or ap_const_lv9_1B);
    empty_195_fu_1327_p2 <= (tmp_s_reg_2081 or ap_const_lv9_1C);
    empty_196_fu_1337_p2 <= (tmp_s_reg_2081 or ap_const_lv9_1D);
    empty_197_fu_1347_p2 <= (tmp_s_reg_2081 or ap_const_lv9_1E);
    empty_198_fu_1357_p2 <= (tmp_s_reg_2081 or ap_const_lv9_1F);
    empty_199_fu_1367_p2 <= (tmp_s_reg_2081 or ap_const_lv9_20);
    empty_200_fu_1377_p2 <= (tmp_s_reg_2081 or ap_const_lv9_21);
    empty_201_fu_1387_p2 <= (tmp_s_reg_2081 or ap_const_lv9_22);
    empty_202_fu_1397_p2 <= (tmp_s_reg_2081 or ap_const_lv9_23);
    empty_203_fu_1407_p2 <= (tmp_s_reg_2081 or ap_const_lv9_24);
    empty_204_fu_1417_p2 <= (tmp_s_reg_2081 or ap_const_lv9_25);
    empty_205_fu_1427_p2 <= (tmp_s_reg_2081 or ap_const_lv9_26);
    empty_206_fu_1437_p2 <= (tmp_s_reg_2081 or ap_const_lv9_27);
    empty_207_fu_1447_p2 <= (tmp_s_reg_2081 or ap_const_lv9_28);
    empty_208_fu_1457_p2 <= (tmp_s_reg_2081 or ap_const_lv9_29);
    empty_209_fu_1467_p2 <= (tmp_s_reg_2081 or ap_const_lv9_2A);
    empty_210_fu_1477_p2 <= (tmp_s_reg_2081 or ap_const_lv9_2B);
    empty_211_fu_1487_p2 <= (tmp_s_reg_2081 or ap_const_lv9_2C);
    empty_212_fu_1497_p2 <= (tmp_s_reg_2081 or ap_const_lv9_2D);
    empty_213_fu_1507_p2 <= (tmp_s_reg_2081 or ap_const_lv9_2E);
    empty_214_fu_1517_p2 <= (tmp_s_reg_2081 or ap_const_lv9_2F);
    empty_215_fu_1527_p2 <= (tmp_s_reg_2081 or ap_const_lv9_30);
    empty_216_fu_1537_p2 <= (tmp_s_reg_2081 or ap_const_lv9_31);
    empty_217_fu_1547_p2 <= (tmp_s_reg_2081 or ap_const_lv9_32);
    empty_218_fu_1557_p2 <= (tmp_s_reg_2081 or ap_const_lv9_33);
    empty_219_fu_1567_p2 <= (tmp_s_reg_2081 or ap_const_lv9_34);
    empty_220_fu_1577_p2 <= (tmp_s_reg_2081 or ap_const_lv9_35);
    empty_221_fu_1587_p2 <= (tmp_s_reg_2081 or ap_const_lv9_36);
    empty_222_fu_1597_p2 <= (tmp_s_reg_2081 or ap_const_lv9_37);
    empty_223_fu_1607_p2 <= (tmp_s_reg_2081 or ap_const_lv9_38);
    empty_224_fu_1617_p2 <= (tmp_s_reg_2081 or ap_const_lv9_39);
    empty_225_fu_1627_p2 <= (tmp_s_reg_2081 or ap_const_lv9_3A);
    empty_226_fu_1637_p2 <= (tmp_s_reg_2081 or ap_const_lv9_3B);
    empty_227_fu_1647_p2 <= (tmp_s_reg_2081 or ap_const_lv9_3C);
    empty_228_fu_1657_p2 <= (tmp_s_reg_2081 or ap_const_lv9_3D);
    empty_229_fu_1667_p2 <= (tmp_s_reg_2081 or ap_const_lv9_3E);
    empty_230_fu_1677_p2 <= (tmp_s_reg_2081 or ap_const_lv9_3F);
    exitcond4012_fu_925_p2 <= "1" when (ap_phi_mux_empty_phi_fu_766_p4 = ap_const_lv5_18) else "0";

    gau_buf_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter4, grp_sobel_fu_911_data_address0, ap_CS_fsm_state48, zext_ln44_fu_1952_p1)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            gau_buf_address0 <= zext_ln44_fu_1952_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            gau_buf_address0 <= grp_sobel_fu_911_data_address0;
        else 
            gau_buf_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gau_buf_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4, grp_sobel_fu_911_data_ce0, ap_CS_fsm_state48)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            gau_buf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            gau_buf_ce0 <= grp_sobel_fu_911_data_ce0;
        else 
            gau_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gau_buf_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln31_reg_2159_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (icmp_ln31_reg_2159_pp1_iter3_reg = ap_const_lv1_0))) then 
            gau_buf_we0 <= ap_const_logic_1;
        else 
            gau_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_ARVALID_assign_proc : process(ap_CS_fsm_state35, gmem0_ARREADY)
    begin
        if (((gmem0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            gmem0_ARVALID <= ap_const_logic_1;
        else 
            gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_RREADY_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln31_reg_2159, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln31_reg_2159 = ap_const_lv1_0))) then 
            gmem0_RREADY <= ap_const_logic_1;
        else 
            gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_blk_n_AR_assign_proc : process(m_axi_gmem0_ARREADY, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            gmem0_blk_n_AR <= m_axi_gmem0_ARREADY;
        else 
            gmem0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_R_assign_proc : process(m_axi_gmem0_RVALID, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln31_reg_2159)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln31_reg_2159 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            gmem0_blk_n_R <= m_axi_gmem0_RVALID;
        else 
            gmem0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_AWVALID_assign_proc : process(ap_CS_fsm_state50, gmem1_AWREADY, grp_nms_fu_918_ap_done)
    begin
        if ((not(((grp_nms_fu_918_ap_done = ap_const_logic_0) or (gmem1_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            gmem1_AWVALID <= ap_const_logic_1;
        else 
            gmem1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_BREADY_assign_proc : process(ap_CS_fsm_state60, gmem1_BVALID)
    begin
        if (((gmem1_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            gmem1_BREADY <= ap_const_logic_1;
        else 
            gmem1_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_WVALID_assign_proc : process(ap_enable_reg_pp2_iter4, icmp_ln273_reg_2250_pp2_iter3_reg, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (icmp_ln273_reg_2250_pp2_iter3_reg = ap_const_lv1_0))) then 
            gmem1_WVALID <= ap_const_logic_1;
        else 
            gmem1_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_blk_n_AW_assign_proc : process(m_axi_gmem1_AWREADY, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            gmem1_blk_n_AW <= m_axi_gmem1_AWREADY;
        else 
            gmem1_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_B_assign_proc : process(m_axi_gmem1_BVALID, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            gmem1_blk_n_B <= m_axi_gmem1_BVALID;
        else 
            gmem1_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_W_assign_proc : process(m_axi_gmem1_WREADY, ap_enable_reg_pp2_iter4, ap_block_pp2_stage0, icmp_ln273_reg_2250_pp2_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (icmp_ln273_reg_2250_pp2_iter3_reg = ap_const_lv1_0))) then 
            gmem1_blk_n_W <= m_axi_gmem1_WREADY;
        else 
            gmem1_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_nms_fu_918_ap_start <= grp_nms_fu_918_ap_start_reg;
    grp_sobel_fu_911_ap_start <= grp_sobel_fu_911_ap_start_reg;
    icmp_ln273_fu_1961_p2 <= "1" when (indvar_flatten10_reg_878 = ap_const_lv19_40000) else "0";
    icmp_ln274_fu_1973_p2 <= "1" when (xi_1_reg_900 = ap_const_lv10_200) else "0";
    icmp_ln286_fu_2033_p2 <= "1" when (unsigned(supp_buf_q0) > unsigned(ap_const_lv8_32)) else "0";
    icmp_ln31_fu_1693_p2 <= "1" when (indvar_flatten_reg_773 = ap_const_lv19_40000) else "0";
    icmp_ln32_fu_1705_p2 <= "1" when (xi_reg_784 = ap_const_lv10_200) else "0";

    line_buf_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage31, ap_block_pp0_stage0, p_cast11_fu_1040_p1, ap_block_pp0_stage1, p_cast15_fu_1072_p1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, p_cast17_fu_1092_p1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, p_cast19_fu_1112_p1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, p_cast21_fu_1132_p1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, p_cast23_fu_1152_p1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, p_cast25_fu_1172_p1, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, p_cast27_fu_1192_p1, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8, p_cast29_fu_1212_p1, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9, p_cast31_fu_1232_p1, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, p_cast33_fu_1252_p1, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, p_cast35_fu_1272_p1, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, p_cast37_fu_1292_p1, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13, p_cast39_fu_1312_p1, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, p_cast41_fu_1332_p1, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15, p_cast43_fu_1352_p1, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage16, p_cast45_fu_1372_p1, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage17, p_cast47_fu_1392_p1, ap_CS_fsm_pp0_stage18, ap_block_pp0_stage18, p_cast49_fu_1412_p1, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage19, p_cast51_fu_1432_p1, ap_CS_fsm_pp0_stage20, ap_block_pp0_stage20, p_cast53_fu_1452_p1, ap_CS_fsm_pp0_stage21, ap_block_pp0_stage21, p_cast55_fu_1472_p1, ap_CS_fsm_pp0_stage22, ap_block_pp0_stage22, p_cast57_fu_1492_p1, ap_CS_fsm_pp0_stage23, ap_block_pp0_stage23, p_cast59_fu_1512_p1, ap_CS_fsm_pp0_stage24, ap_block_pp0_stage24, p_cast61_fu_1532_p1, ap_CS_fsm_pp0_stage25, ap_block_pp0_stage25, p_cast63_fu_1552_p1, ap_CS_fsm_pp0_stage26, ap_block_pp0_stage26, p_cast65_fu_1572_p1, ap_CS_fsm_pp0_stage27, ap_block_pp0_stage27, p_cast67_fu_1592_p1, ap_CS_fsm_pp0_stage28, ap_block_pp0_stage28, p_cast69_fu_1612_p1, ap_CS_fsm_pp0_stage29, ap_block_pp0_stage29, p_cast71_fu_1632_p1, ap_CS_fsm_pp0_stage30, ap_block_pp0_stage30, p_cast73_fu_1652_p1, ap_block_pp0_stage31, p_cast75_fu_1672_p1, zext_ln32_fu_1725_p1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            line_buf_address0 <= zext_ln32_fu_1725_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buf_address0 <= p_cast75_fu_1672_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage31) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage31))) then 
            line_buf_address0 <= p_cast73_fu_1652_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage30) and (ap_const_boolean_0 = ap_block_pp0_stage30))) then 
            line_buf_address0 <= p_cast71_fu_1632_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage29) and (ap_const_boolean_0 = ap_block_pp0_stage29))) then 
            line_buf_address0 <= p_cast69_fu_1612_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage28) and (ap_const_boolean_0 = ap_block_pp0_stage28))) then 
            line_buf_address0 <= p_cast67_fu_1592_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage27) and (ap_const_boolean_0 = ap_block_pp0_stage27))) then 
            line_buf_address0 <= p_cast65_fu_1572_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage26) and (ap_const_boolean_0 = ap_block_pp0_stage26))) then 
            line_buf_address0 <= p_cast63_fu_1552_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25) and (ap_const_boolean_0 = ap_block_pp0_stage25))) then 
            line_buf_address0 <= p_cast61_fu_1532_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24))) then 
            line_buf_address0 <= p_cast59_fu_1512_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23))) then 
            line_buf_address0 <= p_cast57_fu_1492_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_const_boolean_0 = ap_block_pp0_stage22))) then 
            line_buf_address0 <= p_cast55_fu_1472_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_const_boolean_0 = ap_block_pp0_stage21))) then 
            line_buf_address0 <= p_cast53_fu_1452_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20))) then 
            line_buf_address0 <= p_cast51_fu_1432_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19))) then 
            line_buf_address0 <= p_cast49_fu_1412_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18))) then 
            line_buf_address0 <= p_cast47_fu_1392_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17))) then 
            line_buf_address0 <= p_cast45_fu_1372_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16))) then 
            line_buf_address0 <= p_cast43_fu_1352_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15))) then 
            line_buf_address0 <= p_cast41_fu_1332_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14))) then 
            line_buf_address0 <= p_cast39_fu_1312_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address0 <= p_cast37_fu_1292_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address0 <= p_cast35_fu_1272_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address0 <= p_cast33_fu_1252_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address0 <= p_cast31_fu_1232_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address0 <= p_cast29_fu_1212_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address0 <= p_cast27_fu_1192_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address0 <= p_cast25_fu_1172_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address0 <= p_cast23_fu_1152_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address0 <= p_cast21_fu_1132_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address0 <= p_cast19_fu_1112_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address0 <= p_cast17_fu_1092_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address0 <= p_cast15_fu_1072_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address0 <= p_cast11_fu_1040_p1(9 - 1 downto 0);
        else 
            line_buf_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    line_buf_address1_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, line_buf_addr_128_reg_2184_pp1_iter2_reg, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage31, ap_enable_reg_pp1_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1, p_cast14_fu_1062_p1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, p_cast16_fu_1082_p1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, p_cast18_fu_1102_p1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, p_cast20_fu_1122_p1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, p_cast22_fu_1142_p1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, p_cast24_fu_1162_p1, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, p_cast26_fu_1182_p1, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8, p_cast28_fu_1202_p1, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9, p_cast30_fu_1222_p1, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, p_cast32_fu_1242_p1, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, p_cast34_fu_1262_p1, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, p_cast36_fu_1282_p1, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13, p_cast38_fu_1302_p1, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, p_cast40_fu_1322_p1, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15, p_cast42_fu_1342_p1, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage16, p_cast44_fu_1362_p1, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage17, p_cast46_fu_1382_p1, ap_CS_fsm_pp0_stage18, ap_block_pp0_stage18, p_cast48_fu_1402_p1, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage19, p_cast50_fu_1422_p1, ap_CS_fsm_pp0_stage20, ap_block_pp0_stage20, p_cast52_fu_1442_p1, ap_CS_fsm_pp0_stage21, ap_block_pp0_stage21, p_cast54_fu_1462_p1, ap_CS_fsm_pp0_stage22, ap_block_pp0_stage22, p_cast56_fu_1482_p1, ap_CS_fsm_pp0_stage23, ap_block_pp0_stage23, p_cast58_fu_1502_p1, ap_CS_fsm_pp0_stage24, ap_block_pp0_stage24, p_cast60_fu_1522_p1, ap_CS_fsm_pp0_stage25, ap_block_pp0_stage25, p_cast62_fu_1542_p1, ap_CS_fsm_pp0_stage26, ap_block_pp0_stage26, p_cast64_fu_1562_p1, ap_CS_fsm_pp0_stage27, ap_block_pp0_stage27, p_cast66_fu_1582_p1, ap_CS_fsm_pp0_stage28, ap_block_pp0_stage28, p_cast68_fu_1602_p1, ap_CS_fsm_pp0_stage29, ap_block_pp0_stage29, p_cast70_fu_1622_p1, ap_CS_fsm_pp0_stage30, ap_block_pp0_stage30, p_cast72_fu_1642_p1, ap_block_pp0_stage31, p_cast74_fu_1662_p1, p_cast76_fu_1682_p1)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            line_buf_address1 <= line_buf_addr_128_reg_2184_pp1_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buf_address1 <= p_cast76_fu_1682_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage31) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage31))) then 
            line_buf_address1 <= p_cast74_fu_1662_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage30) and (ap_const_boolean_0 = ap_block_pp0_stage30))) then 
            line_buf_address1 <= p_cast72_fu_1642_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage29) and (ap_const_boolean_0 = ap_block_pp0_stage29))) then 
            line_buf_address1 <= p_cast70_fu_1622_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage28) and (ap_const_boolean_0 = ap_block_pp0_stage28))) then 
            line_buf_address1 <= p_cast68_fu_1602_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage27) and (ap_const_boolean_0 = ap_block_pp0_stage27))) then 
            line_buf_address1 <= p_cast66_fu_1582_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage26) and (ap_const_boolean_0 = ap_block_pp0_stage26))) then 
            line_buf_address1 <= p_cast64_fu_1562_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25) and (ap_const_boolean_0 = ap_block_pp0_stage25))) then 
            line_buf_address1 <= p_cast62_fu_1542_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24))) then 
            line_buf_address1 <= p_cast60_fu_1522_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23))) then 
            line_buf_address1 <= p_cast58_fu_1502_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_const_boolean_0 = ap_block_pp0_stage22))) then 
            line_buf_address1 <= p_cast56_fu_1482_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_const_boolean_0 = ap_block_pp0_stage21))) then 
            line_buf_address1 <= p_cast54_fu_1462_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20))) then 
            line_buf_address1 <= p_cast52_fu_1442_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19))) then 
            line_buf_address1 <= p_cast50_fu_1422_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18))) then 
            line_buf_address1 <= p_cast48_fu_1402_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17))) then 
            line_buf_address1 <= p_cast46_fu_1382_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16))) then 
            line_buf_address1 <= p_cast44_fu_1362_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15))) then 
            line_buf_address1 <= p_cast42_fu_1342_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14))) then 
            line_buf_address1 <= p_cast40_fu_1322_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address1 <= p_cast38_fu_1302_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address1 <= p_cast36_fu_1282_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address1 <= p_cast34_fu_1262_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address1 <= p_cast32_fu_1242_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address1 <= p_cast30_fu_1222_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address1 <= p_cast28_fu_1202_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address1 <= p_cast26_fu_1182_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address1 <= p_cast24_fu_1162_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address1 <= p_cast22_fu_1142_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address1 <= p_cast20_fu_1122_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address1 <= p_cast18_fu_1102_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address1 <= p_cast16_fu_1082_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_address1 <= p_cast14_fu_1062_p1(9 - 1 downto 0);
        else 
            line_buf_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    line_buf_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage31, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage17, ap_CS_fsm_pp0_stage18, ap_CS_fsm_pp0_stage19, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage22, ap_CS_fsm_pp0_stage23, ap_CS_fsm_pp0_stage24, ap_CS_fsm_pp0_stage25, ap_CS_fsm_pp0_stage26, ap_CS_fsm_pp0_stage27, ap_CS_fsm_pp0_stage28, ap_CS_fsm_pp0_stage29, ap_CS_fsm_pp0_stage30, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage8_11001, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage12_11001, ap_block_pp0_stage13_11001, ap_block_pp0_stage14_11001, ap_block_pp0_stage15_11001, ap_block_pp0_stage16_11001, ap_block_pp0_stage17_11001, ap_block_pp0_stage18_11001, ap_block_pp0_stage19_11001, ap_block_pp0_stage20_11001, ap_block_pp0_stage21_11001, ap_block_pp0_stage22_11001, ap_block_pp0_stage23_11001, ap_block_pp0_stage24_11001, ap_block_pp0_stage25_11001, ap_block_pp0_stage26_11001, ap_block_pp0_stage27_11001, ap_block_pp0_stage28_11001, ap_block_pp0_stage29_11001, ap_block_pp0_stage30_11001, ap_block_pp0_stage31_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage31) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage31_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage30) and (ap_const_boolean_0 = ap_block_pp0_stage30_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage29) and (ap_const_boolean_0 = ap_block_pp0_stage29_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage28) and (ap_const_boolean_0 = ap_block_pp0_stage28_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage27) and (ap_const_boolean_0 = ap_block_pp0_stage27_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage26) and (ap_const_boolean_0 = ap_block_pp0_stage26_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25) and (ap_const_boolean_0 = ap_block_pp0_stage25_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_const_boolean_0 = ap_block_pp0_stage22_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_const_boolean_0 = ap_block_pp0_stage21_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            line_buf_ce0 <= ap_const_logic_1;
        else 
            line_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage31, ap_enable_reg_pp1_iter3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage17, ap_CS_fsm_pp0_stage18, ap_CS_fsm_pp0_stage19, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage22, ap_CS_fsm_pp0_stage23, ap_CS_fsm_pp0_stage24, ap_CS_fsm_pp0_stage25, ap_CS_fsm_pp0_stage26, ap_CS_fsm_pp0_stage27, ap_CS_fsm_pp0_stage28, ap_CS_fsm_pp0_stage29, ap_CS_fsm_pp0_stage30, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage8_11001, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage12_11001, ap_block_pp0_stage13_11001, ap_block_pp0_stage14_11001, ap_block_pp0_stage15_11001, ap_block_pp0_stage16_11001, ap_block_pp0_stage17_11001, ap_block_pp0_stage18_11001, ap_block_pp0_stage19_11001, ap_block_pp0_stage20_11001, ap_block_pp0_stage21_11001, ap_block_pp0_stage22_11001, ap_block_pp0_stage23_11001, ap_block_pp0_stage24_11001, ap_block_pp0_stage25_11001, ap_block_pp0_stage26_11001, ap_block_pp0_stage27_11001, ap_block_pp0_stage28_11001, ap_block_pp0_stage29_11001, ap_block_pp0_stage30_11001, ap_block_pp0_stage31_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage31) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage31_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage30) and (ap_const_boolean_0 = ap_block_pp0_stage30_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage29) and (ap_const_boolean_0 = ap_block_pp0_stage29_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage28) and (ap_const_boolean_0 = ap_block_pp0_stage28_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage27) and (ap_const_boolean_0 = ap_block_pp0_stage27_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage26) and (ap_const_boolean_0 = ap_block_pp0_stage26_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25) and (ap_const_boolean_0 = ap_block_pp0_stage25_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_const_boolean_0 = ap_block_pp0_stage22_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_const_boolean_0 = ap_block_pp0_stage21_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            line_buf_ce1 <= ap_const_logic_1;
        else 
            line_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_d1_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, empty_166_reg_2075, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage31, ap_enable_reg_pp1_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage16, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage17, ap_CS_fsm_pp0_stage18, ap_block_pp0_stage18, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage19, ap_CS_fsm_pp0_stage20, ap_block_pp0_stage20, ap_CS_fsm_pp0_stage21, ap_block_pp0_stage21, ap_CS_fsm_pp0_stage22, ap_block_pp0_stage22, ap_CS_fsm_pp0_stage23, ap_block_pp0_stage23, ap_CS_fsm_pp0_stage24, ap_block_pp0_stage24, ap_CS_fsm_pp0_stage25, ap_block_pp0_stage25, ap_CS_fsm_pp0_stage26, ap_block_pp0_stage26, ap_CS_fsm_pp0_stage27, ap_block_pp0_stage27, ap_CS_fsm_pp0_stage28, ap_block_pp0_stage28, ap_CS_fsm_pp0_stage29, ap_block_pp0_stage29, ap_CS_fsm_pp0_stage30, ap_block_pp0_stage30, ap_block_pp0_stage31, tmp_20_fu_1858_p3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            line_buf_d1 <= tmp_20_fu_1858_p3;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage31) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage31)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage30) and (ap_const_boolean_0 = ap_block_pp0_stage30)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage29) and (ap_const_boolean_0 = ap_block_pp0_stage29)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage28) and (ap_const_boolean_0 = ap_block_pp0_stage28)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage27) and (ap_const_boolean_0 = ap_block_pp0_stage27)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage26) and (ap_const_boolean_0 = ap_block_pp0_stage26)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25) and (ap_const_boolean_0 = ap_block_pp0_stage25)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_const_boolean_0 = ap_block_pp0_stage22)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_const_boolean_0 = ap_block_pp0_stage21)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            line_buf_d1 <= empty_166_reg_2075;
        else 
            line_buf_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    line_buf_we0_assign_proc : process(exitcond4012_reg_2056, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, mask_fu_1048_p2, mask_reg_2147, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage31, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage17, ap_CS_fsm_pp0_stage18, ap_CS_fsm_pp0_stage19, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage22, ap_CS_fsm_pp0_stage23, ap_CS_fsm_pp0_stage24, ap_CS_fsm_pp0_stage25, ap_CS_fsm_pp0_stage26, ap_CS_fsm_pp0_stage27, ap_CS_fsm_pp0_stage28, ap_CS_fsm_pp0_stage29, ap_CS_fsm_pp0_stage30, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage8_11001, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage12_11001, ap_block_pp0_stage13_11001, ap_block_pp0_stage14_11001, ap_block_pp0_stage15_11001, ap_block_pp0_stage16_11001, ap_block_pp0_stage17_11001, ap_block_pp0_stage18_11001, ap_block_pp0_stage19_11001, ap_block_pp0_stage20_11001, ap_block_pp0_stage21_11001, ap_block_pp0_stage22_11001, ap_block_pp0_stage23_11001, ap_block_pp0_stage24_11001, ap_block_pp0_stage25_11001, ap_block_pp0_stage26_11001, ap_block_pp0_stage27_11001, ap_block_pp0_stage28_11001, ap_block_pp0_stage29_11001, ap_block_pp0_stage30_11001, ap_block_pp0_stage31_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage31) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage31_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage30) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage30_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage29) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage29_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage28) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage28_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage27) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage27_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage26) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage26_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage25_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage23_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage22_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage21_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage20_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage19_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond4012_reg_2056 = ap_const_lv1_0)))) then 
            line_buf_we0 <= mask_reg_2147;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0))) then 
            line_buf_we0 <= mask_fu_1048_p2;
        else 
            line_buf_we0 <= ap_const_lv3_0;
        end if; 
    end process;


    line_buf_we1_assign_proc : process(exitcond4012_reg_2056, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, mask_fu_1048_p2, mask_reg_2147, ap_block_pp1_stage0_11001, icmp_ln31_reg_2159_pp1_iter2_reg, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage31, ap_enable_reg_pp1_iter3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage17, ap_CS_fsm_pp0_stage18, ap_CS_fsm_pp0_stage19, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage22, ap_CS_fsm_pp0_stage23, ap_CS_fsm_pp0_stage24, ap_CS_fsm_pp0_stage25, ap_CS_fsm_pp0_stage26, ap_CS_fsm_pp0_stage27, ap_CS_fsm_pp0_stage28, ap_CS_fsm_pp0_stage29, ap_CS_fsm_pp0_stage30, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage8_11001, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage12_11001, ap_block_pp0_stage13_11001, ap_block_pp0_stage14_11001, ap_block_pp0_stage15_11001, ap_block_pp0_stage16_11001, ap_block_pp0_stage17_11001, ap_block_pp0_stage18_11001, ap_block_pp0_stage19_11001, ap_block_pp0_stage20_11001, ap_block_pp0_stage21_11001, ap_block_pp0_stage22_11001, ap_block_pp0_stage23_11001, ap_block_pp0_stage24_11001, ap_block_pp0_stage25_11001, ap_block_pp0_stage26_11001, ap_block_pp0_stage27_11001, ap_block_pp0_stage28_11001, ap_block_pp0_stage29_11001, ap_block_pp0_stage30_11001, ap_block_pp0_stage31_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln31_reg_2159_pp1_iter2_reg = ap_const_lv1_0))) then 
            line_buf_we1 <= ap_const_lv3_7;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage31) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage31_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage30) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage30_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage29) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage29_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage28) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage28_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage27) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage27_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage26) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage26_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage25_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage23_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage22_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage21_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage20_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage19_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (exitcond4012_reg_2056 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond4012_reg_2056 = ap_const_lv1_0)))) then 
            line_buf_we1 <= mask_reg_2147;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4012_reg_2056 = ap_const_lv1_0))) then 
            line_buf_we1 <= mask_fu_1048_p2;
        else 
            line_buf_we1 <= ap_const_lv3_0;
        end if; 
    end process;

    mask_fu_1048_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv3_1),to_integer(unsigned('0' & empty_167_fu_1045_p1(3-1 downto 0)))));
    p_cast11_fu_1040_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_1033_p3),64));
    p_cast14_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_168_fu_1056_p2),64));
    p_cast15_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_169_fu_1067_p2),64));
    p_cast16_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_170_fu_1077_p2),64));
    p_cast17_fu_1092_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_171_fu_1087_p2),64));
    p_cast18_fu_1102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_172_fu_1097_p2),64));
    p_cast19_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_173_fu_1107_p2),64));
    p_cast20_fu_1122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_174_fu_1117_p2),64));
    p_cast21_fu_1132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_175_fu_1127_p2),64));
    p_cast22_fu_1142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_176_fu_1137_p2),64));
    p_cast23_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_177_fu_1147_p2),64));
    p_cast24_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_178_fu_1157_p2),64));
    p_cast25_fu_1172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_179_fu_1167_p2),64));
    p_cast26_fu_1182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_180_fu_1177_p2),64));
    p_cast27_fu_1192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_181_fu_1187_p2),64));
    p_cast28_fu_1202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_182_fu_1197_p2),64));
    p_cast29_fu_1212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_183_fu_1207_p2),64));
    p_cast30_fu_1222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_184_fu_1217_p2),64));
    p_cast31_fu_1232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_185_fu_1227_p2),64));
    p_cast32_fu_1242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_186_fu_1237_p2),64));
    p_cast33_fu_1252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_187_fu_1247_p2),64));
    p_cast34_fu_1262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_188_fu_1257_p2),64));
    p_cast35_fu_1272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_189_fu_1267_p2),64));
    p_cast36_fu_1282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_190_fu_1277_p2),64));
    p_cast37_fu_1292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_191_fu_1287_p2),64));
    p_cast38_fu_1302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_192_fu_1297_p2),64));
    p_cast39_fu_1312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_193_fu_1307_p2),64));
    p_cast40_fu_1322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_194_fu_1317_p2),64));
    p_cast41_fu_1332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_195_fu_1327_p2),64));
    p_cast42_fu_1342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_196_fu_1337_p2),64));
    p_cast43_fu_1352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_197_fu_1347_p2),64));
    p_cast44_fu_1362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_198_fu_1357_p2),64));
    p_cast45_fu_1372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_199_fu_1367_p2),64));
    p_cast46_fu_1382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_200_fu_1377_p2),64));
    p_cast47_fu_1392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_201_fu_1387_p2),64));
    p_cast48_fu_1402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_202_fu_1397_p2),64));
    p_cast49_fu_1412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_203_fu_1407_p2),64));
    p_cast50_fu_1422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_204_fu_1417_p2),64));
    p_cast51_fu_1432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_205_fu_1427_p2),64));
    p_cast52_fu_1442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_206_fu_1437_p2),64));
    p_cast53_fu_1452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_207_fu_1447_p2),64));
    p_cast54_fu_1462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_208_fu_1457_p2),64));
    p_cast55_fu_1472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_209_fu_1467_p2),64));
    p_cast56_fu_1482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_210_fu_1477_p2),64));
    p_cast57_fu_1492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_211_fu_1487_p2),64));
    p_cast58_fu_1502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_212_fu_1497_p2),64));
    p_cast59_fu_1512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_213_fu_1507_p2),64));
    p_cast60_fu_1522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_214_fu_1517_p2),64));
    p_cast61_fu_1532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_215_fu_1527_p2),64));
    p_cast62_fu_1542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_216_fu_1537_p2),64));
    p_cast63_fu_1552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_217_fu_1547_p2),64));
    p_cast64_fu_1562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_218_fu_1557_p2),64));
    p_cast65_fu_1572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_219_fu_1567_p2),64));
    p_cast66_fu_1582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_220_fu_1577_p2),64));
    p_cast67_fu_1592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_221_fu_1587_p2),64));
    p_cast68_fu_1602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_222_fu_1597_p2),64));
    p_cast69_fu_1612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_223_fu_1607_p2),64));
    p_cast70_fu_1622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_224_fu_1617_p2),64));
    p_cast71_fu_1632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_225_fu_1627_p2),64));
    p_cast72_fu_1642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_226_fu_1637_p2),64));
    p_cast73_fu_1652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_227_fu_1647_p2),64));
    p_cast74_fu_1662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_228_fu_1657_p2),64));
    p_cast75_fu_1672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_229_fu_1667_p2),64));
    p_cast76_fu_1682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_230_fu_1677_p2),64));
    p_demorgan_fu_1021_p2 <= (empty_165_fu_1015_p2 and empty_164_fu_1009_p2);
    select_ln273_1_fu_1993_p3 <= 
        add_ln273_1_fu_1987_p2 when (icmp_ln274_fu_1973_p2(0) = '1') else 
        ap_phi_mux_yi_1_phi_fu_893_p4;
    select_ln273_fu_1979_p3 <= 
        ap_const_lv10_0 when (icmp_ln274_fu_1973_p2(0) = '1') else 
        xi_1_reg_900;
    select_ln292_fu_2039_p3 <= 
        ap_const_lv8_FF when (icmp_ln286_reg_2279(0) = '1') else 
        ap_const_lv8_0;
    select_ln31_1_fu_1735_p3 <= 
        add_ln31_1_fu_1729_p2 when (icmp_ln32_reg_2168_pp1_iter1_reg(0) = '1') else 
        ap_phi_mux_yi_phi_fu_799_p4;
    select_ln31_fu_1711_p3 <= 
        ap_const_lv10_0 when (icmp_ln32_fu_1705_p2(0) = '1') else 
        xi_reg_784;
    shl_ln62_1_fu_1809_p3 <= (ap_phi_mux_window_buf_1_1_1_phi_fu_846_p4 & ap_const_lv1_0);
    shl_ln62_2_fu_1868_p3 <= (window_buf_1_1_reg_830 & ap_const_lv2_0);
    shl_ln62_3_fu_1880_p3 <= (window_buf_1_2_reg_2208 & ap_const_lv1_0);
    shl_ln62_4_fu_1825_p3 <= (ap_phi_mux_window_buf_2_1_phi_fu_810_p4 & ap_const_lv1_0);
    shl_ln_fu_1797_p3 <= (ap_phi_mux_window_buf_0_1_phi_fu_858_p4 & ap_const_lv1_0);

    sobel_buf_grad_address0_assign_proc : process(ap_CS_fsm_state50, grp_sobel_fu_911_out_grad_address0, grp_nms_fu_918_data_grad_address0, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            sobel_buf_grad_address0 <= grp_nms_fu_918_data_grad_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            sobel_buf_grad_address0 <= grp_sobel_fu_911_out_grad_address0;
        else 
            sobel_buf_grad_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sobel_buf_grad_ce0_assign_proc : process(ap_CS_fsm_state50, grp_sobel_fu_911_out_grad_ce0, grp_nms_fu_918_data_grad_ce0, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            sobel_buf_grad_ce0 <= grp_nms_fu_918_data_grad_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            sobel_buf_grad_ce0 <= grp_sobel_fu_911_out_grad_ce0;
        else 
            sobel_buf_grad_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sobel_buf_grad_we0_assign_proc : process(grp_sobel_fu_911_out_grad_we0, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            sobel_buf_grad_we0 <= grp_sobel_fu_911_out_grad_we0;
        else 
            sobel_buf_grad_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sobel_buf_value_address0_assign_proc : process(ap_CS_fsm_state50, grp_sobel_fu_911_out_value_address0, grp_nms_fu_918_data_value_address0, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            sobel_buf_value_address0 <= grp_nms_fu_918_data_value_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            sobel_buf_value_address0 <= grp_sobel_fu_911_out_value_address0;
        else 
            sobel_buf_value_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sobel_buf_value_ce0_assign_proc : process(ap_CS_fsm_state50, grp_sobel_fu_911_out_value_ce0, grp_nms_fu_918_data_value_ce0, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            sobel_buf_value_ce0 <= grp_nms_fu_918_data_value_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            sobel_buf_value_ce0 <= grp_sobel_fu_911_out_value_ce0;
        else 
            sobel_buf_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sobel_buf_value_we0_assign_proc : process(grp_sobel_fu_911_out_value_we0, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            sobel_buf_value_we0 <= grp_sobel_fu_911_out_value_we0;
        else 
            sobel_buf_value_we0 <= ap_const_logic_0;
        end if; 
    end process;


    supp_buf_address0_assign_proc : process(ap_CS_fsm_state50, ap_block_pp2_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, grp_nms_fu_918_out_r_address0, zext_ln281_fu_2029_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            supp_buf_address0 <= zext_ln281_fu_2029_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            supp_buf_address0 <= grp_nms_fu_918_out_r_address0;
        else 
            supp_buf_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    supp_buf_ce0_assign_proc : process(ap_CS_fsm_state50, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1, grp_nms_fu_918_out_r_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            supp_buf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            supp_buf_ce0 <= grp_nms_fu_918_out_r_ce0;
        else 
            supp_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    supp_buf_we0_assign_proc : process(ap_CS_fsm_state50, grp_nms_fu_918_out_r_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            supp_buf_we0 <= grp_nms_fu_918_out_r_we0;
        else 
            supp_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_17_fu_941_p4 <= ap_phi_mux_empty_phi_fu_766_p4(4 downto 3);
    tmp_18_fu_951_p3 <= (tmp_17_fu_941_p4 & ap_const_lv3_0);
    tmp_20_fu_1858_p3 <= (window_buf_2_2_reg_2190_pp1_iter2_reg & tmp_19_reg_2219);
    tmp_s_fu_1033_p3 <= (empty_155_reg_2065 & ap_const_lv6_0);
    trunc_ln273_fu_2001_p1 <= select_ln273_1_fu_1993_p3(9 - 1 downto 0);
    trunc_ln31_fu_1742_p1 <= select_ln31_1_fu_1735_p3(9 - 1 downto 0);
    zext_ln281_fu_2029_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln281_reg_2264),64));
    zext_ln32_fu_1725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_reg_2173),64));
    zext_ln44_fu_1952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln44_reg_2214_pp1_iter3_reg),64));
    zext_ln62_10_fu_1900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_1_fu_1894_p2),12));
    zext_ln62_14_fu_1932_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_6_fu_1926_p2),12));
    zext_ln62_9_fu_1891_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_reg_2224),12));
end behav;
